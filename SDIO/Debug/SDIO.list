
SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  0800f58c  0800f58c  0001058c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe24  0800fe24  00011060  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe24  0800fe24  00010e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe2c  0800fe2c  00011060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe2c  0800fe2c  00010e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fe30  0800fe30  00010e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800fe34  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005250  20000060  0800fe94  00011060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200052b0  0800fe94  000112b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000257c5  00000000  00000000  00011090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051b6  00000000  00000000  00036855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fc0  00000000  00000000  0003ba10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001891  00000000  00000000  0003d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000064c4  00000000  00000000  0003f261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000272aa  00000000  00000000  00045725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5548  00000000  00000000  0006c9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151f17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c74  00000000  00000000  00151f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0015abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f574 	.word	0x0800f574

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	0800f574 	.word	0x0800f574

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008e0:	f000 b96a 	b.w	8000bb8 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	460c      	mov	r4, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14e      	bne.n	80009a6 <__udivmoddi4+0xaa>
 8000908:	4694      	mov	ip, r2
 800090a:	458c      	cmp	ip, r1
 800090c:	4686      	mov	lr, r0
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	d962      	bls.n	80009da <__udivmoddi4+0xde>
 8000914:	b14a      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000916:	f1c2 0320 	rsb	r3, r2, #32
 800091a:	4091      	lsls	r1, r2
 800091c:	fa20 f303 	lsr.w	r3, r0, r3
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	4319      	orrs	r1, r3
 8000926:	fa00 fe02 	lsl.w	lr, r0, r2
 800092a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092e:	fa1f f68c 	uxth.w	r6, ip
 8000932:	fbb1 f4f7 	udiv	r4, r1, r7
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb07 1114 	mls	r1, r7, r4, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb04 f106 	mul.w	r1, r4, r6
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000952:	f080 8112 	bcs.w	8000b7a <__udivmoddi4+0x27e>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 810f 	bls.w	8000b7a <__udivmoddi4+0x27e>
 800095c:	3c02      	subs	r4, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a59      	subs	r1, r3, r1
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb1 f0f7 	udiv	r0, r1, r7
 800096a:	fb07 1110 	mls	r1, r7, r0, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb00 f606 	mul.w	r6, r0, r6
 8000976:	429e      	cmp	r6, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x94>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000982:	f080 80fc 	bcs.w	8000b7e <__udivmoddi4+0x282>
 8000986:	429e      	cmp	r6, r3
 8000988:	f240 80f9 	bls.w	8000b7e <__udivmoddi4+0x282>
 800098c:	4463      	add	r3, ip
 800098e:	3802      	subs	r0, #2
 8000990:	1b9b      	subs	r3, r3, r6
 8000992:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000996:	2100      	movs	r1, #0
 8000998:	b11d      	cbz	r5, 80009a2 <__udivmoddi4+0xa6>
 800099a:	40d3      	lsrs	r3, r2
 800099c:	2200      	movs	r2, #0
 800099e:	e9c5 3200 	strd	r3, r2, [r5]
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d905      	bls.n	80009b6 <__udivmoddi4+0xba>
 80009aa:	b10d      	cbz	r5, 80009b0 <__udivmoddi4+0xb4>
 80009ac:	e9c5 0100 	strd	r0, r1, [r5]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4608      	mov	r0, r1
 80009b4:	e7f5      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009b6:	fab3 f183 	clz	r1, r3
 80009ba:	2900      	cmp	r1, #0
 80009bc:	d146      	bne.n	8000a4c <__udivmoddi4+0x150>
 80009be:	42a3      	cmp	r3, r4
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0xcc>
 80009c2:	4290      	cmp	r0, r2
 80009c4:	f0c0 80f0 	bcc.w	8000ba8 <__udivmoddi4+0x2ac>
 80009c8:	1a86      	subs	r6, r0, r2
 80009ca:	eb64 0303 	sbc.w	r3, r4, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	d0e6      	beq.n	80009a2 <__udivmoddi4+0xa6>
 80009d4:	e9c5 6300 	strd	r6, r3, [r5]
 80009d8:	e7e3      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009da:	2a00      	cmp	r2, #0
 80009dc:	f040 8090 	bne.w	8000b00 <__udivmoddi4+0x204>
 80009e0:	eba1 040c 	sub.w	r4, r1, ip
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	2101      	movs	r1, #1
 80009ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80009f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f6:	fb08 4416 	mls	r4, r8, r6, r4
 80009fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fe:	fb07 f006 	mul.w	r0, r7, r6
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x11c>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x11a>
 8000a10:	4298      	cmp	r0, r3
 8000a12:	f200 80cd 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 8000a16:	4626      	mov	r6, r4
 8000a18:	1a1c      	subs	r4, r3, r0
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a22:	fb08 4410 	mls	r4, r8, r0, r4
 8000a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2a:	fb00 f707 	mul.w	r7, r0, r7
 8000a2e:	429f      	cmp	r7, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x148>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a3a:	d202      	bcs.n	8000a42 <__udivmoddi4+0x146>
 8000a3c:	429f      	cmp	r7, r3
 8000a3e:	f200 80b0 	bhi.w	8000ba2 <__udivmoddi4+0x2a6>
 8000a42:	4620      	mov	r0, r4
 8000a44:	1bdb      	subs	r3, r3, r7
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	e7a5      	b.n	8000998 <__udivmoddi4+0x9c>
 8000a4c:	f1c1 0620 	rsb	r6, r1, #32
 8000a50:	408b      	lsls	r3, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	431f      	orrs	r7, r3
 8000a58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	40f4      	lsrs	r4, r6
 8000a66:	fa00 f801 	lsl.w	r8, r0, r1
 8000a6a:	0c38      	lsrs	r0, r7, #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fbb4 fef0 	udiv	lr, r4, r0
 8000a74:	fa1f fc87 	uxth.w	ip, r7
 8000a78:	fb00 441e 	mls	r4, r0, lr, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb0e f90c 	mul.w	r9, lr, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x1a6>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a92:	f080 8084 	bcs.w	8000b9e <__udivmoddi4+0x2a2>
 8000a96:	45a1      	cmp	r9, r4
 8000a98:	f240 8081 	bls.w	8000b9e <__udivmoddi4+0x2a2>
 8000a9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aa0:	443c      	add	r4, r7
 8000aa2:	eba4 0409 	sub.w	r4, r4, r9
 8000aa6:	fa1f f983 	uxth.w	r9, r3
 8000aaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aae:	fb00 4413 	mls	r4, r0, r3, r4
 8000ab2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	45a4      	cmp	ip, r4
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x1d2>
 8000abe:	193c      	adds	r4, r7, r4
 8000ac0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ac4:	d267      	bcs.n	8000b96 <__udivmoddi4+0x29a>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	d965      	bls.n	8000b96 <__udivmoddi4+0x29a>
 8000aca:	3b02      	subs	r3, #2
 8000acc:	443c      	add	r4, r7
 8000ace:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ad2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad6:	eba4 040c 	sub.w	r4, r4, ip
 8000ada:	429c      	cmp	r4, r3
 8000adc:	46ce      	mov	lr, r9
 8000ade:	469c      	mov	ip, r3
 8000ae0:	d351      	bcc.n	8000b86 <__udivmoddi4+0x28a>
 8000ae2:	d04e      	beq.n	8000b82 <__udivmoddi4+0x286>
 8000ae4:	b155      	cbz	r5, 8000afc <__udivmoddi4+0x200>
 8000ae6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aea:	eb64 040c 	sbc.w	r4, r4, ip
 8000aee:	fa04 f606 	lsl.w	r6, r4, r6
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	431e      	orrs	r6, r3
 8000af6:	40cc      	lsrs	r4, r1
 8000af8:	e9c5 6400 	strd	r6, r4, [r5]
 8000afc:	2100      	movs	r1, #0
 8000afe:	e750      	b.n	80009a2 <__udivmoddi4+0xa6>
 8000b00:	f1c2 0320 	rsb	r3, r2, #32
 8000b04:	fa20 f103 	lsr.w	r1, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b10:	4094      	lsls	r4, r2
 8000b12:	430c      	orrs	r4, r1
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b24:	fb08 3110 	mls	r1, r8, r0, r3
 8000b28:	0c23      	lsrs	r3, r4, #16
 8000b2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2e:	fb00 f107 	mul.w	r1, r0, r7
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x24c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b3e:	d22c      	bcs.n	8000b9a <__udivmoddi4+0x29e>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d92a      	bls.n	8000b9a <__udivmoddi4+0x29e>
 8000b44:	3802      	subs	r0, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b50:	fb08 3311 	mls	r3, r8, r1, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb01 f307 	mul.w	r3, r1, r7
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x276>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b68:	d213      	bcs.n	8000b92 <__udivmoddi4+0x296>
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	d911      	bls.n	8000b92 <__udivmoddi4+0x296>
 8000b6e:	3902      	subs	r1, #2
 8000b70:	4464      	add	r4, ip
 8000b72:	1ae4      	subs	r4, r4, r3
 8000b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b78:	e739      	b.n	80009ee <__udivmoddi4+0xf2>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	e6f0      	b.n	8000960 <__udivmoddi4+0x64>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e706      	b.n	8000990 <__udivmoddi4+0x94>
 8000b82:	45c8      	cmp	r8, r9
 8000b84:	d2ae      	bcs.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7a8      	b.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b92:	4631      	mov	r1, r6
 8000b94:	e7ed      	b.n	8000b72 <__udivmoddi4+0x276>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e799      	b.n	8000ace <__udivmoddi4+0x1d2>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e7d4      	b.n	8000b48 <__udivmoddi4+0x24c>
 8000b9e:	46d6      	mov	lr, sl
 8000ba0:	e77f      	b.n	8000aa2 <__udivmoddi4+0x1a6>
 8000ba2:	4463      	add	r3, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	e74d      	b.n	8000a44 <__udivmoddi4+0x148>
 8000ba8:	4606      	mov	r6, r0
 8000baa:	4623      	mov	r3, r4
 8000bac:	4608      	mov	r0, r1
 8000bae:	e70f      	b.n	80009d0 <__udivmoddi4+0xd4>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	e730      	b.n	8000a18 <__udivmoddi4+0x11c>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_idiv0>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <SDIO_SDCard_Test>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


static void SDIO_SDCard_Test(void)
{
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	f5ad 5d06 	sub.w	sp, sp, #8576	@ 0x2180
 8000bc2:	b08e      	sub	sp, #56	@ 0x38
 8000bc4:	af00      	add	r7, sp, #0
	uint32_t TotalSize, FreeSpace;
	char RW_Buffer[100];
  do
  {
    //------------------[ Mount The SD Card ]--------------------
    FR_Status = f_mount(&FatFs, SDPath, 1);
 8000bc6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8000bca:	f103 0318 	add.w	r3, r3, #24
 8000bce:	3b10      	subs	r3, #16
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	49a1      	ldr	r1, [pc, #644]	@ (8000e58 <SDIO_SDCard_Test+0x29c>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f008 ff31 	bl	8009a3c <f_mount>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000be0:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000be4:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 8000be6:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8000bea:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d016      	beq.n	8000c22 <SDIO_SDCard_Test+0x66>
    {
    	sprintf((char *)buffer,"Error! While Mounting SD Card, Error Code: (%i)\r\n",FR_Status);
 8000bf4:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8000bf8:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000c02:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000c06:	4995      	ldr	r1, [pc, #596]	@ (8000e5c <SDIO_SDCard_Test+0x2a0>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f00d ffbd 	bl	800eb88 <siprintf>
    	HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8000c0e:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 8000c12:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8000c16:	2364      	movs	r3, #100	@ 0x64
 8000c18:	22c8      	movs	r2, #200	@ 0xc8
 8000c1a:	4891      	ldr	r0, [pc, #580]	@ (8000e60 <SDIO_SDCard_Test+0x2a4>)
 8000c1c:	f004 fe9c 	bl	8005958 <HAL_UART_Transmit>
    	break;
 8000c20:	e20f      	b.n	8001042 <SDIO_SDCard_Test+0x486>
    }

    sprintf((char *)buffer, "SD Card Mounted Successfully! \r\n\n");
 8000c22:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000c26:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000c2a:	498e      	ldr	r1, [pc, #568]	@ (8000e64 <SDIO_SDCard_Test+0x2a8>)
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f00d ffab 	bl	800eb88 <siprintf>
    HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8000c32:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 8000c36:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8000c3a:	2364      	movs	r3, #100	@ 0x64
 8000c3c:	22c8      	movs	r2, #200	@ 0xc8
 8000c3e:	4888      	ldr	r0, [pc, #544]	@ (8000e60 <SDIO_SDCard_Test+0x2a4>)
 8000c40:	f004 fe8a 	bl	8005958 <HAL_UART_Transmit>

    //------------------[ Get & Print The SD Card Size & Free Space ]--------------------
    f_getfree("", &FreeClusters, &FS_Ptr);
 8000c44:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8000c48:	3a04      	subs	r2, #4
 8000c4a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c4e:	3b10      	subs	r3, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	4885      	ldr	r0, [pc, #532]	@ (8000e68 <SDIO_SDCard_Test+0x2ac>)
 8000c54:	f009 ffb1 	bl	800abba <f_getfree>
    TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8000c58:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8000c5c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	3b02      	subs	r3, #2
 8000c66:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8000c6a:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8000c6e:	6812      	ldr	r2, [r2, #0]
 8000c70:	8952      	ldrh	r2, [r2, #10]
 8000c72:	fb02 f303 	mul.w	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fd8e 	bl	8000798 <__aeabi_ui2d>
 8000c7c:	f04f 0200 	mov.w	r2, #0
 8000c80:	4b7a      	ldr	r3, [pc, #488]	@ (8000e6c <SDIO_SDCard_Test+0x2b0>)
 8000c82:	f7ff fb1d 	bl	80002c0 <__aeabi_dmul>
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f7ff fdfd 	bl	800088c <__aeabi_d2uiz>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000c98:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8000c9c:	6013      	str	r3, [r2, #0]
    FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000c9e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8000ca2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	895b      	ldrh	r3, [r3, #10]
 8000caa:	461a      	mov	r2, r3
 8000cac:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8000cb0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	fb02 f303 	mul.w	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fd6c 	bl	8000798 <__aeabi_ui2d>
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	4b69      	ldr	r3, [pc, #420]	@ (8000e6c <SDIO_SDCard_Test+0x2b0>)
 8000cc6:	f7ff fafb 	bl	80002c0 <__aeabi_dmul>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	4610      	mov	r0, r2
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f7ff fddb 	bl	800088c <__aeabi_d2uiz>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000cdc:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8000ce0:	6013      	str	r3, [r2, #0]
    sprintf((char *)buffer, "Total SD Card Size: %lu Bytes\r\n", TotalSize);
 8000ce2:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000ce6:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000cea:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000cee:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	495e      	ldr	r1, [pc, #376]	@ (8000e70 <SDIO_SDCard_Test+0x2b4>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00d ff46 	bl	800eb88 <siprintf>
    HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8000cfc:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 8000d00:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8000d04:	2364      	movs	r3, #100	@ 0x64
 8000d06:	22c8      	movs	r2, #200	@ 0xc8
 8000d08:	4855      	ldr	r0, [pc, #340]	@ (8000e60 <SDIO_SDCard_Test+0x2a4>)
 8000d0a:	f004 fe25 	bl	8005958 <HAL_UART_Transmit>
    sprintf((char *)buffer, "Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 8000d0e:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000d12:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000d16:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000d1a:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8000d1e:	6812      	ldr	r2, [r2, #0]
 8000d20:	4954      	ldr	r1, [pc, #336]	@ (8000e74 <SDIO_SDCard_Test+0x2b8>)
 8000d22:	4618      	mov	r0, r3
 8000d24:	f00d ff30 	bl	800eb88 <siprintf>
    HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8000d28:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 8000d2c:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8000d30:	2364      	movs	r3, #100	@ 0x64
 8000d32:	22c8      	movs	r2, #200	@ 0xc8
 8000d34:	484a      	ldr	r0, [pc, #296]	@ (8000e60 <SDIO_SDCard_Test+0x2a4>)
 8000d36:	f004 fe0f 	bl	8005958 <HAL_UART_Transmit>
    //------------------[ Open A Text File For Write & Write Data ]--------------------
    //Open the file
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000d3a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000d3e:	220b      	movs	r2, #11
 8000d40:	494d      	ldr	r1, [pc, #308]	@ (8000e78 <SDIO_SDCard_Test+0x2bc>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f008 fede 	bl	8009b04 <f_open>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000d4e:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000d52:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000d54:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8000d58:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d016      	beq.n	8000d90 <SDIO_SDCard_Test+0x1d4>
    {
      sprintf((char *)buffer, "Error! While Creating/Opening A New Text File, Error Code: (%i)\r\n", FR_Status);
 8000d62:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8000d66:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000d70:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000d74:	4941      	ldr	r1, [pc, #260]	@ (8000e7c <SDIO_SDCard_Test+0x2c0>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f00d ff06 	bl	800eb88 <siprintf>
      HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8000d7c:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 8000d80:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8000d84:	2364      	movs	r3, #100	@ 0x64
 8000d86:	22c8      	movs	r2, #200	@ 0xc8
 8000d88:	4835      	ldr	r0, [pc, #212]	@ (8000e60 <SDIO_SDCard_Test+0x2a4>)
 8000d8a:	f004 fde5 	bl	8005958 <HAL_UART_Transmit>
      break;
 8000d8e:	e158      	b.n	8001042 <SDIO_SDCard_Test+0x486>
    }
    sprintf((char *)buffer, "Text File Created & Opened! Writing Data To The Text File..\r\n\n");
 8000d90:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000d94:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000d98:	4939      	ldr	r1, [pc, #228]	@ (8000e80 <SDIO_SDCard_Test+0x2c4>)
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f00d fef4 	bl	800eb88 <siprintf>
    HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8000da0:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 8000da4:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8000da8:	2364      	movs	r3, #100	@ 0x64
 8000daa:	22c8      	movs	r2, #200	@ 0xc8
 8000dac:	482c      	ldr	r0, [pc, #176]	@ (8000e60 <SDIO_SDCard_Test+0x2a4>)
 8000dae:	f004 fdd3 	bl	8005958 <HAL_UART_Transmit>
    // (1) Write Data To The Text File [ Using f_puts() Function ]
    f_puts("Hello! From STM32 To SD Card Over SDIO, Using f_puts()\n", &Fil);
 8000db2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000db6:	4619      	mov	r1, r3
 8000db8:	4832      	ldr	r0, [pc, #200]	@ (8000e84 <SDIO_SDCard_Test+0x2c8>)
 8000dba:	f00a f86f 	bl	800ae9c <f_puts>
    // (2) Write Data To The Text File [ Using f_write() Function ]
    strcpy(RW_Buffer, "Hello! From STM32 To SD Card Over SDIO, Using f_write()\r\n");
 8000dbe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000dc2:	3b34      	subs	r3, #52	@ 0x34
 8000dc4:	4a30      	ldr	r2, [pc, #192]	@ (8000e88 <SDIO_SDCard_Test+0x2cc>)
 8000dc6:	461c      	mov	r4, r3
 8000dc8:	4615      	mov	r5, r2
 8000dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dda:	c403      	stmia	r4!, {r0, r1}
 8000ddc:	8022      	strh	r2, [r4, #0]
    f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 8000dde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000de2:	3b34      	subs	r3, #52	@ 0x34
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fa13 	bl	8000210 <strlen>
 8000dea:	4602      	mov	r2, r0
 8000dec:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000df0:	3b0c      	subs	r3, #12
 8000df2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000df6:	3934      	subs	r1, #52	@ 0x34
 8000df8:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8000dfc:	f009 f9f4 	bl	800a1e8 <f_write>
    // Close The File
    f_close(&Fil);
 8000e00:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000e04:	4618      	mov	r0, r3
 8000e06:	f009 fc3b 	bl	800a680 <f_close>
    //------------------[ Open A Text File For Read & Read Its Data ]--------------------
    // Open The File
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_READ);
 8000e0a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4919      	ldr	r1, [pc, #100]	@ (8000e78 <SDIO_SDCard_Test+0x2bc>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f008 fe76 	bl	8009b04 <f_open>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000e1e:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000e22:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000e24:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8000e28:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d02e      	beq.n	8000e90 <SDIO_SDCard_Test+0x2d4>
    {
      sprintf((char *)buffer, "Error! While Opening (MyTextFile.txt) File For Read.. \r\n");
 8000e32:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000e36:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000e3a:	4914      	ldr	r1, [pc, #80]	@ (8000e8c <SDIO_SDCard_Test+0x2d0>)
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f00d fea3 	bl	800eb88 <siprintf>
      HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8000e42:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 8000e46:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8000e4a:	2364      	movs	r3, #100	@ 0x64
 8000e4c:	22c8      	movs	r2, #200	@ 0xc8
 8000e4e:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <SDIO_SDCard_Test+0x2a4>)
 8000e50:	f004 fd82 	bl	8005958 <HAL_UART_Transmit>
      break;
 8000e54:	e0f5      	b.n	8001042 <SDIO_SDCard_Test+0x486>
 8000e56:	bf00      	nop
 8000e58:	20000744 	.word	0x20000744
 8000e5c:	0800f598 	.word	0x0800f598
 8000e60:	20000208 	.word	0x20000208
 8000e64:	0800f5cc 	.word	0x0800f5cc
 8000e68:	0800f5f0 	.word	0x0800f5f0
 8000e6c:	3fe00000 	.word	0x3fe00000
 8000e70:	0800f5f4 	.word	0x0800f5f4
 8000e74:	0800f614 	.word	0x0800f614
 8000e78:	0800f638 	.word	0x0800f638
 8000e7c:	0800f648 	.word	0x0800f648
 8000e80:	0800f68c 	.word	0x0800f68c
 8000e84:	0800f6cc 	.word	0x0800f6cc
 8000e88:	0800f704 	.word	0x0800f704
 8000e8c:	0800f740 	.word	0x0800f740
    }
    // (1) Read The Text File's Data [ Using f_gets() Function ]
    f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil);
 8000e90:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8000e94:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e98:	3b34      	subs	r3, #52	@ 0x34
 8000e9a:	2164      	movs	r1, #100	@ 0x64
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f009 ff48 	bl	800ad32 <f_gets>
    sprintf((char *)buffer, "Data Read From (MyTextFile.txt) Using f_gets():%s", RW_Buffer);
 8000ea2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ea6:	3b34      	subs	r3, #52	@ 0x34
 8000ea8:	f507 5003 	add.w	r0, r7, #8384	@ 0x20c0
 8000eac:	f100 0024 	add.w	r0, r0, #36	@ 0x24
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4984      	ldr	r1, [pc, #528]	@ (80010c4 <SDIO_SDCard_Test+0x508>)
 8000eb4:	f00d fe68 	bl	800eb88 <siprintf>
    HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8000eb8:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 8000ebc:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8000ec0:	2364      	movs	r3, #100	@ 0x64
 8000ec2:	22c8      	movs	r2, #200	@ 0xc8
 8000ec4:	4880      	ldr	r0, [pc, #512]	@ (80010c8 <SDIO_SDCard_Test+0x50c>)
 8000ec6:	f004 fd47 	bl	8005958 <HAL_UART_Transmit>
    // (2) Read The Text File's Data [ Using f_read() Function ]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000eca:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8000ece:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000ed8:	3b08      	subs	r3, #8
 8000eda:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000ede:	3934      	subs	r1, #52	@ 0x34
 8000ee0:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8000ee4:	f008 fff2 	bl	8009ecc <f_read>
    sprintf((char *)buffer, "Data Read From (MyTextFile.txt) Using f_read():%s", RW_Buffer);
 8000ee8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000eec:	3b34      	subs	r3, #52	@ 0x34
 8000eee:	f507 5003 	add.w	r0, r7, #8384	@ 0x20c0
 8000ef2:	f100 0024 	add.w	r0, r0, #36	@ 0x24
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4974      	ldr	r1, [pc, #464]	@ (80010cc <SDIO_SDCard_Test+0x510>)
 8000efa:	f00d fe45 	bl	800eb88 <siprintf>
    HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8000efe:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 8000f02:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8000f06:	2364      	movs	r3, #100	@ 0x64
 8000f08:	22c8      	movs	r2, #200	@ 0xc8
 8000f0a:	486f      	ldr	r0, [pc, #444]	@ (80010c8 <SDIO_SDCard_Test+0x50c>)
 8000f0c:	f004 fd24 	bl	8005958 <HAL_UART_Transmit>
    // Close The File
    f_close(&Fil);
 8000f10:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f14:	4618      	mov	r0, r3
 8000f16:	f009 fbb3 	bl	800a680 <f_close>
    sprintf((char *)buffer, "File Closed! \r\n\n");
 8000f1a:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000f1e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000f22:	496b      	ldr	r1, [pc, #428]	@ (80010d0 <SDIO_SDCard_Test+0x514>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f00d fe2f 	bl	800eb88 <siprintf>
    HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8000f2a:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 8000f2e:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8000f32:	2364      	movs	r3, #100	@ 0x64
 8000f34:	22c8      	movs	r2, #200	@ 0xc8
 8000f36:	4864      	ldr	r0, [pc, #400]	@ (80010c8 <SDIO_SDCard_Test+0x50c>)
 8000f38:	f004 fd0e 	bl	8005958 <HAL_UART_Transmit>
    //------------------[ Open An Existing Text File, Update Its Content, Read It Back ]--------------------
    // (1) Open The Existing File For Write (Update)
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_OPEN_EXISTING | FA_WRITE);
 8000f3c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f40:	2202      	movs	r2, #2
 8000f42:	4964      	ldr	r1, [pc, #400]	@ (80010d4 <SDIO_SDCard_Test+0x518>)
 8000f44:	4618      	mov	r0, r3
 8000f46:	f008 fddd 	bl	8009b04 <f_open>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000f50:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000f54:	7013      	strb	r3, [r2, #0]
    FR_Status = f_lseek(&Fil, f_size(&Fil)); // Move The File Pointer To The EOF (End-Of-File)
 8000f56:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8000f5a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f009 fbb9 	bl	800a6de <f_lseek>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000f72:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000f76:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000f78:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8000f7c:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d011      	beq.n	8000faa <SDIO_SDCard_Test+0x3ee>
    {
      sprintf((char *)buffer, "Error! While Opening (MyTextFile.txt) File For Update.. \r\n");
 8000f86:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8000f8a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000f8e:	4952      	ldr	r1, [pc, #328]	@ (80010d8 <SDIO_SDCard_Test+0x51c>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00d fdf9 	bl	800eb88 <siprintf>
      HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8000f96:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 8000f9a:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8000f9e:	2364      	movs	r3, #100	@ 0x64
 8000fa0:	22c8      	movs	r2, #200	@ 0xc8
 8000fa2:	4849      	ldr	r0, [pc, #292]	@ (80010c8 <SDIO_SDCard_Test+0x50c>)
 8000fa4:	f004 fcd8 	bl	8005958 <HAL_UART_Transmit>
      break;
 8000fa8:	e04b      	b.n	8001042 <SDIO_SDCard_Test+0x486>
    }
    // (2) Write New Line of Text Data To The File
    FR_Status = f_puts("This New Line Was Added During File Update!\r\n", &Fil);
 8000faa:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000fae:	4619      	mov	r1, r3
 8000fb0:	484a      	ldr	r0, [pc, #296]	@ (80010dc <SDIO_SDCard_Test+0x520>)
 8000fb2:	f009 ff73 	bl	800ae9c <f_puts>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000fbc:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000fc0:	7013      	strb	r3, [r2, #0]
    f_close(&Fil);
 8000fc2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f009 fb5a 	bl	800a680 <f_close>
    //memset(RW_Buffer,'\0',sizeof(RW_Buffer)); // Clear The Buffer
    RW_Buffer[0] = '\0';
 8000fcc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8000fd0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
    // (3) Read The Contents of The Text File After The Update
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_READ); // Open The File For Read
 8000fd8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000fdc:	2201      	movs	r2, #1
 8000fde:	493d      	ldr	r1, [pc, #244]	@ (80010d4 <SDIO_SDCard_Test+0x518>)
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f008 fd8f 	bl	8009b04 <f_open>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000fec:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000ff0:	7013      	strb	r3, [r2, #0]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000ff2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8000ff6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001000:	3b08      	subs	r3, #8
 8001002:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001006:	3934      	subs	r1, #52	@ 0x34
 8001008:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800100c:	f008 ff5e 	bl	8009ecc <f_read>
    sprintf((char *)buffer, "Data Read From (MyTextFile.txt) After Update:\r\n%s", RW_Buffer);
 8001010:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001014:	3b34      	subs	r3, #52	@ 0x34
 8001016:	f507 5003 	add.w	r0, r7, #8384	@ 0x20c0
 800101a:	f100 0024 	add.w	r0, r0, #36	@ 0x24
 800101e:	461a      	mov	r2, r3
 8001020:	492f      	ldr	r1, [pc, #188]	@ (80010e0 <SDIO_SDCard_Test+0x524>)
 8001022:	f00d fdb1 	bl	800eb88 <siprintf>
    HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8001026:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 800102a:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 800102e:	2364      	movs	r3, #100	@ 0x64
 8001030:	22c8      	movs	r2, #200	@ 0xc8
 8001032:	4825      	ldr	r0, [pc, #148]	@ (80010c8 <SDIO_SDCard_Test+0x50c>)
 8001034:	f004 fc90 	bl	8005958 <HAL_UART_Transmit>
    f_close(&Fil);
 8001038:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800103c:	4618      	mov	r0, r3
 800103e:	f009 fb1f 	bl	800a680 <f_close>
        USC_CDC_Print(TxBuffer);
    }
    */
  } while(0);
  //------------------[ Test Complete! Unmount The SD Card ]--------------------
  FR_Status = f_mount(NULL, "", 0);
 8001042:	2200      	movs	r2, #0
 8001044:	4927      	ldr	r1, [pc, #156]	@ (80010e4 <SDIO_SDCard_Test+0x528>)
 8001046:	2000      	movs	r0, #0
 8001048:	f008 fcf8 	bl	8009a3c <f_mount>
 800104c:	4603      	mov	r3, r0
 800104e:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8001052:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8001056:	7013      	strb	r3, [r2, #0]
  if (FR_Status != FR_OK)
 8001058:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 800105c:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d016      	beq.n	8001094 <SDIO_SDCard_Test+0x4d8>
  {
      sprintf((char *)buffer, "\r\nError! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8001066:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 800106a:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001074:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001078:	491b      	ldr	r1, [pc, #108]	@ (80010e8 <SDIO_SDCard_Test+0x52c>)
 800107a:	4618      	mov	r0, r3
 800107c:	f00d fd84 	bl	800eb88 <siprintf>
      HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 8001080:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 8001084:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8001088:	2364      	movs	r3, #100	@ 0x64
 800108a:	22c8      	movs	r2, #200	@ 0xc8
 800108c:	480e      	ldr	r0, [pc, #56]	@ (80010c8 <SDIO_SDCard_Test+0x50c>)
 800108e:	f004 fc63 	bl	8005958 <HAL_UART_Transmit>
  } else{
      sprintf((char *)buffer, "\r\nSD Card Un-mounted Successfully! \r\n");
      HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
  }
}
 8001092:	e010      	b.n	80010b6 <SDIO_SDCard_Test+0x4fa>
      sprintf((char *)buffer, "\r\nSD Card Un-mounted Successfully! \r\n");
 8001094:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001098:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800109c:	4913      	ldr	r1, [pc, #76]	@ (80010ec <SDIO_SDCard_Test+0x530>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f00d fd72 	bl	800eb88 <siprintf>
      HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 80010a4:	f507 5103 	add.w	r1, r7, #8384	@ 0x20c0
 80010a8:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 80010ac:	2364      	movs	r3, #100	@ 0x64
 80010ae:	22c8      	movs	r2, #200	@ 0xc8
 80010b0:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <SDIO_SDCard_Test+0x50c>)
 80010b2:	f004 fc51 	bl	8005958 <HAL_UART_Transmit>
}
 80010b6:	bf00      	nop
 80010b8:	f507 5706 	add.w	r7, r7, #8576	@ 0x2180
 80010bc:	3738      	adds	r7, #56	@ 0x38
 80010be:	46bd      	mov	sp, r7
 80010c0:	bdb0      	pop	{r4, r5, r7, pc}
 80010c2:	bf00      	nop
 80010c4:	0800f77c 	.word	0x0800f77c
 80010c8:	20000208 	.word	0x20000208
 80010cc:	0800f7b0 	.word	0x0800f7b0
 80010d0:	0800f7e4 	.word	0x0800f7e4
 80010d4:	0800f638 	.word	0x0800f638
 80010d8:	0800f7f8 	.word	0x0800f7f8
 80010dc:	0800f834 	.word	0x0800f834
 80010e0:	0800f864 	.word	0x0800f864
 80010e4:	0800f5f0 	.word	0x0800f5f0
 80010e8:	0800f898 	.word	0x0800f898
 80010ec:	0800f8d0 	.word	0x0800f8d0

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f000 fd60 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f824 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f000 f97e 	bl	80013fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001100:	f000 f954 	bl	80013ac <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001104:	f000 f8fa 	bl	80012fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001108:	f000 f922 	bl	8001350 <MX_USB_OTG_FS_PCD_Init>
  MX_SDIO_SD_Init();
 800110c:	f000 f886 	bl	800121c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001110:	f006 f80a 	bl	8007128 <MX_FATFS_Init>
  MX_TIM8_Init();
 8001114:	f000 f8a2 	bl	800125c <MX_TIM8_Init>
//  else {
//	  sprintf((char *)buffer,"O pin NAO esta set\r\n");
//	  HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
//}

  SDIO_SDCard_Test();
 8001118:	f7ff fd50 	bl	8000bbc <SDIO_SDCard_Test>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800111c:	f00a f896 	bl	800b24c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001120:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <main+0x48>)
 8001122:	2100      	movs	r1, #0
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <main+0x4c>)
 8001126:	f00a f912 	bl	800b34e <osThreadNew>
 800112a:	4603      	mov	r3, r0
 800112c:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <main+0x50>)
 800112e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001130:	f00a f8d2 	bl	800b2d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <main+0x44>
 8001138:	0800f958 	.word	0x0800f958
 800113c:	08001559 	.word	0x08001559
 8001140:	20000734 	.word	0x20000734

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	@ 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	2234      	movs	r2, #52	@ 0x34
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00d fd38 	bl	800ebc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <SystemClock_Config+0xd0>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <SystemClock_Config+0xd0>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	@ 0x40
 8001178:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <SystemClock_Config+0xd0>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	2300      	movs	r3, #0
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <SystemClock_Config+0xd4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <SystemClock_Config+0xd4>)
 800118e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <SystemClock_Config+0xd4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011a4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80011a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011b8:	23a8      	movs	r3, #168	@ 0xa8
 80011ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011bc:	2302      	movs	r3, #2
 80011be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011c0:	2307      	movs	r3, #7
 80011c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 fbad 	bl	800392c <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011d8:	f000 f9c6 	bl	8001568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	230f      	movs	r3, #15
 80011de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e0:	2302      	movs	r3, #2
 80011e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fd22 	bl	8002c44 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001206:	f000 f9af 	bl	8001568 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3750      	adds	r7, #80	@ 0x50
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40007000 	.word	0x40007000

0800121c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <MX_SDIO_SD_Init+0x38>)
 8001222:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <MX_SDIO_SD_Init+0x3c>)
 8001224:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <MX_SDIO_SD_Init+0x38>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800122c:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <MX_SDIO_SD_Init+0x38>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <MX_SDIO_SD_Init+0x38>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <MX_SDIO_SD_Init+0x38>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800123e:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <MX_SDIO_SD_Init+0x38>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 32;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <MX_SDIO_SD_Init+0x38>)
 8001246:	2220      	movs	r2, #32
 8001248:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	2000007c 	.word	0x2000007c
 8001258:	40012c00 	.word	0x40012c00

0800125c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	463b      	mov	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001278:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <MX_TIM8_Init+0x98>)
 800127a:	4a1f      	ldr	r2, [pc, #124]	@ (80012f8 <MX_TIM8_Init+0x9c>)
 800127c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 96-1;
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <MX_TIM8_Init+0x98>)
 8001280:	225f      	movs	r2, #95	@ 0x5f
 8001282:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <MX_TIM8_Init+0x98>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 800128a:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <MX_TIM8_Init+0x98>)
 800128c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001290:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <MX_TIM8_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <MX_TIM8_Init+0x98>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <MX_TIM8_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012a4:	4813      	ldr	r0, [pc, #76]	@ (80012f4 <MX_TIM8_Init+0x98>)
 80012a6:	f003 fef9 	bl	800509c <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80012b0:	f000 f95a 	bl	8001568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	4619      	mov	r1, r3
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <MX_TIM8_Init+0x98>)
 80012c2:	f004 f82a 	bl	800531a <HAL_TIM_ConfigClockSource>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80012cc:	f000 f94c 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_TIM8_Init+0x98>)
 80012de:	f004 fa5b 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80012e8:	f000 f93e 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200001c0 	.word	0x200001c0
 80012f8:	40010400 	.word	0x40010400

080012fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_USART3_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <MX_USART3_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <MX_USART3_UART_Init+0x4c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_USART3_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_USART3_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_USART3_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_USART3_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_USART3_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_USART3_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_USART3_UART_Init+0x4c>)
 8001334:	f004 fac0 	bl	80058b8 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f000 f913 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000208 	.word	0x20000208
 800134c:	40004800 	.word	0x40004800

08001350 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001356:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800135a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135e:	2206      	movs	r2, #6
 8001360:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001364:	2202      	movs	r2, #2
 8001366:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001370:	2202      	movs	r2, #2
 8001372:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001376:	2201      	movs	r2, #1
 8001378:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001382:	2200      	movs	r2, #0
 8001384:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001388:	2201      	movs	r2, #1
 800138a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001394:	f001 fb1b 	bl	80029ce <HAL_PCD_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800139e:	f000 f8e3 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000250 	.word	0x20000250

080013ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <MX_DMA_Init+0x4c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a0f      	ldr	r2, [pc, #60]	@ (80013f8 <MX_DMA_Init+0x4c>)
 80013bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <MX_DMA_Init+0x4c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2105      	movs	r1, #5
 80013d2:	203b      	movs	r0, #59	@ 0x3b
 80013d4:	f000 fd61 	bl	8001e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80013d8:	203b      	movs	r0, #59	@ 0x3b
 80013da:	f000 fd7a 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2105      	movs	r1, #5
 80013e2:	2045      	movs	r0, #69	@ 0x45
 80013e4:	f000 fd59 	bl	8001e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80013e8:	2045      	movs	r0, #69	@ 0x45
 80013ea:	f000 fd72 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	@ 0x30
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	4b4c      	ldr	r3, [pc, #304]	@ (8001548 <MX_GPIO_Init+0x14c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a4b      	ldr	r2, [pc, #300]	@ (8001548 <MX_GPIO_Init+0x14c>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b49      	ldr	r3, [pc, #292]	@ (8001548 <MX_GPIO_Init+0x14c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	4b45      	ldr	r3, [pc, #276]	@ (8001548 <MX_GPIO_Init+0x14c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a44      	ldr	r2, [pc, #272]	@ (8001548 <MX_GPIO_Init+0x14c>)
 8001438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b42      	ldr	r3, [pc, #264]	@ (8001548 <MX_GPIO_Init+0x14c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <MX_GPIO_Init+0x14c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a3d      	ldr	r2, [pc, #244]	@ (8001548 <MX_GPIO_Init+0x14c>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b3b      	ldr	r3, [pc, #236]	@ (8001548 <MX_GPIO_Init+0x14c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b37      	ldr	r3, [pc, #220]	@ (8001548 <MX_GPIO_Init+0x14c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a36      	ldr	r2, [pc, #216]	@ (8001548 <MX_GPIO_Init+0x14c>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <MX_GPIO_Init+0x14c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <MX_GPIO_Init+0x14c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a2f      	ldr	r2, [pc, #188]	@ (8001548 <MX_GPIO_Init+0x14c>)
 800148c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <MX_GPIO_Init+0x14c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <MX_GPIO_Init+0x14c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a28      	ldr	r2, [pc, #160]	@ (8001548 <MX_GPIO_Init+0x14c>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <MX_GPIO_Init+0x14c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80014c0:	4822      	ldr	r0, [pc, #136]	@ (800154c <MX_GPIO_Init+0x150>)
 80014c2:	f001 fa6b 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2140      	movs	r1, #64	@ 0x40
 80014ca:	4821      	ldr	r0, [pc, #132]	@ (8001550 <MX_GPIO_Init+0x154>)
 80014cc:	f001 fa66 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80014d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	481b      	ldr	r0, [pc, #108]	@ (8001554 <MX_GPIO_Init+0x158>)
 80014e8:	f001 f8ac 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80014ec:	f244 0381 	movw	r3, #16513	@ 0x4081
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4811      	ldr	r0, [pc, #68]	@ (800154c <MX_GPIO_Init+0x150>)
 8001506:	f001 f89d 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|USB_OverCurrent_Pin;
 800150a:	2388      	movs	r3, #136	@ 0x88
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	@ (8001550 <MX_GPIO_Init+0x154>)
 800151e:	f001 f891 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001522:	2340      	movs	r3, #64	@ 0x40
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_GPIO_Init+0x154>)
 800153a:	f001 f883 	bl	8002644 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800153e:	bf00      	nop
 8001540:	3730      	adds	r7, #48	@ 0x30
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40020400 	.word	0x40020400
 8001550:	40021800 	.word	0x40021800
 8001554:	40020800 	.word	0x40020800

08001558 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001560:	2001      	movs	r0, #1
 8001562:	f009 ff86 	bl	800b472 <osDelay>
 8001566:	e7fb      	b.n	8001560 <StartDefaultTask+0x8>

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <Error_Handler+0x8>

08001574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_MspInit+0x54>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	4a11      	ldr	r2, [pc, #68]	@ (80015c8 <HAL_MspInit+0x54>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001588:	6453      	str	r3, [r2, #68]	@ 0x44
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <HAL_MspInit+0x54>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_MspInit+0x54>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <HAL_MspInit+0x54>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_MspInit+0x54>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	210f      	movs	r1, #15
 80015b6:	f06f 0001 	mvn.w	r0, #1
 80015ba:	f000 fc6e 	bl	8001e9a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800

080015cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b0a2      	sub	sp, #136	@ 0x88
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e4:	f107 0318 	add.w	r3, r7, #24
 80015e8:	225c      	movs	r2, #92	@ 0x5c
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00d faeb 	bl	800ebc8 <memset>
  if(hsd->Instance==SDIO)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a7c      	ldr	r2, [pc, #496]	@ (80017e8 <HAL_SD_MspInit+0x21c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	f040 80f1 	bne.w	80017e0 <HAL_SD_MspInit+0x214>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80015fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001602:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001604:	2300      	movs	r3, #0
 8001606:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001608:	2300      	movs	r3, #0
 800160a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160c:	f107 0318 	add.w	r3, r7, #24
 8001610:	4618      	mov	r0, r3
 8001612:	f001 fc31 	bl	8002e78 <HAL_RCCEx_PeriphCLKConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800161c:	f7ff ffa4 	bl	8001568 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	4b71      	ldr	r3, [pc, #452]	@ (80017ec <HAL_SD_MspInit+0x220>)
 8001626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001628:	4a70      	ldr	r2, [pc, #448]	@ (80017ec <HAL_SD_MspInit+0x220>)
 800162a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800162e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001630:	4b6e      	ldr	r3, [pc, #440]	@ (80017ec <HAL_SD_MspInit+0x220>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	4b6a      	ldr	r3, [pc, #424]	@ (80017ec <HAL_SD_MspInit+0x220>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001644:	4a69      	ldr	r2, [pc, #420]	@ (80017ec <HAL_SD_MspInit+0x220>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	6313      	str	r3, [r2, #48]	@ 0x30
 800164c:	4b67      	ldr	r3, [pc, #412]	@ (80017ec <HAL_SD_MspInit+0x220>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4b63      	ldr	r3, [pc, #396]	@ (80017ec <HAL_SD_MspInit+0x220>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	4a62      	ldr	r2, [pc, #392]	@ (80017ec <HAL_SD_MspInit+0x220>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	6313      	str	r3, [r2, #48]	@ 0x30
 8001668:	4b60      	ldr	r3, [pc, #384]	@ (80017ec <HAL_SD_MspInit+0x220>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC10     ------> SDIO_D2
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001674:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001678:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167e:	2301      	movs	r3, #1
 8001680:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001688:	230c      	movs	r3, #12
 800168a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001692:	4619      	mov	r1, r3
 8001694:	4856      	ldr	r0, [pc, #344]	@ (80017f0 <HAL_SD_MspInit+0x224>)
 8001696:	f000 ffd5 	bl	8002644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800169a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80016ae:	230c      	movs	r3, #12
 80016b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80016b8:	4619      	mov	r1, r3
 80016ba:	484d      	ldr	r0, [pc, #308]	@ (80017f0 <HAL_SD_MspInit+0x224>)
 80016bc:	f000 ffc2 	bl	8002644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016c0:	2304      	movs	r3, #4
 80016c2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80016d2:	230c      	movs	r3, #12
 80016d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80016dc:	4619      	mov	r1, r3
 80016de:	4845      	ldr	r0, [pc, #276]	@ (80017f4 <HAL_SD_MspInit+0x228>)
 80016e0:	f000 ffb0 	bl	8002644 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80016e4:	4b44      	ldr	r3, [pc, #272]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 80016e6:	4a45      	ldr	r2, [pc, #276]	@ (80017fc <HAL_SD_MspInit+0x230>)
 80016e8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80016ea:	4b43      	ldr	r3, [pc, #268]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 80016ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016f0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f2:	4b41      	ldr	r3, [pc, #260]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f8:	4b3f      	ldr	r3, [pc, #252]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016fe:	4b3e      	ldr	r3, [pc, #248]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 8001700:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001704:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001706:	4b3c      	ldr	r3, [pc, #240]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 8001708:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800170c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800170e:	4b3a      	ldr	r3, [pc, #232]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 8001710:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001714:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001716:	4b38      	ldr	r3, [pc, #224]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 8001718:	2220      	movs	r2, #32
 800171a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800171c:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001722:	4b35      	ldr	r3, [pc, #212]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 8001724:	2204      	movs	r2, #4
 8001726:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001728:	4b33      	ldr	r3, [pc, #204]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 800172a:	2203      	movs	r2, #3
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800172e:	4b32      	ldr	r3, [pc, #200]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 8001730:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001736:	4b30      	ldr	r3, [pc, #192]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 8001738:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800173c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800173e:	482e      	ldr	r0, [pc, #184]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 8001740:	f000 fbe2 	bl	8001f08 <HAL_DMA_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_SD_MspInit+0x182>
    {
      Error_Handler();
 800174a:	f7ff ff0d 	bl	8001568 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a29      	ldr	r2, [pc, #164]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 8001752:	641a      	str	r2, [r3, #64]	@ 0x40
 8001754:	4a28      	ldr	r2, [pc, #160]	@ (80017f8 <HAL_SD_MspInit+0x22c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800175a:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <HAL_SD_MspInit+0x234>)
 800175c:	4a29      	ldr	r2, [pc, #164]	@ (8001804 <HAL_SD_MspInit+0x238>)
 800175e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001760:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <HAL_SD_MspInit+0x234>)
 8001762:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001766:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001768:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <HAL_SD_MspInit+0x234>)
 800176a:	2240      	movs	r2, #64	@ 0x40
 800176c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176e:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <HAL_SD_MspInit+0x234>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001774:	4b22      	ldr	r3, [pc, #136]	@ (8001800 <HAL_SD_MspInit+0x234>)
 8001776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800177a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800177c:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <HAL_SD_MspInit+0x234>)
 800177e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001782:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001784:	4b1e      	ldr	r3, [pc, #120]	@ (8001800 <HAL_SD_MspInit+0x234>)
 8001786:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800178a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800178c:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <HAL_SD_MspInit+0x234>)
 800178e:	2220      	movs	r2, #32
 8001790:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001792:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <HAL_SD_MspInit+0x234>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001798:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <HAL_SD_MspInit+0x234>)
 800179a:	2204      	movs	r2, #4
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800179e:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <HAL_SD_MspInit+0x234>)
 80017a0:	2203      	movs	r2, #3
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80017a4:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <HAL_SD_MspInit+0x234>)
 80017a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017ac:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <HAL_SD_MspInit+0x234>)
 80017ae:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80017b2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80017b4:	4812      	ldr	r0, [pc, #72]	@ (8001800 <HAL_SD_MspInit+0x234>)
 80017b6:	f000 fba7 	bl	8001f08 <HAL_DMA_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_SD_MspInit+0x1f8>
    {
      Error_Handler();
 80017c0:	f7ff fed2 	bl	8001568 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001800 <HAL_SD_MspInit+0x234>)
 80017c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <HAL_SD_MspInit+0x234>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2105      	movs	r1, #5
 80017d4:	2031      	movs	r0, #49	@ 0x31
 80017d6:	f000 fb60 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80017da:	2031      	movs	r0, #49	@ 0x31
 80017dc:	f000 fb79 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3788      	adds	r7, #136	@ 0x88
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	20000100 	.word	0x20000100
 80017fc:	40026458 	.word	0x40026458
 8001800:	20000160 	.word	0x20000160
 8001804:	400264a0 	.word	0x400264a0

08001808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1a      	ldr	r2, [pc, #104]	@ (8001880 <HAL_TIM_Base_MspInit+0x78>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d12d      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_TIM_Base_MspInit+0x7c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <HAL_TIM_Base_MspInit+0x7c>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6453      	str	r3, [r2, #68]	@ 0x44
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <HAL_TIM_Base_MspInit+0x7c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2105      	movs	r1, #5
 800183a:	202b      	movs	r0, #43	@ 0x2b
 800183c:	f000 fb2d 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001840:	202b      	movs	r0, #43	@ 0x2b
 8001842:	f000 fb46 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2105      	movs	r1, #5
 800184a:	202c      	movs	r0, #44	@ 0x2c
 800184c:	f000 fb25 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001850:	202c      	movs	r0, #44	@ 0x2c
 8001852:	f000 fb3e 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2105      	movs	r1, #5
 800185a:	202d      	movs	r0, #45	@ 0x2d
 800185c:	f000 fb1d 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001860:	202d      	movs	r0, #45	@ 0x2d
 8001862:	f000 fb36 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2105      	movs	r1, #5
 800186a:	202e      	movs	r0, #46	@ 0x2e
 800186c:	f000 fb15 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001870:	202e      	movs	r0, #46	@ 0x2e
 8001872:	f000 fb2e 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40010400 	.word	0x40010400
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	@ 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a19      	ldr	r2, [pc, #100]	@ (800190c <HAL_UART_MspInit+0x84>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d12c      	bne.n	8001904 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <HAL_UART_MspInit+0x88>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	4a17      	ldr	r2, [pc, #92]	@ (8001910 <HAL_UART_MspInit+0x88>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_UART_MspInit+0x88>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <HAL_UART_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a10      	ldr	r2, [pc, #64]	@ (8001910 <HAL_UART_MspInit+0x88>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_UART_MspInit+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018f4:	2307      	movs	r3, #7
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <HAL_UART_MspInit+0x8c>)
 8001900:	f000 fea0 	bl	8002644 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	@ 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40004800 	.word	0x40004800
 8001910:	40023800 	.word	0x40023800
 8001914:	40020c00 	.word	0x40020c00

08001918 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b0a0      	sub	sp, #128	@ 0x80
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	225c      	movs	r2, #92	@ 0x5c
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f00d f945 	bl	800ebc8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001946:	d14e      	bne.n	80019e6 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001948:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800194c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800194e:	2300      	movs	r3, #0
 8001950:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4618      	mov	r0, r3
 8001958:	f001 fa8e 	bl	8002e78 <HAL_RCCEx_PeriphCLKConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001962:	f7ff fe01 	bl	8001568 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <HAL_PCD_MspInit+0xd8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a20      	ldr	r2, [pc, #128]	@ (80019f0 <HAL_PCD_MspInit+0xd8>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <HAL_PCD_MspInit+0xd8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001982:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001986:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001994:	230a      	movs	r3, #10
 8001996:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800199c:	4619      	mov	r1, r3
 800199e:	4815      	ldr	r0, [pc, #84]	@ (80019f4 <HAL_PCD_MspInit+0xdc>)
 80019a0:	f000 fe50 	bl	8002644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019aa:	2300      	movs	r3, #0
 80019ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019b6:	4619      	mov	r1, r3
 80019b8:	480e      	ldr	r0, [pc, #56]	@ (80019f4 <HAL_PCD_MspInit+0xdc>)
 80019ba:	f000 fe43 	bl	8002644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019be:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <HAL_PCD_MspInit+0xd8>)
 80019c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c2:	4a0b      	ldr	r2, [pc, #44]	@ (80019f0 <HAL_PCD_MspInit+0xd8>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019c8:	6353      	str	r3, [r2, #52]	@ 0x34
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <HAL_PCD_MspInit+0xd8>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	4a07      	ldr	r2, [pc, #28]	@ (80019f0 <HAL_PCD_MspInit+0xd8>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_PCD_MspInit+0xd8>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	3780      	adds	r7, #128	@ 0x80
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <NMI_Handler+0x4>

08001a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <MemManage_Handler+0x4>

08001a10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a32:	f000 f913 	bl	8001c5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a36:	f00b ff2b 	bl	800d890 <xTaskGetSchedulerState>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d001      	beq.n	8001a44 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a40:	f00c fe22 	bl	800e688 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001a4e:	f003 fb74 	bl	800513a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200001c0 	.word	0x200001c0

08001a5c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001a62:	f003 fb6a 	bl	800513a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200001c0 	.word	0x200001c0

08001a70 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001a76:	f003 fb60 	bl	800513a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200001c0 	.word	0x200001c0

08001a84 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <TIM8_CC_IRQHandler+0x10>)
 8001a8a:	f003 fb56 	bl	800513a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200001c0 	.word	0x200001c0

08001a98 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <SDIO_IRQHandler+0x10>)
 8001a9e:	f002 fc55 	bl	800434c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000007c 	.word	0x2000007c

08001aac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <DMA2_Stream3_IRQHandler+0x10>)
 8001ab2:	f000 fb51 	bl	8002158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000100 	.word	0x20000100

08001ac0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <DMA2_Stream6_IRQHandler+0x10>)
 8001ac6:	f000 fb47 	bl	8002158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000160 	.word	0x20000160

08001ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001adc:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <_sbrk+0x5c>)
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <_sbrk+0x60>)
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <_sbrk+0x64>)
 8001af2:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <_sbrk+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d207      	bcs.n	8001b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b04:	f00d f8be 	bl	800ec84 <__errno>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20020000 	.word	0x20020000
 8001b34:	00000400 	.word	0x00000400
 8001b38:	20000738 	.word	0x20000738
 8001b3c:	200052b0 	.word	0x200052b0

08001b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <SystemInit+0x20>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <SystemInit+0x20>)
 8001b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b68:	f7ff ffea 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b6c:	480c      	ldr	r0, [pc, #48]	@ (8001ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6e:	490d      	ldr	r1, [pc, #52]	@ (8001ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b84:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f00d f87d 	bl	800ec90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7ff faab 	bl	80010f0 <main>
  bx  lr    
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ba8:	0800fe34 	.word	0x0800fe34
  ldr r2, =_sbss
 8001bac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001bb0:	200052b0 	.word	0x200052b0

08001bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <HAL_Init+0x40>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <HAL_Init+0x40>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <HAL_Init+0x40>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 f94f 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	200f      	movs	r0, #15
 8001be8:	f000 f808 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f7ff fcc2 	bl	8001574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c04:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_InitTick+0x54>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_InitTick+0x58>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f967 	bl	8001eee <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c38:	f000 f92f 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	@ (8001c58 <HAL_InitTick+0x5c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	2000073c 	.word	0x2000073c

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	2000073c 	.word	0x2000073c

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	@ (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	@ 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e64:	f7ff ff8e 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff29 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff3e 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff8e 	bl	8001dd8 <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff31 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffa2 	bl	8001e40 <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff feb6 	bl	8001c84 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e099      	b.n	8002058 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f44:	e00f      	b.n	8001f66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f46:	f7ff fe9d 	bl	8001c84 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d908      	bls.n	8001f66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e078      	b.n	8002058 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e8      	bne.n	8001f46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	4b38      	ldr	r3, [pc, #224]	@ (8002060 <HAL_DMA_Init+0x158>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d107      	bne.n	8001fd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f023 0307 	bic.w	r3, r3, #7
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d117      	bne.n	800202a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00e      	beq.n	800202a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fa9d 	bl	800254c <DMA_CheckFifoParam>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2240      	movs	r2, #64	@ 0x40
 800201c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002026:	2301      	movs	r3, #1
 8002028:	e016      	b.n	8002058 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fa54 	bl	80024e0 <DMA_CalcBaseAndBitshift>
 8002038:	4603      	mov	r3, r0
 800203a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	223f      	movs	r2, #63	@ 0x3f
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	f010803f 	.word	0xf010803f

08002064 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_DMA_Start_IT+0x26>
 8002086:	2302      	movs	r3, #2
 8002088:	e040      	b.n	800210c <HAL_DMA_Start_IT+0xa8>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d12f      	bne.n	80020fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2202      	movs	r2, #2
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f9e6 	bl	8002484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020bc:	223f      	movs	r2, #63	@ 0x3f
 80020be:	409a      	lsls	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0216 	orr.w	r2, r2, #22
 80020d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0208 	orr.w	r2, r2, #8
 80020ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e005      	b.n	800210a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800210a:	7dfb      	ldrb	r3, [r7, #23]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d004      	beq.n	8002132 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2280      	movs	r2, #128	@ 0x80
 800212c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00c      	b.n	800214c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2205      	movs	r2, #5
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002164:	4b8e      	ldr	r3, [pc, #568]	@ (80023a0 <HAL_DMA_IRQHandler+0x248>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a8e      	ldr	r2, [pc, #568]	@ (80023a4 <HAL_DMA_IRQHandler+0x24c>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0a9b      	lsrs	r3, r3, #10
 8002170:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002182:	2208      	movs	r2, #8
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d01a      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0204 	bic.w	r2, r2, #4
 80021aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b0:	2208      	movs	r2, #8
 80021b2:	409a      	lsls	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c8:	2201      	movs	r2, #1
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d012      	beq.n	80021fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e6:	2201      	movs	r2, #1
 80021e8:	409a      	lsls	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	f043 0202 	orr.w	r2, r3, #2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fe:	2204      	movs	r2, #4
 8002200:	409a      	lsls	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4013      	ands	r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d012      	beq.n	8002230 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00b      	beq.n	8002230 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221c:	2204      	movs	r2, #4
 800221e:	409a      	lsls	r2, r3
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002228:	f043 0204 	orr.w	r2, r3, #4
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002234:	2210      	movs	r2, #16
 8002236:	409a      	lsls	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d043      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d03c      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002252:	2210      	movs	r2, #16
 8002254:	409a      	lsls	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d018      	beq.n	800229a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d108      	bne.n	8002288 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d024      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
 8002286:	e01f      	b.n	80022c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01b      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4798      	blx	r3
 8002298:	e016      	b.n	80022c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0208 	bic.w	r2, r2, #8
 80022b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022cc:	2220      	movs	r2, #32
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 808f 	beq.w	80023f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8087 	beq.w	80023f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ee:	2220      	movs	r2, #32
 80022f0:	409a      	lsls	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d136      	bne.n	8002370 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0216 	bic.w	r2, r2, #22
 8002310:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002320:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	d103      	bne.n	8002332 <HAL_DMA_IRQHandler+0x1da>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0208 	bic.w	r2, r2, #8
 8002340:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002346:	223f      	movs	r2, #63	@ 0x3f
 8002348:	409a      	lsls	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002362:	2b00      	cmp	r3, #0
 8002364:	d07e      	beq.n	8002464 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	4798      	blx	r3
        }
        return;
 800236e:	e079      	b.n	8002464 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01d      	beq.n	80023ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10d      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002390:	2b00      	cmp	r3, #0
 8002392:	d031      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
 800239c:	e02c      	b.n	80023f8 <HAL_DMA_IRQHandler+0x2a0>
 800239e:	bf00      	nop
 80023a0:	20000000 	.word	0x20000000
 80023a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d023      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	4798      	blx	r3
 80023b8:	e01e      	b.n	80023f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10f      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0210 	bic.w	r2, r2, #16
 80023d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d032      	beq.n	8002466 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d022      	beq.n	8002452 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2205      	movs	r2, #5
 8002410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	3301      	adds	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	d307      	bcc.n	8002440 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f2      	bne.n	8002424 <HAL_DMA_IRQHandler+0x2cc>
 800243e:	e000      	b.n	8002442 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002440:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
 8002462:	e000      	b.n	8002466 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002464:	bf00      	nop
    }
  }
}
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b40      	cmp	r3, #64	@ 0x40
 80024b0:	d108      	bne.n	80024c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024c2:	e007      	b.n	80024d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	60da      	str	r2, [r3, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	3b10      	subs	r3, #16
 80024f0:	4a14      	ldr	r2, [pc, #80]	@ (8002544 <DMA_CalcBaseAndBitshift+0x64>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024fa:	4a13      	ldr	r2, [pc, #76]	@ (8002548 <DMA_CalcBaseAndBitshift+0x68>)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d909      	bls.n	8002522 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002516:	f023 0303 	bic.w	r3, r3, #3
 800251a:	1d1a      	adds	r2, r3, #4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002520:	e007      	b.n	8002532 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	aaaaaaab 	.word	0xaaaaaaab
 8002548:	0800f994 	.word	0x0800f994

0800254c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11f      	bne.n	80025a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d856      	bhi.n	800261a <DMA_CheckFifoParam+0xce>
 800256c:	a201      	add	r2, pc, #4	@ (adr r2, 8002574 <DMA_CheckFifoParam+0x28>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	08002585 	.word	0x08002585
 8002578:	08002597 	.word	0x08002597
 800257c:	08002585 	.word	0x08002585
 8002580:	0800261b 	.word	0x0800261b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d046      	beq.n	800261e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002594:	e043      	b.n	800261e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800259e:	d140      	bne.n	8002622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a4:	e03d      	b.n	8002622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ae:	d121      	bne.n	80025f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d837      	bhi.n	8002626 <DMA_CheckFifoParam+0xda>
 80025b6:	a201      	add	r2, pc, #4	@ (adr r2, 80025bc <DMA_CheckFifoParam+0x70>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025d3 	.word	0x080025d3
 80025c4:	080025cd 	.word	0x080025cd
 80025c8:	080025e5 	.word	0x080025e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
      break;
 80025d0:	e030      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d025      	beq.n	800262a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e2:	e022      	b.n	800262a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025ec:	d11f      	bne.n	800262e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025f2:	e01c      	b.n	800262e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d903      	bls.n	8002602 <DMA_CheckFifoParam+0xb6>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d003      	beq.n	8002608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002600:	e018      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
      break;
 8002606:	e015      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00e      	beq.n	8002632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
      break;
 8002618:	e00b      	b.n	8002632 <DMA_CheckFifoParam+0xe6>
      break;
 800261a:	bf00      	nop
 800261c:	e00a      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 800261e:	bf00      	nop
 8002620:	e008      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 8002622:	bf00      	nop
 8002624:	e006      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e004      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 800262a:	bf00      	nop
 800262c:	e002      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;   
 800262e:	bf00      	nop
 8002630:	e000      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
    }
  } 
  
  return status; 
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e165      	b.n	800292c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 8154 	bne.w	8002926 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d005      	beq.n	8002696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002692:	2b02      	cmp	r3, #2
 8002694:	d130      	bne.n	80026f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0201 	and.w	r2, r3, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b03      	cmp	r3, #3
 8002702:	d017      	beq.n	8002734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d123      	bne.n	8002788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80ae 	beq.w	8002926 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002944 <HAL_GPIO_Init+0x300>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002944 <HAL_GPIO_Init+0x300>)
 80027d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027da:	4b5a      	ldr	r3, [pc, #360]	@ (8002944 <HAL_GPIO_Init+0x300>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027e6:	4a58      	ldr	r2, [pc, #352]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4f      	ldr	r2, [pc, #316]	@ (800294c <HAL_GPIO_Init+0x308>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d025      	beq.n	800285e <HAL_GPIO_Init+0x21a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4e      	ldr	r2, [pc, #312]	@ (8002950 <HAL_GPIO_Init+0x30c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01f      	beq.n	800285a <HAL_GPIO_Init+0x216>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4d      	ldr	r2, [pc, #308]	@ (8002954 <HAL_GPIO_Init+0x310>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d019      	beq.n	8002856 <HAL_GPIO_Init+0x212>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4c      	ldr	r2, [pc, #304]	@ (8002958 <HAL_GPIO_Init+0x314>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_GPIO_Init+0x20e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4b      	ldr	r2, [pc, #300]	@ (800295c <HAL_GPIO_Init+0x318>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00d      	beq.n	800284e <HAL_GPIO_Init+0x20a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4a      	ldr	r2, [pc, #296]	@ (8002960 <HAL_GPIO_Init+0x31c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <HAL_GPIO_Init+0x206>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a49      	ldr	r2, [pc, #292]	@ (8002964 <HAL_GPIO_Init+0x320>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_GPIO_Init+0x202>
 8002842:	2306      	movs	r3, #6
 8002844:	e00c      	b.n	8002860 <HAL_GPIO_Init+0x21c>
 8002846:	2307      	movs	r3, #7
 8002848:	e00a      	b.n	8002860 <HAL_GPIO_Init+0x21c>
 800284a:	2305      	movs	r3, #5
 800284c:	e008      	b.n	8002860 <HAL_GPIO_Init+0x21c>
 800284e:	2304      	movs	r3, #4
 8002850:	e006      	b.n	8002860 <HAL_GPIO_Init+0x21c>
 8002852:	2303      	movs	r3, #3
 8002854:	e004      	b.n	8002860 <HAL_GPIO_Init+0x21c>
 8002856:	2302      	movs	r3, #2
 8002858:	e002      	b.n	8002860 <HAL_GPIO_Init+0x21c>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_GPIO_Init+0x21c>
 800285e:	2300      	movs	r3, #0
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	f002 0203 	and.w	r2, r2, #3
 8002866:	0092      	lsls	r2, r2, #2
 8002868:	4093      	lsls	r3, r2
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002870:	4935      	ldr	r1, [pc, #212]	@ (8002948 <HAL_GPIO_Init+0x304>)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	3302      	adds	r3, #2
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287e:	4b3a      	ldr	r3, [pc, #232]	@ (8002968 <HAL_GPIO_Init+0x324>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028a2:	4a31      	ldr	r2, [pc, #196]	@ (8002968 <HAL_GPIO_Init+0x324>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002968 <HAL_GPIO_Init+0x324>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028cc:	4a26      	ldr	r2, [pc, #152]	@ (8002968 <HAL_GPIO_Init+0x324>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028d2:	4b25      	ldr	r3, [pc, #148]	@ (8002968 <HAL_GPIO_Init+0x324>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002968 <HAL_GPIO_Init+0x324>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002968 <HAL_GPIO_Init+0x324>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002920:	4a11      	ldr	r2, [pc, #68]	@ (8002968 <HAL_GPIO_Init+0x324>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3301      	adds	r3, #1
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	2b0f      	cmp	r3, #15
 8002930:	f67f ae96 	bls.w	8002660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3724      	adds	r7, #36	@ 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40013800 	.word	0x40013800
 800294c:	40020000 	.word	0x40020000
 8002950:	40020400 	.word	0x40020400
 8002954:	40020800 	.word	0x40020800
 8002958:	40020c00 	.word	0x40020c00
 800295c:	40021000 	.word	0x40021000
 8002960:	40021400 	.word	0x40021400
 8002964:	40021800 	.word	0x40021800
 8002968:	40013c00 	.word	0x40013c00

0800296c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	887b      	ldrh	r3, [r7, #2]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e001      	b.n	800298e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
 80029a8:	4613      	mov	r3, r2
 80029aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ac:	787b      	ldrb	r3, [r7, #1]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b8:	e003      	b.n	80029c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ba:	887b      	ldrh	r3, [r7, #2]
 80029bc:	041a      	lsls	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	619a      	str	r2, [r3, #24]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af02      	add	r7, sp, #8
 80029d4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e108      	b.n	8002bf2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe ff8c 	bl	8001918 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2203      	movs	r2, #3
 8002a04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a0e:	d102      	bne.n	8002a16 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 f8ee 	bl	8006bfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7c1a      	ldrb	r2, [r3, #16]
 8002a28:	f88d 2000 	strb.w	r2, [sp]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a30:	f004 f880 	bl	8006b34 <USB_CoreInit>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0d5      	b.n	8002bf2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 f8e6 	bl	8006c1e <USB_SetCurrentMode>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0c6      	b.n	8002bf2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e04a      	b.n	8002b00 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3315      	adds	r3, #21
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3314      	adds	r3, #20
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	b298      	uxth	r0, r3
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	332e      	adds	r3, #46	@ 0x2e
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3318      	adds	r3, #24
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	331c      	adds	r3, #28
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3320      	adds	r3, #32
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	3324      	adds	r3, #36	@ 0x24
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	3301      	adds	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	791b      	ldrb	r3, [r3, #4]
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d3af      	bcc.n	8002a6a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
 8002b0e:	e044      	b.n	8002b9a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	3301      	adds	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	791b      	ldrb	r3, [r3, #4]
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d3b5      	bcc.n	8002b10 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7c1a      	ldrb	r2, [r3, #16]
 8002bac:	f88d 2000 	strb.w	r2, [sp]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb4:	f004 f880 	bl	8006cb8 <USB_DevInit>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e013      	b.n	8002bf2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7b1b      	ldrb	r3, [r3, #12]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f80a 	bl	8002bfa <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 fa3b 	bl	8007066 <USB_DevDisconnect>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	f043 0303 	orr.w	r3, r3, #3
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0cc      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b68      	ldr	r3, [pc, #416]	@ (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d90c      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b65      	ldr	r3, [pc, #404]	@ (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	@ (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b8      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d020      	beq.n	8002cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c98:	4b59      	ldr	r3, [pc, #356]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ca2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb0:	4b53      	ldr	r3, [pc, #332]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b50      	ldr	r3, [pc, #320]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	494d      	ldr	r1, [pc, #308]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d044      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b47      	ldr	r3, [pc, #284]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d119      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e07f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d02:	4b3f      	ldr	r3, [pc, #252]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	4b3b      	ldr	r3, [pc, #236]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e067      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d22:	4b37      	ldr	r3, [pc, #220]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f023 0203 	bic.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4934      	ldr	r1, [pc, #208]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d34:	f7fe ffa6 	bl	8001c84 <HAL_GetTick>
 8002d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3c:	f7fe ffa2 	bl	8001c84 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e04f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	4b2b      	ldr	r3, [pc, #172]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 020c 	and.w	r2, r3, #12
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1eb      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d64:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d20c      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b22      	ldr	r3, [pc, #136]	@ (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b20      	ldr	r3, [pc, #128]	@ (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e032      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d98:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4916      	ldr	r1, [pc, #88]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db6:	4b12      	ldr	r3, [pc, #72]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	490e      	ldr	r1, [pc, #56]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dca:	f000 fb7f 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	490a      	ldr	r1, [pc, #40]	@ (8002e04 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	5ccb      	ldrb	r3, [r1, r3]
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	4a09      	ldr	r2, [pc, #36]	@ (8002e08 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002de6:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe ff06 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023c00 	.word	0x40023c00
 8002e00:	40023800 	.word	0x40023800
 8002e04:	0800f97c 	.word	0x0800f97c
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000004 	.word	0x20000004

08002e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e14:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000000 	.word	0x20000000

08002e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e2c:	f7ff fff0 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	0a9b      	lsrs	r3, r3, #10
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4903      	ldr	r1, [pc, #12]	@ (8002e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	0800f98c 	.word	0x0800f98c

08002e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e54:	f7ff ffdc 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0b5b      	lsrs	r3, r3, #13
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4903      	ldr	r1, [pc, #12]	@ (8002e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	0800f98c 	.word	0x0800f98c

08002e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	@ 0x30
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002eb0:	4b6f      	ldr	r3, [pc, #444]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002eb6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebe:	496c      	ldr	r1, [pc, #432]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002ede:	4b64      	ldr	r3, [pc, #400]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ee4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eec:	4960      	ldr	r1, [pc, #384]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002efc:	2301      	movs	r3, #1
 8002efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d017      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f0c:	4b58      	ldr	r3, [pc, #352]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	4955      	ldr	r1, [pc, #340]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d017      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f48:	4b49      	ldr	r3, [pc, #292]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f56:	4946      	ldr	r1, [pc, #280]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f66:	d101      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002f74:	2301      	movs	r3, #1
 8002f76:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 808a 	beq.w	800309a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	4b39      	ldr	r3, [pc, #228]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	4a38      	ldr	r2, [pc, #224]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f96:	4b36      	ldr	r3, [pc, #216]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fa2:	4b34      	ldr	r3, [pc, #208]	@ (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a33      	ldr	r2, [pc, #204]	@ (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fae:	f7fe fe69 	bl	8001c84 <HAL_GetTick>
 8002fb2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb6:	f7fe fe65 	bl	8001c84 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e278      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fd4:	4b26      	ldr	r3, [pc, #152]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fdc:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d02f      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fec:	6a3a      	ldr	r2, [r7, #32]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d028      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ffa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003002:	4b1d      	ldr	r3, [pc, #116]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003008:	4a19      	ldr	r2, [pc, #100]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800300e:	4b18      	ldr	r3, [pc, #96]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d114      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe fe33 	bl	8001c84 <HAL_GetTick>
 800301e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe fe2f 	bl	8001c84 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e240      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	4b0d      	ldr	r3, [pc, #52]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ee      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800304c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003050:	d114      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003052:	4b07      	ldr	r3, [pc, #28]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003066:	4902      	ldr	r1, [pc, #8]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003068:	4313      	orrs	r3, r2
 800306a:	608b      	str	r3, [r1, #8]
 800306c:	e00c      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40007000 	.word	0x40007000
 8003078:	42470e40 	.word	0x42470e40
 800307c:	4b4a      	ldr	r3, [pc, #296]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a49      	ldr	r2, [pc, #292]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003082:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003086:	6093      	str	r3, [r2, #8]
 8003088:	4b47      	ldr	r3, [pc, #284]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800308a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	4944      	ldr	r1, [pc, #272]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003096:	4313      	orrs	r3, r2
 8003098:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80030ac:	4b3f      	ldr	r3, [pc, #252]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80030ae:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80030bc:	4b3a      	ldr	r3, [pc, #232]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ca:	4937      	ldr	r1, [pc, #220]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030de:	4b32      	ldr	r3, [pc, #200]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ec:	492e      	ldr	r1, [pc, #184]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d011      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003100:	4b29      	ldr	r3, [pc, #164]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003106:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310e:	4926      	ldr	r1, [pc, #152]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800311e:	d101      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003120:	2301      	movs	r3, #1
 8003122:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003130:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003136:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	491a      	ldr	r1, [pc, #104]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800314e:	2b00      	cmp	r3, #0
 8003150:	d011      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003152:	4b15      	ldr	r3, [pc, #84]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003154:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003158:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003160:	4911      	ldr	r1, [pc, #68]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800316c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003170:	d101      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003172:	2301      	movs	r3, #1
 8003174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003178:	2b01      	cmp	r3, #1
 800317a:	d005      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003184:	f040 80ff 	bne.w	8003386 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003188:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800318e:	f7fe fd79 	bl	8001c84 <HAL_GetTick>
 8003192:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003194:	e00e      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003196:	f7fe fd75 	bl	8001c84 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d907      	bls.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e188      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 80031a8:	40023800 	.word	0x40023800
 80031ac:	424711e0 	.word	0x424711e0
 80031b0:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031b4:	4b7e      	ldr	r3, [pc, #504]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1ea      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d028      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d124      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80031e8:	4b71      	ldr	r3, [pc, #452]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031ee:	0c1b      	lsrs	r3, r3, #16
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	3301      	adds	r3, #1
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031fa:	4b6d      	ldr	r3, [pc, #436]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003200:	0e1b      	lsrs	r3, r3, #24
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	431a      	orrs	r2, r3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	431a      	orrs	r2, r3
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	071b      	lsls	r3, r3, #28
 800322a:	4961      	ldr	r1, [pc, #388]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d004      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003250:	2b00      	cmp	r3, #0
 8003252:	d035      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003258:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800325c:	d130      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800325e:	4b54      	ldr	r3, [pc, #336]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	3301      	adds	r3, #1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003270:	4b4f      	ldr	r3, [pc, #316]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003276:	0f1b      	lsrs	r3, r3, #28
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	019b      	lsls	r3, r3, #6
 8003288:	431a      	orrs	r2, r3
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	431a      	orrs	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	071b      	lsls	r3, r3, #28
 80032a0:	4943      	ldr	r1, [pc, #268]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032a8:	4b41      	ldr	r3, [pc, #260]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ae:	f023 021f 	bic.w	r2, r3, #31
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	493d      	ldr	r1, [pc, #244]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d029      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032d4:	d124      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032d6:	4b36      	ldr	r3, [pc, #216]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	3301      	adds	r3, #1
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032e8:	4b31      	ldr	r3, [pc, #196]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ee:	0f1b      	lsrs	r3, r3, #28
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	019b      	lsls	r3, r3, #6
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	3b01      	subs	r3, #1
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	431a      	orrs	r2, r3
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	061b      	lsls	r3, r3, #24
 8003312:	431a      	orrs	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	071b      	lsls	r3, r3, #28
 8003318:	4925      	ldr	r1, [pc, #148]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003328:	2b00      	cmp	r3, #0
 800332a:	d016      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	3b01      	subs	r3, #1
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	071b      	lsls	r3, r3, #28
 8003352:	4917      	ldr	r1, [pc, #92]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800335a:	4b16      	ldr	r3, [pc, #88]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003360:	f7fe fc90 	bl	8001c84 <HAL_GetTick>
 8003364:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003368:	f7fe fc8c 	bl	8001c84 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e09f      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800337a:	4b0d      	ldr	r3, [pc, #52]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 8095 	bne.w	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800338e:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003394:	f7fe fc76 	bl	8001c84 <HAL_GetTick>
 8003398:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800339a:	e00f      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800339c:	f7fe fc72 	bl	8001c84 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d908      	bls.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e085      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	42470068 	.word	0x42470068
 80033b8:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033bc:	4b41      	ldr	r3, [pc, #260]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033c8:	d0e8      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d02b      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d127      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80033f2:	4b34      	ldr	r3, [pc, #208]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	3301      	adds	r3, #1
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	431a      	orrs	r2, r3
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	3b01      	subs	r3, #1
 8003416:	041b      	lsls	r3, r3, #16
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	4928      	ldr	r1, [pc, #160]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003428:	4b26      	ldr	r3, [pc, #152]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800342a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800342e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	3b01      	subs	r3, #1
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	4922      	ldr	r1, [pc, #136]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01d      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003456:	d118      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003458:	4b1a      	ldr	r3, [pc, #104]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345e:	0e1b      	lsrs	r3, r3, #24
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	019b      	lsls	r3, r3, #6
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	3b01      	subs	r3, #1
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	431a      	orrs	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	4910      	ldr	r1, [pc, #64]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800348a:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003490:	f7fe fbf8 	bl	8001c84 <HAL_GetTick>
 8003494:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003498:	f7fe fbf4 	bl	8001c84 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e007      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034b6:	d1ef      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3730      	adds	r7, #48	@ 0x30
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	42470070 	.word	0x42470070

080034cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d0:	b0ae      	sub	sp, #184	@ 0xb8
 80034d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f2:	4bcb      	ldr	r3, [pc, #812]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	f200 8206 	bhi.w	800390c <HAL_RCC_GetSysClockFreq+0x440>
 8003500:	a201      	add	r2, pc, #4	@ (adr r2, 8003508 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003506:	bf00      	nop
 8003508:	0800353d 	.word	0x0800353d
 800350c:	0800390d 	.word	0x0800390d
 8003510:	0800390d 	.word	0x0800390d
 8003514:	0800390d 	.word	0x0800390d
 8003518:	08003545 	.word	0x08003545
 800351c:	0800390d 	.word	0x0800390d
 8003520:	0800390d 	.word	0x0800390d
 8003524:	0800390d 	.word	0x0800390d
 8003528:	0800354d 	.word	0x0800354d
 800352c:	0800390d 	.word	0x0800390d
 8003530:	0800390d 	.word	0x0800390d
 8003534:	0800390d 	.word	0x0800390d
 8003538:	0800373d 	.word	0x0800373d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800353c:	4bb9      	ldr	r3, [pc, #740]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 800353e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003542:	e1e7      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003544:	4bb8      	ldr	r3, [pc, #736]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003546:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800354a:	e1e3      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800354c:	4bb4      	ldr	r3, [pc, #720]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003554:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003558:	4bb1      	ldr	r3, [pc, #708]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d071      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003564:	4bae      	ldr	r3, [pc, #696]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	2200      	movs	r2, #0
 800356c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003570:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003574:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003586:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800358a:	4622      	mov	r2, r4
 800358c:	462b      	mov	r3, r5
 800358e:	f04f 0000 	mov.w	r0, #0
 8003592:	f04f 0100 	mov.w	r1, #0
 8003596:	0159      	lsls	r1, r3, #5
 8003598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800359c:	0150      	lsls	r0, r2, #5
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4621      	mov	r1, r4
 80035a4:	1a51      	subs	r1, r2, r1
 80035a6:	6439      	str	r1, [r7, #64]	@ 0x40
 80035a8:	4629      	mov	r1, r5
 80035aa:	eb63 0301 	sbc.w	r3, r3, r1
 80035ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80035bc:	4649      	mov	r1, r9
 80035be:	018b      	lsls	r3, r1, #6
 80035c0:	4641      	mov	r1, r8
 80035c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035c6:	4641      	mov	r1, r8
 80035c8:	018a      	lsls	r2, r1, #6
 80035ca:	4641      	mov	r1, r8
 80035cc:	1a51      	subs	r1, r2, r1
 80035ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035d0:	4649      	mov	r1, r9
 80035d2:	eb63 0301 	sbc.w	r3, r3, r1
 80035d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80035e4:	4649      	mov	r1, r9
 80035e6:	00cb      	lsls	r3, r1, #3
 80035e8:	4641      	mov	r1, r8
 80035ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ee:	4641      	mov	r1, r8
 80035f0:	00ca      	lsls	r2, r1, #3
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	4603      	mov	r3, r0
 80035f8:	4622      	mov	r2, r4
 80035fa:	189b      	adds	r3, r3, r2
 80035fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80035fe:	462b      	mov	r3, r5
 8003600:	460a      	mov	r2, r1
 8003602:	eb42 0303 	adc.w	r3, r2, r3
 8003606:	637b      	str	r3, [r7, #52]	@ 0x34
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003614:	4629      	mov	r1, r5
 8003616:	024b      	lsls	r3, r1, #9
 8003618:	4621      	mov	r1, r4
 800361a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800361e:	4621      	mov	r1, r4
 8003620:	024a      	lsls	r2, r1, #9
 8003622:	4610      	mov	r0, r2
 8003624:	4619      	mov	r1, r3
 8003626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003630:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003634:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003638:	f7fd f948 	bl	80008cc <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003646:	e067      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003648:	4b75      	ldr	r3, [pc, #468]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	2200      	movs	r2, #0
 8003650:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003654:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003658:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800365c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003660:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003662:	2300      	movs	r3, #0
 8003664:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003666:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800366a:	4622      	mov	r2, r4
 800366c:	462b      	mov	r3, r5
 800366e:	f04f 0000 	mov.w	r0, #0
 8003672:	f04f 0100 	mov.w	r1, #0
 8003676:	0159      	lsls	r1, r3, #5
 8003678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800367c:	0150      	lsls	r0, r2, #5
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4621      	mov	r1, r4
 8003684:	1a51      	subs	r1, r2, r1
 8003686:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003688:	4629      	mov	r1, r5
 800368a:	eb63 0301 	sbc.w	r3, r3, r1
 800368e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800369c:	4649      	mov	r1, r9
 800369e:	018b      	lsls	r3, r1, #6
 80036a0:	4641      	mov	r1, r8
 80036a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a6:	4641      	mov	r1, r8
 80036a8:	018a      	lsls	r2, r1, #6
 80036aa:	4641      	mov	r1, r8
 80036ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80036b0:	4649      	mov	r1, r9
 80036b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ca:	4692      	mov	sl, r2
 80036cc:	469b      	mov	fp, r3
 80036ce:	4623      	mov	r3, r4
 80036d0:	eb1a 0303 	adds.w	r3, sl, r3
 80036d4:	623b      	str	r3, [r7, #32]
 80036d6:	462b      	mov	r3, r5
 80036d8:	eb4b 0303 	adc.w	r3, fp, r3
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036ea:	4629      	mov	r1, r5
 80036ec:	028b      	lsls	r3, r1, #10
 80036ee:	4621      	mov	r1, r4
 80036f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f4:	4621      	mov	r1, r4
 80036f6:	028a      	lsls	r2, r1, #10
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003700:	2200      	movs	r2, #0
 8003702:	673b      	str	r3, [r7, #112]	@ 0x70
 8003704:	677a      	str	r2, [r7, #116]	@ 0x74
 8003706:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800370a:	f7fd f8df 	bl	80008cc <__aeabi_uldivmod>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4613      	mov	r3, r2
 8003714:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003718:	4b41      	ldr	r3, [pc, #260]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	3301      	adds	r3, #1
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800372a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800372e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800373a:	e0eb      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800373c:	4b38      	ldr	r3, [pc, #224]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003744:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003748:	4b35      	ldr	r3, [pc, #212]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d06b      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003754:	4b32      	ldr	r3, [pc, #200]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	2200      	movs	r2, #0
 800375c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800375e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003760:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003766:	663b      	str	r3, [r7, #96]	@ 0x60
 8003768:	2300      	movs	r3, #0
 800376a:	667b      	str	r3, [r7, #100]	@ 0x64
 800376c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003770:	4622      	mov	r2, r4
 8003772:	462b      	mov	r3, r5
 8003774:	f04f 0000 	mov.w	r0, #0
 8003778:	f04f 0100 	mov.w	r1, #0
 800377c:	0159      	lsls	r1, r3, #5
 800377e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003782:	0150      	lsls	r0, r2, #5
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4621      	mov	r1, r4
 800378a:	1a51      	subs	r1, r2, r1
 800378c:	61b9      	str	r1, [r7, #24]
 800378e:	4629      	mov	r1, r5
 8003790:	eb63 0301 	sbc.w	r3, r3, r1
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037a2:	4659      	mov	r1, fp
 80037a4:	018b      	lsls	r3, r1, #6
 80037a6:	4651      	mov	r1, sl
 80037a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ac:	4651      	mov	r1, sl
 80037ae:	018a      	lsls	r2, r1, #6
 80037b0:	4651      	mov	r1, sl
 80037b2:	ebb2 0801 	subs.w	r8, r2, r1
 80037b6:	4659      	mov	r1, fp
 80037b8:	eb63 0901 	sbc.w	r9, r3, r1
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037d0:	4690      	mov	r8, r2
 80037d2:	4699      	mov	r9, r3
 80037d4:	4623      	mov	r3, r4
 80037d6:	eb18 0303 	adds.w	r3, r8, r3
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	462b      	mov	r3, r5
 80037de:	eb49 0303 	adc.w	r3, r9, r3
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80037f0:	4629      	mov	r1, r5
 80037f2:	024b      	lsls	r3, r1, #9
 80037f4:	4621      	mov	r1, r4
 80037f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037fa:	4621      	mov	r1, r4
 80037fc:	024a      	lsls	r2, r1, #9
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003806:	2200      	movs	r2, #0
 8003808:	65bb      	str	r3, [r7, #88]	@ 0x58
 800380a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800380c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003810:	f7fd f85c 	bl	80008cc <__aeabi_uldivmod>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4613      	mov	r3, r2
 800381a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800381e:	e065      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x420>
 8003820:	40023800 	.word	0x40023800
 8003824:	00f42400 	.word	0x00f42400
 8003828:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382c:	4b3d      	ldr	r3, [pc, #244]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x458>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	099b      	lsrs	r3, r3, #6
 8003832:	2200      	movs	r2, #0
 8003834:	4618      	mov	r0, r3
 8003836:	4611      	mov	r1, r2
 8003838:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800383c:	653b      	str	r3, [r7, #80]	@ 0x50
 800383e:	2300      	movs	r3, #0
 8003840:	657b      	str	r3, [r7, #84]	@ 0x54
 8003842:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003846:	4642      	mov	r2, r8
 8003848:	464b      	mov	r3, r9
 800384a:	f04f 0000 	mov.w	r0, #0
 800384e:	f04f 0100 	mov.w	r1, #0
 8003852:	0159      	lsls	r1, r3, #5
 8003854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003858:	0150      	lsls	r0, r2, #5
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4641      	mov	r1, r8
 8003860:	1a51      	subs	r1, r2, r1
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	4649      	mov	r1, r9
 8003866:	eb63 0301 	sbc.w	r3, r3, r1
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003878:	4659      	mov	r1, fp
 800387a:	018b      	lsls	r3, r1, #6
 800387c:	4651      	mov	r1, sl
 800387e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003882:	4651      	mov	r1, sl
 8003884:	018a      	lsls	r2, r1, #6
 8003886:	4651      	mov	r1, sl
 8003888:	1a54      	subs	r4, r2, r1
 800388a:	4659      	mov	r1, fp
 800388c:	eb63 0501 	sbc.w	r5, r3, r1
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	00eb      	lsls	r3, r5, #3
 800389a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800389e:	00e2      	lsls	r2, r4, #3
 80038a0:	4614      	mov	r4, r2
 80038a2:	461d      	mov	r5, r3
 80038a4:	4643      	mov	r3, r8
 80038a6:	18e3      	adds	r3, r4, r3
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	464b      	mov	r3, r9
 80038ac:	eb45 0303 	adc.w	r3, r5, r3
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038be:	4629      	mov	r1, r5
 80038c0:	028b      	lsls	r3, r1, #10
 80038c2:	4621      	mov	r1, r4
 80038c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038c8:	4621      	mov	r1, r4
 80038ca:	028a      	lsls	r2, r1, #10
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038d4:	2200      	movs	r2, #0
 80038d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038d8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80038da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038de:	f7fc fff5 	bl	80008cc <__aeabi_uldivmod>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4613      	mov	r3, r2
 80038e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x458>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0f1b      	lsrs	r3, r3, #28
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80038fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800390a:	e003      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800390c:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x45c>)
 800390e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003912:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003914:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003918:	4618      	mov	r0, r3
 800391a:	37b8      	adds	r7, #184	@ 0xb8
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	00f42400 	.word	0x00f42400

0800392c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e28d      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8083 	beq.w	8003a52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800394c:	4b94      	ldr	r3, [pc, #592]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b04      	cmp	r3, #4
 8003956:	d019      	beq.n	800398c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003958:	4b91      	ldr	r3, [pc, #580]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003960:	2b08      	cmp	r3, #8
 8003962:	d106      	bne.n	8003972 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003964:	4b8e      	ldr	r3, [pc, #568]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800396c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003970:	d00c      	beq.n	800398c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003972:	4b8b      	ldr	r3, [pc, #556]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d112      	bne.n	80039a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4b88      	ldr	r3, [pc, #544]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003986:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800398a:	d10b      	bne.n	80039a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398c:	4b84      	ldr	r3, [pc, #528]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05b      	beq.n	8003a50 <HAL_RCC_OscConfig+0x124>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d157      	bne.n	8003a50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e25a      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ac:	d106      	bne.n	80039bc <HAL_RCC_OscConfig+0x90>
 80039ae:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a7b      	ldr	r2, [pc, #492]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e01d      	b.n	80039f8 <HAL_RCC_OscConfig+0xcc>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0xb4>
 80039c6:	4b76      	ldr	r3, [pc, #472]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a75      	ldr	r2, [pc, #468]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	4b73      	ldr	r3, [pc, #460]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a72      	ldr	r2, [pc, #456]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_OscConfig+0xcc>
 80039e0:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a6e      	ldr	r2, [pc, #440]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b6c      	ldr	r3, [pc, #432]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a6b      	ldr	r2, [pc, #428]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d013      	beq.n	8003a28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fe f940 	bl	8001c84 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fe f93c 	bl	8001c84 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	@ 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e21f      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	4b61      	ldr	r3, [pc, #388]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0xdc>
 8003a26:	e014      	b.n	8003a52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fe f92c 	bl	8001c84 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fe f928 	bl	8001c84 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	@ 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e20b      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	4b57      	ldr	r3, [pc, #348]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x104>
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d06f      	beq.n	8003b3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a5e:	4b50      	ldr	r3, [pc, #320]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d017      	beq.n	8003a9a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d105      	bne.n	8003a82 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b47      	ldr	r3, [pc, #284]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a8a:	2b0c      	cmp	r3, #12
 8003a8c:	d11c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8e:	4b44      	ldr	r3, [pc, #272]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d116      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9a:	4b41      	ldr	r3, [pc, #260]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x186>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e1d3      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4937      	ldr	r1, [pc, #220]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac6:	e03a      	b.n	8003b3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad0:	4b34      	ldr	r3, [pc, #208]	@ (8003ba4 <HAL_RCC_OscConfig+0x278>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fe f8d5 	bl	8001c84 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fe f8d1 	bl	8001c84 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e1b4      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b28      	ldr	r3, [pc, #160]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4925      	ldr	r1, [pc, #148]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
 8003b10:	e015      	b.n	8003b3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b12:	4b24      	ldr	r3, [pc, #144]	@ (8003ba4 <HAL_RCC_OscConfig+0x278>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fe f8b4 	bl	8001c84 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b20:	f7fe f8b0 	bl	8001c84 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e193      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d036      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b52:	4b15      	ldr	r3, [pc, #84]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b58:	f7fe f894 	bl	8001c84 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fe f890 	bl	8001c84 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e173      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x234>
 8003b7e:	e01b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b80:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b86:	f7fe f87d 	bl	8001c84 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8c:	e00e      	b.n	8003bac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8e:	f7fe f879 	bl	8001c84 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d907      	bls.n	8003bac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e15c      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	42470000 	.word	0x42470000
 8003ba8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	4b8a      	ldr	r3, [pc, #552]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ea      	bne.n	8003b8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8097 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bca:	4b83      	ldr	r3, [pc, #524]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	4b7f      	ldr	r3, [pc, #508]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	4a7e      	ldr	r2, [pc, #504]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003be6:	4b7c      	ldr	r3, [pc, #496]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	4b79      	ldr	r3, [pc, #484]	@ (8003ddc <HAL_RCC_OscConfig+0x4b0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d118      	bne.n	8003c34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c02:	4b76      	ldr	r3, [pc, #472]	@ (8003ddc <HAL_RCC_OscConfig+0x4b0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a75      	ldr	r2, [pc, #468]	@ (8003ddc <HAL_RCC_OscConfig+0x4b0>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0e:	f7fe f839 	bl	8001c84 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fe f835 	bl	8001c84 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e118      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b6c      	ldr	r3, [pc, #432]	@ (8003ddc <HAL_RCC_OscConfig+0x4b0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x31e>
 8003c3c:	4b66      	ldr	r3, [pc, #408]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c40:	4a65      	ldr	r2, [pc, #404]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c48:	e01c      	b.n	8003c84 <HAL_RCC_OscConfig+0x358>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x340>
 8003c52:	4b61      	ldr	r3, [pc, #388]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	4a60      	ldr	r2, [pc, #384]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	4a5d      	ldr	r2, [pc, #372]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0x358>
 8003c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c70:	4a59      	ldr	r2, [pc, #356]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c78:	4b57      	ldr	r3, [pc, #348]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7c:	4a56      	ldr	r2, [pc, #344]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c7e:	f023 0304 	bic.w	r3, r3, #4
 8003c82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fd fffa 	bl	8001c84 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fd fff6 	bl	8001c84 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e0d7      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ee      	beq.n	8003c94 <HAL_RCC_OscConfig+0x368>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fd ffe4 	bl	8001c84 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fd ffe0 	bl	8001c84 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0c1      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd6:	4b40      	ldr	r3, [pc, #256]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ee      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cec:	4a3a      	ldr	r2, [pc, #232]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80ad 	beq.w	8003e58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cfe:	4b36      	ldr	r3, [pc, #216]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d060      	beq.n	8003dcc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d145      	bne.n	8003d9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d12:	4b33      	ldr	r3, [pc, #204]	@ (8003de0 <HAL_RCC_OscConfig+0x4b4>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fd ffb4 	bl	8001c84 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fd ffb0 	bl	8001c84 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e093      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	4b29      	ldr	r3, [pc, #164]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d68:	071b      	lsls	r3, r3, #28
 8003d6a:	491b      	ldr	r1, [pc, #108]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d70:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <HAL_RCC_OscConfig+0x4b4>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fd ff85 	bl	8001c84 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fd ff81 	bl	8001c84 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e064      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d90:	4b11      	ldr	r3, [pc, #68]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x452>
 8003d9c:	e05c      	b.n	8003e58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b10      	ldr	r3, [pc, #64]	@ (8003de0 <HAL_RCC_OscConfig+0x4b4>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd ff6e 	bl	8001c84 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd ff6a 	bl	8001c84 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e04d      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x480>
 8003dca:	e045      	b.n	8003e58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e040      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e64 <HAL_RCC_OscConfig+0x538>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d030      	beq.n	8003e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d129      	bne.n	8003e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d122      	bne.n	8003e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e14:	4013      	ands	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d119      	bne.n	8003e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d10f      	bne.n	8003e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d107      	bne.n	8003e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800

08003e68 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e022      	b.n	8003ec0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d105      	bne.n	8003e92 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7fd fb9d 	bl	80015cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2203      	movs	r2, #3
 8003e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f814 	bl	8003ec8 <HAL_SD_InitCard>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e00a      	b.n	8003ec0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b08e      	sub	sp, #56	@ 0x38
 8003ecc:	af04      	add	r7, sp, #16
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003ee4:	2376      	movs	r3, #118	@ 0x76
 8003ee6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681d      	ldr	r5, [r3, #0]
 8003eec:	466c      	mov	r4, sp
 8003eee:	f107 0314 	add.w	r3, r7, #20
 8003ef2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ef6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003efa:	f107 0308 	add.w	r3, r7, #8
 8003efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f00:	4628      	mov	r0, r5
 8003f02:	f002 f8e5 	bl	80060d0 <SDIO_Init>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e04f      	b.n	8003fb8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003f18:	4b29      	ldr	r3, [pc, #164]	@ (8003fc0 <HAL_SD_InitCard+0xf8>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f002 f91d 	bl	8006162 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003f28:	4b25      	ldr	r3, [pc, #148]	@ (8003fc0 <HAL_SD_InitCard+0xf8>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003f2e:	2002      	movs	r0, #2
 8003f30:	f7fd feb4 	bl	8001c9c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 ff55 	bl	8004de4 <SD_PowerON>
 8003f3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e02e      	b.n	8003fb8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fe74 	bl	8004c48 <SD_InitCard>
 8003f60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00b      	beq.n	8003f80 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e01b      	b.n	8003fb8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f002 f97c 	bl	8006286 <SDMMC_CmdBlockLength>
 8003f8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00f      	beq.n	8003fb6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc4 <HAL_SD_InitCard+0xfc>)
 8003f9c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3728      	adds	r7, #40	@ 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc0:	422580a0 	.word	0x422580a0
 8003fc4:	004005ff 	.word	0x004005ff

08003fc8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08c      	sub	sp, #48	@ 0x30
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d107      	bne.n	8003ff0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0be      	b.n	800416e <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	f040 80b7 	bne.w	800416c <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004004:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	441a      	add	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400e:	429a      	cmp	r2, r3
 8004010:	d907      	bls.n	8004022 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004016:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e0a5      	b.n	800416e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2203      	movs	r2, #3
 8004026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2200      	movs	r2, #0
 8004030:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8004040:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	4a4c      	ldr	r2, [pc, #304]	@ (8004178 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8004048:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	4a4b      	ldr	r2, [pc, #300]	@ (800417c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004050:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	2200      	movs	r2, #0
 8004058:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3380      	adds	r3, #128	@ 0x80
 8004088:	4619      	mov	r1, r3
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	025b      	lsls	r3, r3, #9
 8004090:	089b      	lsrs	r3, r3, #2
 8004092:	f7fd ffe7 	bl	8002064 <HAL_DMA_Start_IT>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d017      	beq.n	80040cc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80040aa:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a33      	ldr	r2, [pc, #204]	@ (8004180 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80040b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e050      	b.n	800416e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80040cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004184 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d002      	beq.n	80040e0 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	025b      	lsls	r3, r3, #9
 80040de:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040e4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	025b      	lsls	r3, r3, #9
 80040ea:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80040ec:	2390      	movs	r3, #144	@ 0x90
 80040ee:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80040f0:	2302      	movs	r3, #2
 80040f2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80040f8:	2301      	movs	r3, #1
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f107 0210 	add.w	r2, r7, #16
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f002 f891 	bl	800622e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d90a      	bls.n	8004128 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2282      	movs	r2, #130	@ 0x82
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800411e:	4618      	mov	r0, r3
 8004120:	f002 f8f5 	bl	800630e <SDMMC_CmdReadMultiBlock>
 8004124:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004126:	e009      	b.n	800413c <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2281      	movs	r2, #129	@ 0x81
 800412c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004134:	4618      	mov	r0, r3
 8004136:	f002 f8c8 	bl	80062ca <SDMMC_CmdReadSingleBlock>
 800413a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800413c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d012      	beq.n	8004168 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a0e      	ldr	r2, [pc, #56]	@ (8004180 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004148:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800414e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e002      	b.n	800416e <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800416c:	2302      	movs	r3, #2
  }
}
 800416e:	4618      	mov	r0, r3
 8004170:	3730      	adds	r7, #48	@ 0x30
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	08004a57 	.word	0x08004a57
 800417c:	08004ac9 	.word	0x08004ac9
 8004180:	004005ff 	.word	0x004005ff
 8004184:	4225858c 	.word	0x4225858c

08004188 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08c      	sub	sp, #48	@ 0x30
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d107      	bne.n	80041b0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0c1      	b.n	8004334 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	f040 80ba 	bne.w	8004332 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80041c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	441a      	add	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d907      	bls.n	80041e2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e0a8      	b.n	8004334 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2203      	movs	r2, #3
 80041e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 021a 	orr.w	r2, r2, #26
 8004200:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004206:	4a4d      	ldr	r2, [pc, #308]	@ (800433c <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8004208:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420e:	4a4c      	ldr	r2, [pc, #304]	@ (8004340 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8004210:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004216:	2200      	movs	r2, #0
 8004218:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	2b01      	cmp	r3, #1
 8004220:	d002      	beq.n	8004228 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004224:	025b      	lsls	r3, r3, #9
 8004226:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d90a      	bls.n	8004244 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	22a0      	movs	r2, #160	@ 0xa0
 8004232:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800423a:	4618      	mov	r0, r3
 800423c:	f002 f8ab 	bl	8006396 <SDMMC_CmdWriteMultiBlock>
 8004240:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004242:	e009      	b.n	8004258 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2290      	movs	r2, #144	@ 0x90
 8004248:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004250:	4618      	mov	r0, r3
 8004252:	f002 f87e 	bl	8006352 <SDMMC_CmdWriteSingleBlock>
 8004256:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d012      	beq.n	8004284 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a38      	ldr	r2, [pc, #224]	@ (8004344 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004264:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800426a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800426c:	431a      	orrs	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e057      	b.n	8004334 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004284:	4b30      	ldr	r3, [pc, #192]	@ (8004348 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428e:	2240      	movs	r2, #64	@ 0x40
 8004290:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3380      	adds	r3, #128	@ 0x80
 80042ba:	461a      	mov	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	025b      	lsls	r3, r3, #9
 80042c0:	089b      	lsrs	r3, r3, #2
 80042c2:	f7fd fecf 	bl	8002064 <HAL_DMA_Start_IT>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01a      	beq.n	8004302 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 021a 	bic.w	r2, r2, #26
 80042da:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a18      	ldr	r2, [pc, #96]	@ (8004344 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80042e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e018      	b.n	8004334 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004302:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004306:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	025b      	lsls	r3, r3, #9
 800430c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800430e:	2390      	movs	r3, #144	@ 0x90
 8004310:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004316:	2300      	movs	r3, #0
 8004318:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800431a:	2301      	movs	r3, #1
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f107 0210 	add.w	r2, r7, #16
 8004326:	4611      	mov	r1, r2
 8004328:	4618      	mov	r0, r3
 800432a:	f001 ff80 	bl	800622e <SDIO_ConfigData>

      return HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	e000      	b.n	8004334 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	3730      	adds	r7, #48	@ 0x30
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	08004a2d 	.word	0x08004a2d
 8004340:	08004ac9 	.word	0x08004ac9
 8004344:	004005ff 	.word	0x004005ff
 8004348:	4225858c 	.word	0x4225858c

0800434c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004358:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_SD_IRQHandler+0x2e>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fdec 	bl	8004f50 <SD_Read_IT>
 8004378:	e155      	b.n	8004626 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 808f 	beq.w	80044a8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004392:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 80043a2:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80043a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0201 	bic.w	r2, r2, #1
 80043b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d039      	beq.n	8004436 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <HAL_SD_IRQHandler+0x8a>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d011      	beq.n	80043fa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 fffe 	bl	80063dc <SDMMC_CmdStopTransfer>
 80043e0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f91f 	bl	8004638 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004402:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <HAL_SD_IRQHandler+0xda>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f002 ff16 	bl	8007258 <HAL_SD_RxCpltCallback>
 800442c:	e0fb      	b.n	8004626 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f002 ff08 	bl	8007244 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004434:	e0f7      	b.n	8004626 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80f2 	beq.w	8004626 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d011      	beq.n	8004470 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f001 ffc3 	bl	80063dc <SDMMC_CmdStopTransfer>
 8004456:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d008      	beq.n	8004470 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f8e4 	bl	8004638 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 80d5 	bne.w	8004626 <HAL_SD_IRQHandler+0x2da>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	f040 80cf 	bne.w	8004626 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0208 	bic.w	r2, r2, #8
 8004496:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f002 fecf 	bl	8007244 <HAL_SD_TxCpltCallback>
}
 80044a6:	e0be      	b.n	8004626 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <HAL_SD_IRQHandler+0x17c>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fd96 	bl	8004ff2 <SD_Write_IT>
 80044c6:	e0ae      	b.n	8004626 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ce:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80a7 	beq.w	8004626 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ea:	f043 0202 	orr.w	r2, r3, #2
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	f043 0208 	orr.w	r2, r3, #8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	f043 0220 	orr.w	r2, r3, #32
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	f043 0210 	orr.w	r2, r3, #16
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004548:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004558:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f001 ff3c 	bl	80063dc <SDMMC_CmdStopTransfer>
 8004564:	4602      	mov	r2, r0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f855 	bl	8004638 <HAL_SD_ErrorCallback>
}
 800458e:	e04a      	b.n	8004626 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004596:	2b00      	cmp	r3, #0
 8004598:	d045      	beq.n	8004626 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <HAL_SD_IRQHandler+0x262>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d011      	beq.n	80045d2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004630 <HAL_SD_IRQHandler+0x2e4>)
 80045b4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fdaa 	bl	8002114 <HAL_DMA_Abort_IT>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d02f      	beq.n	8004626 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 face 	bl	8004b6c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80045d0:	e029      	b.n	8004626 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <HAL_SD_IRQHandler+0x29a>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d011      	beq.n	800460a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	4a12      	ldr	r2, [pc, #72]	@ (8004634 <HAL_SD_IRQHandler+0x2e8>)
 80045ec:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fd fd8e 	bl	8002114 <HAL_DMA_Abort_IT>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d013      	beq.n	8004626 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fae9 	bl	8004bda <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004608:	e00d      	b.n	8004626 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f002 fe06 	bl	8007230 <HAL_SD_AbortCallback>
}
 8004624:	e7ff      	b.n	8004626 <HAL_SD_IRQHandler+0x2da>
 8004626:	bf00      	nop
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	08004b6d 	.word	0x08004b6d
 8004634:	08004bdb 	.word	0x08004bdb

08004638 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800465a:	0f9b      	lsrs	r3, r3, #30
 800465c:	b2da      	uxtb	r2, r3
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004666:	0e9b      	lsrs	r3, r3, #26
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	b2da      	uxtb	r2, r3
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004678:	0e1b      	lsrs	r3, r3, #24
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	b2da      	uxtb	r2, r3
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800468a:	0c1b      	lsrs	r3, r3, #16
 800468c:	b2da      	uxtb	r2, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004696:	0a1b      	lsrs	r3, r3, #8
 8004698:	b2da      	uxtb	r2, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ac:	0d1b      	lsrs	r3, r3, #20
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ca:	0bdb      	lsrs	r3, r3, #15
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046dc:	0b9b      	lsrs	r3, r3, #14
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ee:	0b5b      	lsrs	r3, r3, #13
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004700:	0b1b      	lsrs	r3, r3, #12
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	b2da      	uxtb	r2, r3
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2200      	movs	r2, #0
 8004712:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004718:	2b00      	cmp	r3, #0
 800471a:	d163      	bne.n	80047e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004720:	009a      	lsls	r2, r3, #2
 8004722:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004726:	4013      	ands	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800472c:	0f92      	lsrs	r2, r2, #30
 800472e:	431a      	orrs	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004738:	0edb      	lsrs	r3, r3, #27
 800473a:	b2db      	uxtb	r3, r3
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	b2da      	uxtb	r2, r3
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800474a:	0e1b      	lsrs	r3, r3, #24
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	b2da      	uxtb	r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800475c:	0d5b      	lsrs	r3, r3, #21
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	b2da      	uxtb	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800476e:	0c9b      	lsrs	r3, r3, #18
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	b2da      	uxtb	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004780:	0bdb      	lsrs	r3, r3, #15
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	b2da      	uxtb	r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	7e1b      	ldrb	r3, [r3, #24]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	3302      	adds	r3, #2
 80047a4:	2201      	movs	r2, #1
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80047ae:	fb03 f202 	mul.w	r2, r3, r2
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	7a1b      	ldrb	r3, [r3, #8]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	2201      	movs	r2, #1
 80047c2:	409a      	lsls	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80047d0:	0a52      	lsrs	r2, r2, #9
 80047d2:	fb03 f202 	mul.w	r2, r3, r2
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80047e2:	e031      	b.n	8004848 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d11d      	bne.n	8004828 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047fa:	0c1b      	lsrs	r3, r3, #16
 80047fc:	431a      	orrs	r2, r3
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	3301      	adds	r3, #1
 8004808:	029a      	lsls	r2, r3, #10
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800481c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	661a      	str	r2, [r3, #96]	@ 0x60
 8004826:	e00f      	b.n	8004848 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a58      	ldr	r2, [pc, #352]	@ (8004990 <HAL_SD_GetCardCSD+0x344>)
 800482e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004834:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e09d      	b.n	8004984 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800484c:	0b9b      	lsrs	r3, r3, #14
 800484e:	b2db      	uxtb	r3, r3
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	b2da      	uxtb	r2, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800485e:	09db      	lsrs	r3, r3, #7
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004866:	b2da      	uxtb	r2, r3
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004876:	b2da      	uxtb	r2, r3
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004880:	0fdb      	lsrs	r3, r3, #31
 8004882:	b2da      	uxtb	r2, r3
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488c:	0f5b      	lsrs	r3, r3, #29
 800488e:	b2db      	uxtb	r3, r3
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	b2da      	uxtb	r2, r3
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489e:	0e9b      	lsrs	r3, r3, #26
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b0:	0d9b      	lsrs	r3, r3, #22
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c2:	0d5b      	lsrs	r3, r3, #21
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f2:	0bdb      	lsrs	r3, r3, #15
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	0b9b      	lsrs	r3, r3, #14
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	b2da      	uxtb	r2, r3
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491a:	0b5b      	lsrs	r3, r3, #13
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	b2da      	uxtb	r2, r3
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492e:	0b1b      	lsrs	r3, r3, #12
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	b2da      	uxtb	r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004942:	0a9b      	lsrs	r3, r3, #10
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	b2da      	uxtb	r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	b2da      	uxtb	r2, r3
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004972:	b2da      	uxtb	r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	004005ff 	.word	0x004005ff

08004994 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80049f8:	f107 030c 	add.w	r3, r7, #12
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fa7e 	bl	8004f00 <SD_SendStatus>
 8004a04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	0a5b      	lsrs	r3, r3, #9
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004a22:	693b      	ldr	r3, [r7, #16]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a48:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a68:	2b82      	cmp	r3, #130	@ 0x82
 8004a6a:	d111      	bne.n	8004a90 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 fcb3 	bl	80063dc <SDMMC_CmdStopTransfer>
 8004a76:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff fdd4 	bl	8004638 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0208 	bic.w	r2, r2, #8
 8004a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004aa8:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f002 fbcd 	bl	8007258 <HAL_SD_RxCpltCallback>
#endif
}
 8004abe:	bf00      	nop
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fd fcc8 	bl	800246c <HAL_DMA_GetError>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d03e      	beq.n	8004b60 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d002      	beq.n	8004afe <SD_DMAError+0x36>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d12d      	bne.n	8004b5a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a19      	ldr	r2, [pc, #100]	@ (8004b68 <SD_DMAError+0xa0>)
 8004b04:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004b14:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004b22:	6978      	ldr	r0, [r7, #20]
 8004b24:	f7ff ff62 	bl	80049ec <HAL_SD_GetCardState>
 8004b28:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b06      	cmp	r3, #6
 8004b2e:	d002      	beq.n	8004b36 <SD_DMAError+0x6e>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b05      	cmp	r3, #5
 8004b34:	d10a      	bne.n	8004b4c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 fc4e 	bl	80063dc <SDMMC_CmdStopTransfer>
 8004b40:	4602      	mov	r2, r0
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b46:	431a      	orrs	r2, r3
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2200      	movs	r2, #0
 8004b58:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004b5a:	6978      	ldr	r0, [r7, #20]
 8004b5c:	f7ff fd6c 	bl	8004638 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004b60:	bf00      	nop
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	004005ff 	.word	0x004005ff

08004b6c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004b82:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff ff31 	bl	80049ec <HAL_SD_GetCardState>
 8004b8a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b06      	cmp	r3, #6
 8004b9e:	d002      	beq.n	8004ba6 <SD_DMATxAbort+0x3a>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d10a      	bne.n	8004bbc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 fc16 	bl	80063dc <SDMMC_CmdStopTransfer>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f002 fb33 	bl	8007230 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004bca:	e002      	b.n	8004bd2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7ff fd33 	bl	8004638 <HAL_SD_ErrorCallback>
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004bf0:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff fefa 	bl	80049ec <HAL_SD_GetCardState>
 8004bf8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b06      	cmp	r3, #6
 8004c0c:	d002      	beq.n	8004c14 <SD_DMARxAbort+0x3a>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b05      	cmp	r3, #5
 8004c12:	d10a      	bne.n	8004c2a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 fbdf 	bl	80063dc <SDMMC_CmdStopTransfer>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	431a      	orrs	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d103      	bne.n	8004c3a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f002 fafc 	bl	8007230 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004c38:	e002      	b.n	8004c40 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7ff fcfc 	bl	8004638 <HAL_SD_ErrorCallback>
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004c48:	b5b0      	push	{r4, r5, r7, lr}
 8004c4a:	b094      	sub	sp, #80	@ 0x50
 8004c4c:	af04      	add	r7, sp, #16
 8004c4e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004c50:	2301      	movs	r3, #1
 8004c52:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 fa90 	bl	800617e <SDIO_GetPowerState>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d102      	bne.n	8004c6a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c64:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004c68:	e0b8      	b.n	8004ddc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d02f      	beq.n	8004cd2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f001 fc77 	bl	800656a <SDMMC_CmdSendCID>
 8004c7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <SD_InitCard+0x40>
    {
      return errorstate;
 8004c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c86:	e0a9      	b.n	8004ddc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 faba 	bl	8006208 <SDIO_GetResponse>
 8004c94:	4602      	mov	r2, r0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2104      	movs	r1, #4
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f001 fab1 	bl	8006208 <SDIO_GetResponse>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2108      	movs	r1, #8
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f001 faa8 	bl	8006208 <SDIO_GetResponse>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	210c      	movs	r1, #12
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 fa9f 	bl	8006208 <SDIO_GetResponse>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d00d      	beq.n	8004cf6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f107 020e 	add.w	r2, r7, #14
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f001 fc7d 	bl	80065e4 <SDMMC_CmdSetRelAdd>
 8004cea:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <SD_InitCard+0xae>
    {
      return errorstate;
 8004cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf4:	e072      	b.n	8004ddc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d036      	beq.n	8004d6c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004cfe:	89fb      	ldrh	r3, [r7, #14]
 8004d00:	461a      	mov	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d0e:	041b      	lsls	r3, r3, #16
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f001 fc47 	bl	80065a6 <SDMMC_CmdSendCSD>
 8004d18:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d22:	e05b      	b.n	8004ddc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 fa6c 	bl	8006208 <SDIO_GetResponse>
 8004d30:	4602      	mov	r2, r0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2104      	movs	r1, #4
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 fa63 	bl	8006208 <SDIO_GetResponse>
 8004d42:	4602      	mov	r2, r0
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2108      	movs	r1, #8
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 fa5a 	bl	8006208 <SDIO_GetResponse>
 8004d54:	4602      	mov	r2, r0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	210c      	movs	r1, #12
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 fa51 	bl	8006208 <SDIO_GetResponse>
 8004d66:	4602      	mov	r2, r0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2104      	movs	r1, #4
 8004d72:	4618      	mov	r0, r3
 8004d74:	f001 fa48 	bl	8006208 <SDIO_GetResponse>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	0d1a      	lsrs	r2, r3, #20
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004d80:	f107 0310 	add.w	r3, r7, #16
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fc60 	bl	800464c <HAL_SD_GetCardCSD>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d96:	e021      	b.n	8004ddc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6819      	ldr	r1, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	2200      	movs	r2, #0
 8004da4:	461c      	mov	r4, r3
 8004da6:	4615      	mov	r5, r2
 8004da8:	4622      	mov	r2, r4
 8004daa:	462b      	mov	r3, r5
 8004dac:	4608      	mov	r0, r1
 8004dae:	f001 fb37 	bl	8006420 <SDMMC_CmdSelDesel>
 8004db2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <SD_InitCard+0x176>
  {
    return errorstate;
 8004dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dbc:	e00e      	b.n	8004ddc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681d      	ldr	r5, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	466c      	mov	r4, sp
 8004dc6:	f103 0210 	add.w	r2, r3, #16
 8004dca:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f001 f97b 	bl	80060d0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3740      	adds	r7, #64	@ 0x40
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bdb0      	pop	{r4, r5, r7, pc}

08004de4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	2300      	movs	r3, #0
 8004df6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 fb32 	bl	8006466 <SDMMC_CmdGoIdleState>
 8004e02:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <SD_PowerON+0x2a>
  {
    return errorstate;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	e072      	b.n	8004ef4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 fb45 	bl	80064a2 <SDMMC_CmdOperCond>
 8004e18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00d      	beq.n	8004e3c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 fb1b 	bl	8006466 <SDMMC_CmdGoIdleState>
 8004e30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d004      	beq.n	8004e42 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	e05b      	b.n	8004ef4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d137      	bne.n	8004eba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 fb45 	bl	80064e0 <SDMMC_CmdAppCommand>
 8004e56:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d02d      	beq.n	8004eba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e62:	e047      	b.n	8004ef4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f001 fb38 	bl	80064e0 <SDMMC_CmdAppCommand>
 8004e70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <SD_PowerON+0x98>
    {
      return errorstate;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	e03b      	b.n	8004ef4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	491e      	ldr	r1, [pc, #120]	@ (8004efc <SD_PowerON+0x118>)
 8004e82:	4618      	mov	r0, r3
 8004e84:	f001 fb4e 	bl	8006524 <SDMMC_CmdAppOperCommand>
 8004e88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e90:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e94:	e02e      	b.n	8004ef4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 f9b3 	bl	8006208 <SDIO_GetResponse>
 8004ea2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	0fdb      	lsrs	r3, r3, #31
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <SD_PowerON+0xcc>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <SD_PowerON+0xce>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	613b      	str	r3, [r7, #16]

    count++;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d802      	bhi.n	8004eca <SD_PowerON+0xe6>
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0cc      	beq.n	8004e64 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d902      	bls.n	8004eda <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004ed4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ed8:	e00c      	b.n	8004ef4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	645a      	str	r2, [r3, #68]	@ 0x44
 8004eea:	e002      	b.n	8004ef2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	c1100000 	.word	0xc1100000

08004f00 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d102      	bne.n	8004f16 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004f10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f14:	e018      	b.n	8004f48 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1e:	041b      	lsls	r3, r3, #16
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f001 fb7f 	bl	8006626 <SDMMC_CmdSendStatus>
 8004f28:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	e009      	b.n	8004f48 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f001 f964 	bl	8006208 <SDIO_GetResponse>
 8004f40:	4602      	mov	r2, r0
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f62:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d03f      	beq.n	8004fea <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	e033      	b.n	8004fd8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 f8d6 	bl	8006126 <SDIO_ReadFIFO>
 8004f7a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	0e1b      	lsrs	r3, r3, #24
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b07      	cmp	r3, #7
 8004fdc:	d9c8      	bls.n	8004f70 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004fea:	bf00      	nop
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d043      	beq.n	8005094 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e037      	b.n	8005082 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3301      	adds	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3b01      	subs	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	021a      	lsls	r2, r3, #8
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4313      	orrs	r3, r2
 800502e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3b01      	subs	r3, #1
 800503a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	041a      	lsls	r2, r3, #16
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4313      	orrs	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3301      	adds	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	3b01      	subs	r3, #1
 8005052:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	061a      	lsls	r2, r3, #24
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4313      	orrs	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3301      	adds	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3b01      	subs	r3, #1
 800506a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f107 0208 	add.w	r2, r7, #8
 8005074:	4611      	mov	r1, r2
 8005076:	4618      	mov	r0, r3
 8005078:	f001 f862 	bl	8006140 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3301      	adds	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b07      	cmp	r3, #7
 8005086:	d9c4      	bls.n	8005012 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005094:	bf00      	nop
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e041      	b.n	8005132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fc fba0 	bl	8001808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f000 fa16 	bl	800550c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d020      	beq.n	800519e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01b      	beq.n	800519e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f06f 0202 	mvn.w	r2, #2
 800516e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f003 0303 	and.w	r3, r3, #3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f9a3 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 800518a:	e005      	b.n	8005198 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f995 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9a6 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d020      	beq.n	80051ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01b      	beq.n	80051ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f06f 0204 	mvn.w	r2, #4
 80051ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f97d 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 80051d6:	e005      	b.n	80051e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f96f 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f980 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d020      	beq.n	8005236 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01b      	beq.n	8005236 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f06f 0208 	mvn.w	r2, #8
 8005206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2204      	movs	r2, #4
 800520c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f957 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 8005222:	e005      	b.n	8005230 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f949 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f95a 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b00      	cmp	r3, #0
 800523e:	d020      	beq.n	8005282 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01b      	beq.n	8005282 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f06f 0210 	mvn.w	r2, #16
 8005252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2208      	movs	r2, #8
 8005258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f931 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 800526e:	e005      	b.n	800527c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f923 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f934 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f06f 0201 	mvn.w	r2, #1
 800529e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f901 	bl	80054a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00c      	beq.n	80052ca <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 faed 	bl	80058a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00c      	beq.n	80052ee <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f905 	bl	80054f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00c      	beq.n	8005312 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0220 	mvn.w	r2, #32
 800530a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fabf 	bl	8005890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <HAL_TIM_ConfigClockSource+0x1c>
 8005332:	2302      	movs	r3, #2
 8005334:	e0b4      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x186>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005354:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800535c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800536e:	d03e      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0xd4>
 8005370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005374:	f200 8087 	bhi.w	8005486 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800537c:	f000 8086 	beq.w	800548c <HAL_TIM_ConfigClockSource+0x172>
 8005380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005384:	d87f      	bhi.n	8005486 <HAL_TIM_ConfigClockSource+0x16c>
 8005386:	2b70      	cmp	r3, #112	@ 0x70
 8005388:	d01a      	beq.n	80053c0 <HAL_TIM_ConfigClockSource+0xa6>
 800538a:	2b70      	cmp	r3, #112	@ 0x70
 800538c:	d87b      	bhi.n	8005486 <HAL_TIM_ConfigClockSource+0x16c>
 800538e:	2b60      	cmp	r3, #96	@ 0x60
 8005390:	d050      	beq.n	8005434 <HAL_TIM_ConfigClockSource+0x11a>
 8005392:	2b60      	cmp	r3, #96	@ 0x60
 8005394:	d877      	bhi.n	8005486 <HAL_TIM_ConfigClockSource+0x16c>
 8005396:	2b50      	cmp	r3, #80	@ 0x50
 8005398:	d03c      	beq.n	8005414 <HAL_TIM_ConfigClockSource+0xfa>
 800539a:	2b50      	cmp	r3, #80	@ 0x50
 800539c:	d873      	bhi.n	8005486 <HAL_TIM_ConfigClockSource+0x16c>
 800539e:	2b40      	cmp	r3, #64	@ 0x40
 80053a0:	d058      	beq.n	8005454 <HAL_TIM_ConfigClockSource+0x13a>
 80053a2:	2b40      	cmp	r3, #64	@ 0x40
 80053a4:	d86f      	bhi.n	8005486 <HAL_TIM_ConfigClockSource+0x16c>
 80053a6:	2b30      	cmp	r3, #48	@ 0x30
 80053a8:	d064      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0x15a>
 80053aa:	2b30      	cmp	r3, #48	@ 0x30
 80053ac:	d86b      	bhi.n	8005486 <HAL_TIM_ConfigClockSource+0x16c>
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d060      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0x15a>
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d867      	bhi.n	8005486 <HAL_TIM_ConfigClockSource+0x16c>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d05c      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0x15a>
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d05a      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0x15a>
 80053be:	e062      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053d0:	f000 f9c2 	bl	8005758 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	609a      	str	r2, [r3, #8]
      break;
 80053ec:	e04f      	b.n	800548e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053fe:	f000 f9ab 	bl	8005758 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005410:	609a      	str	r2, [r3, #8]
      break;
 8005412:	e03c      	b.n	800548e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005420:	461a      	mov	r2, r3
 8005422:	f000 f91f 	bl	8005664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2150      	movs	r1, #80	@ 0x50
 800542c:	4618      	mov	r0, r3
 800542e:	f000 f978 	bl	8005722 <TIM_ITRx_SetConfig>
      break;
 8005432:	e02c      	b.n	800548e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005440:	461a      	mov	r2, r3
 8005442:	f000 f93e 	bl	80056c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2160      	movs	r1, #96	@ 0x60
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f968 	bl	8005722 <TIM_ITRx_SetConfig>
      break;
 8005452:	e01c      	b.n	800548e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005460:	461a      	mov	r2, r3
 8005462:	f000 f8ff 	bl	8005664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2140      	movs	r1, #64	@ 0x40
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f958 	bl	8005722 <TIM_ITRx_SetConfig>
      break;
 8005472:	e00c      	b.n	800548e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f000 f94f 	bl	8005722 <TIM_ITRx_SetConfig>
      break;
 8005484:	e003      	b.n	800548e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	73fb      	strb	r3, [r7, #15]
      break;
 800548a:	e000      	b.n	800548e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800548c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800549e:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a46      	ldr	r2, [pc, #280]	@ (8005638 <TIM_Base_SetConfig+0x12c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552a:	d00f      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a43      	ldr	r2, [pc, #268]	@ (800563c <TIM_Base_SetConfig+0x130>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00b      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a42      	ldr	r2, [pc, #264]	@ (8005640 <TIM_Base_SetConfig+0x134>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a41      	ldr	r2, [pc, #260]	@ (8005644 <TIM_Base_SetConfig+0x138>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a40      	ldr	r2, [pc, #256]	@ (8005648 <TIM_Base_SetConfig+0x13c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d108      	bne.n	800555e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a35      	ldr	r2, [pc, #212]	@ (8005638 <TIM_Base_SetConfig+0x12c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d02b      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556c:	d027      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a32      	ldr	r2, [pc, #200]	@ (800563c <TIM_Base_SetConfig+0x130>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d023      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a31      	ldr	r2, [pc, #196]	@ (8005640 <TIM_Base_SetConfig+0x134>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01f      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a30      	ldr	r2, [pc, #192]	@ (8005644 <TIM_Base_SetConfig+0x138>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d01b      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2f      	ldr	r2, [pc, #188]	@ (8005648 <TIM_Base_SetConfig+0x13c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d017      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a2e      	ldr	r2, [pc, #184]	@ (800564c <TIM_Base_SetConfig+0x140>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d013      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a2d      	ldr	r2, [pc, #180]	@ (8005650 <TIM_Base_SetConfig+0x144>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00f      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005654 <TIM_Base_SetConfig+0x148>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00b      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005658 <TIM_Base_SetConfig+0x14c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d007      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a2a      	ldr	r2, [pc, #168]	@ (800565c <TIM_Base_SetConfig+0x150>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d003      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a29      	ldr	r2, [pc, #164]	@ (8005660 <TIM_Base_SetConfig+0x154>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d108      	bne.n	80055d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a10      	ldr	r2, [pc, #64]	@ (8005638 <TIM_Base_SetConfig+0x12c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0xf8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a12      	ldr	r2, [pc, #72]	@ (8005648 <TIM_Base_SetConfig+0x13c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d103      	bne.n	800560c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b01      	cmp	r3, #1
 800561c:	d105      	bne.n	800562a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f023 0201 	bic.w	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	611a      	str	r2, [r3, #16]
  }
}
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40010000 	.word	0x40010000
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800
 8005644:	40000c00 	.word	0x40000c00
 8005648:	40010400 	.word	0x40010400
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400
 8005654:	40014800 	.word	0x40014800
 8005658:	40001800 	.word	0x40001800
 800565c:	40001c00 	.word	0x40001c00
 8005660:	40002000 	.word	0x40002000

08005664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f023 0201 	bic.w	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800568e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f023 030a 	bic.w	r3, r3, #10
 80056a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b087      	sub	sp, #28
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	f023 0210 	bic.w	r2, r3, #16
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	031b      	lsls	r3, r3, #12
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	621a      	str	r2, [r3, #32]
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	f043 0307 	orr.w	r3, r3, #7
 8005744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	609a      	str	r2, [r3, #8]
}
 800574c:	bf00      	nop
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	021a      	lsls	r2, r3, #8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	431a      	orrs	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4313      	orrs	r3, r2
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	609a      	str	r2, [r3, #8]
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e05a      	b.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a21      	ldr	r2, [pc, #132]	@ (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d022      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fc:	d01d      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1d      	ldr	r2, [pc, #116]	@ (8005878 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d018      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1b      	ldr	r2, [pc, #108]	@ (800587c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1a      	ldr	r2, [pc, #104]	@ (8005880 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00e      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a18      	ldr	r2, [pc, #96]	@ (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d009      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a17      	ldr	r2, [pc, #92]	@ (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a15      	ldr	r2, [pc, #84]	@ (800588c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d10c      	bne.n	8005854 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4313      	orrs	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40010000 	.word	0x40010000
 8005878:	40000400 	.word	0x40000400
 800587c:	40000800 	.word	0x40000800
 8005880:	40000c00 	.word	0x40000c00
 8005884:	40010400 	.word	0x40010400
 8005888:	40014000 	.word	0x40014000
 800588c:	40001800 	.word	0x40001800

08005890 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e042      	b.n	8005950 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fb ffd2 	bl	8001888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2224      	movs	r2, #36	@ 0x24
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f973 	bl	8005be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695a      	ldr	r2, [r3, #20]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08a      	sub	sp, #40	@ 0x28
 800595c:	af02      	add	r7, sp, #8
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	4613      	mov	r3, r2
 8005966:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b20      	cmp	r3, #32
 8005976:	d175      	bne.n	8005a64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_UART_Transmit+0x2c>
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e06e      	b.n	8005a66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2221      	movs	r2, #33	@ 0x21
 8005992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005996:	f7fc f975 	bl	8001c84 <HAL_GetTick>
 800599a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	88fa      	ldrh	r2, [r7, #6]
 80059a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	88fa      	ldrh	r2, [r7, #6]
 80059a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059b0:	d108      	bne.n	80059c4 <HAL_UART_Transmit+0x6c>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e003      	b.n	80059cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059cc:	e02e      	b.n	8005a2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2200      	movs	r2, #0
 80059d6:	2180      	movs	r1, #128	@ 0x80
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f848 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e03a      	b.n	8005a66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	3302      	adds	r3, #2
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	e007      	b.n	8005a1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1cb      	bne.n	80059ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2140      	movs	r1, #64	@ 0x40
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f814 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e006      	b.n	8005a66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e000      	b.n	8005a66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
  }
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b086      	sub	sp, #24
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7e:	e03b      	b.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a86:	d037      	beq.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a88:	f7fc f8fc 	bl	8001c84 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	6a3a      	ldr	r2, [r7, #32]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d302      	bcc.n	8005a9e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e03a      	b.n	8005b18 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d023      	beq.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b80      	cmp	r3, #128	@ 0x80
 8005ab4:	d020      	beq.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b40      	cmp	r3, #64	@ 0x40
 8005aba:	d01d      	beq.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d116      	bne.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f81d 	bl	8005b20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2208      	movs	r2, #8
 8005aea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e00f      	b.n	8005b18 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4013      	ands	r3, r2
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	bf0c      	ite	eq
 8005b08:	2301      	moveq	r3, #1
 8005b0a:	2300      	movne	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d0b4      	beq.n	8005a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b095      	sub	sp, #84	@ 0x54
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b48:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e5      	bne.n	8005b28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3314      	adds	r3, #20
 8005b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3314      	adds	r3, #20
 8005b7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e5      	bne.n	8005b5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d119      	bne.n	8005bcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f023 0310 	bic.w	r3, r3, #16
 8005bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	330c      	adds	r3, #12
 8005bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bb8:	61ba      	str	r2, [r7, #24]
 8005bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6979      	ldr	r1, [r7, #20]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e5      	bne.n	8005b98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bda:	bf00      	nop
 8005bdc:	3754      	adds	r7, #84	@ 0x54
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bec:	b0c0      	sub	sp, #256	@ 0x100
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c04:	68d9      	ldr	r1, [r3, #12]
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	ea40 0301 	orr.w	r3, r0, r1
 8005c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c40:	f021 010c 	bic.w	r1, r1, #12
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c62:	6999      	ldr	r1, [r3, #24]
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	ea40 0301 	orr.w	r3, r0, r1
 8005c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4b8f      	ldr	r3, [pc, #572]	@ (8005eb4 <UART_SetConfig+0x2cc>)
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d005      	beq.n	8005c88 <UART_SetConfig+0xa0>
 8005c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4b8d      	ldr	r3, [pc, #564]	@ (8005eb8 <UART_SetConfig+0x2d0>)
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d104      	bne.n	8005c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c88:	f7fd f8e2 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 8005c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c90:	e003      	b.n	8005c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c92:	f7fd f8c9 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 8005c96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ca4:	f040 810c 	bne.w	8005ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005cba:	4622      	mov	r2, r4
 8005cbc:	462b      	mov	r3, r5
 8005cbe:	1891      	adds	r1, r2, r2
 8005cc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005cc2:	415b      	adcs	r3, r3
 8005cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005cca:	4621      	mov	r1, r4
 8005ccc:	eb12 0801 	adds.w	r8, r2, r1
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	eb43 0901 	adc.w	r9, r3, r1
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cea:	4690      	mov	r8, r2
 8005cec:	4699      	mov	r9, r3
 8005cee:	4623      	mov	r3, r4
 8005cf0:	eb18 0303 	adds.w	r3, r8, r3
 8005cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cf8:	462b      	mov	r3, r5
 8005cfa:	eb49 0303 	adc.w	r3, r9, r3
 8005cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d16:	460b      	mov	r3, r1
 8005d18:	18db      	adds	r3, r3, r3
 8005d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	eb42 0303 	adc.w	r3, r2, r3
 8005d22:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d2c:	f7fa fdce 	bl	80008cc <__aeabi_uldivmod>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4b61      	ldr	r3, [pc, #388]	@ (8005ebc <UART_SetConfig+0x2d4>)
 8005d36:	fba3 2302 	umull	r2, r3, r3, r2
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	011c      	lsls	r4, r3, #4
 8005d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d50:	4642      	mov	r2, r8
 8005d52:	464b      	mov	r3, r9
 8005d54:	1891      	adds	r1, r2, r2
 8005d56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d58:	415b      	adcs	r3, r3
 8005d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d60:	4641      	mov	r1, r8
 8005d62:	eb12 0a01 	adds.w	sl, r2, r1
 8005d66:	4649      	mov	r1, r9
 8005d68:	eb43 0b01 	adc.w	fp, r3, r1
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d80:	4692      	mov	sl, r2
 8005d82:	469b      	mov	fp, r3
 8005d84:	4643      	mov	r3, r8
 8005d86:	eb1a 0303 	adds.w	r3, sl, r3
 8005d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d8e:	464b      	mov	r3, r9
 8005d90:	eb4b 0303 	adc.w	r3, fp, r3
 8005d94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005da4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005dac:	460b      	mov	r3, r1
 8005dae:	18db      	adds	r3, r3, r3
 8005db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005db2:	4613      	mov	r3, r2
 8005db4:	eb42 0303 	adc.w	r3, r2, r3
 8005db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005dc2:	f7fa fd83 	bl	80008cc <__aeabi_uldivmod>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8005ebc <UART_SetConfig+0x2d4>)
 8005dce:	fba3 2301 	umull	r2, r3, r3, r1
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	2264      	movs	r2, #100	@ 0x64
 8005dd6:	fb02 f303 	mul.w	r3, r2, r3
 8005dda:	1acb      	subs	r3, r1, r3
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005de2:	4b36      	ldr	r3, [pc, #216]	@ (8005ebc <UART_SetConfig+0x2d4>)
 8005de4:	fba3 2302 	umull	r2, r3, r3, r2
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005df0:	441c      	add	r4, r3
 8005df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e04:	4642      	mov	r2, r8
 8005e06:	464b      	mov	r3, r9
 8005e08:	1891      	adds	r1, r2, r2
 8005e0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e0c:	415b      	adcs	r3, r3
 8005e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e14:	4641      	mov	r1, r8
 8005e16:	1851      	adds	r1, r2, r1
 8005e18:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	414b      	adcs	r3, r1
 8005e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	00cb      	lsls	r3, r1, #3
 8005e30:	4651      	mov	r1, sl
 8005e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e36:	4651      	mov	r1, sl
 8005e38:	00ca      	lsls	r2, r1, #3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	4642      	mov	r2, r8
 8005e42:	189b      	adds	r3, r3, r2
 8005e44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e48:	464b      	mov	r3, r9
 8005e4a:	460a      	mov	r2, r1
 8005e4c:	eb42 0303 	adc.w	r3, r2, r3
 8005e50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e68:	460b      	mov	r3, r1
 8005e6a:	18db      	adds	r3, r3, r3
 8005e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e6e:	4613      	mov	r3, r2
 8005e70:	eb42 0303 	adc.w	r3, r2, r3
 8005e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e7e:	f7fa fd25 	bl	80008cc <__aeabi_uldivmod>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4b0d      	ldr	r3, [pc, #52]	@ (8005ebc <UART_SetConfig+0x2d4>)
 8005e88:	fba3 1302 	umull	r1, r3, r3, r2
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	2164      	movs	r1, #100	@ 0x64
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	3332      	adds	r3, #50	@ 0x32
 8005e9a:	4a08      	ldr	r2, [pc, #32]	@ (8005ebc <UART_SetConfig+0x2d4>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	f003 0207 	and.w	r2, r3, #7
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4422      	add	r2, r4
 8005eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005eb0:	e106      	b.n	80060c0 <UART_SetConfig+0x4d8>
 8005eb2:	bf00      	nop
 8005eb4:	40011000 	.word	0x40011000
 8005eb8:	40011400 	.word	0x40011400
 8005ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005eca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ed2:	4642      	mov	r2, r8
 8005ed4:	464b      	mov	r3, r9
 8005ed6:	1891      	adds	r1, r2, r2
 8005ed8:	6239      	str	r1, [r7, #32]
 8005eda:	415b      	adcs	r3, r3
 8005edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ee2:	4641      	mov	r1, r8
 8005ee4:	1854      	adds	r4, r2, r1
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	eb43 0501 	adc.w	r5, r3, r1
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	00eb      	lsls	r3, r5, #3
 8005ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005efa:	00e2      	lsls	r2, r4, #3
 8005efc:	4614      	mov	r4, r2
 8005efe:	461d      	mov	r5, r3
 8005f00:	4643      	mov	r3, r8
 8005f02:	18e3      	adds	r3, r4, r3
 8005f04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f08:	464b      	mov	r3, r9
 8005f0a:	eb45 0303 	adc.w	r3, r5, r3
 8005f0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f2e:	4629      	mov	r1, r5
 8005f30:	008b      	lsls	r3, r1, #2
 8005f32:	4621      	mov	r1, r4
 8005f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f38:	4621      	mov	r1, r4
 8005f3a:	008a      	lsls	r2, r1, #2
 8005f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f40:	f7fa fcc4 	bl	80008cc <__aeabi_uldivmod>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4b60      	ldr	r3, [pc, #384]	@ (80060cc <UART_SetConfig+0x4e4>)
 8005f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	011c      	lsls	r4, r3, #4
 8005f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f64:	4642      	mov	r2, r8
 8005f66:	464b      	mov	r3, r9
 8005f68:	1891      	adds	r1, r2, r2
 8005f6a:	61b9      	str	r1, [r7, #24]
 8005f6c:	415b      	adcs	r3, r3
 8005f6e:	61fb      	str	r3, [r7, #28]
 8005f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f74:	4641      	mov	r1, r8
 8005f76:	1851      	adds	r1, r2, r1
 8005f78:	6139      	str	r1, [r7, #16]
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	414b      	adcs	r3, r1
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	00cb      	lsls	r3, r1, #3
 8005f90:	4651      	mov	r1, sl
 8005f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f96:	4651      	mov	r1, sl
 8005f98:	00ca      	lsls	r2, r1, #3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	189b      	adds	r3, r3, r2
 8005fa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fa8:	464b      	mov	r3, r9
 8005faa:	460a      	mov	r2, r1
 8005fac:	eb42 0303 	adc.w	r3, r2, r3
 8005fb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005fcc:	4649      	mov	r1, r9
 8005fce:	008b      	lsls	r3, r1, #2
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fd6:	4641      	mov	r1, r8
 8005fd8:	008a      	lsls	r2, r1, #2
 8005fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005fde:	f7fa fc75 	bl	80008cc <__aeabi_uldivmod>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	4b38      	ldr	r3, [pc, #224]	@ (80060cc <UART_SetConfig+0x4e4>)
 8005fea:	fba3 2301 	umull	r2, r3, r3, r1
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	2264      	movs	r2, #100	@ 0x64
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	1acb      	subs	r3, r1, r3
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	3332      	adds	r3, #50	@ 0x32
 8005ffc:	4a33      	ldr	r2, [pc, #204]	@ (80060cc <UART_SetConfig+0x4e4>)
 8005ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006008:	441c      	add	r4, r3
 800600a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800600e:	2200      	movs	r2, #0
 8006010:	673b      	str	r3, [r7, #112]	@ 0x70
 8006012:	677a      	str	r2, [r7, #116]	@ 0x74
 8006014:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006018:	4642      	mov	r2, r8
 800601a:	464b      	mov	r3, r9
 800601c:	1891      	adds	r1, r2, r2
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	415b      	adcs	r3, r3
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006028:	4641      	mov	r1, r8
 800602a:	1851      	adds	r1, r2, r1
 800602c:	6039      	str	r1, [r7, #0]
 800602e:	4649      	mov	r1, r9
 8006030:	414b      	adcs	r3, r1
 8006032:	607b      	str	r3, [r7, #4]
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006040:	4659      	mov	r1, fp
 8006042:	00cb      	lsls	r3, r1, #3
 8006044:	4651      	mov	r1, sl
 8006046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800604a:	4651      	mov	r1, sl
 800604c:	00ca      	lsls	r2, r1, #3
 800604e:	4610      	mov	r0, r2
 8006050:	4619      	mov	r1, r3
 8006052:	4603      	mov	r3, r0
 8006054:	4642      	mov	r2, r8
 8006056:	189b      	adds	r3, r3, r2
 8006058:	66bb      	str	r3, [r7, #104]	@ 0x68
 800605a:	464b      	mov	r3, r9
 800605c:	460a      	mov	r2, r1
 800605e:	eb42 0303 	adc.w	r3, r2, r3
 8006062:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	663b      	str	r3, [r7, #96]	@ 0x60
 800606e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800607c:	4649      	mov	r1, r9
 800607e:	008b      	lsls	r3, r1, #2
 8006080:	4641      	mov	r1, r8
 8006082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006086:	4641      	mov	r1, r8
 8006088:	008a      	lsls	r2, r1, #2
 800608a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800608e:	f7fa fc1d 	bl	80008cc <__aeabi_uldivmod>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4b0d      	ldr	r3, [pc, #52]	@ (80060cc <UART_SetConfig+0x4e4>)
 8006098:	fba3 1302 	umull	r1, r3, r3, r2
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	2164      	movs	r1, #100	@ 0x64
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	3332      	adds	r3, #50	@ 0x32
 80060aa:	4a08      	ldr	r2, [pc, #32]	@ (80060cc <UART_SetConfig+0x4e4>)
 80060ac:	fba2 2303 	umull	r2, r3, r2, r3
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	f003 020f 	and.w	r2, r3, #15
 80060b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4422      	add	r2, r4
 80060be:	609a      	str	r2, [r3, #8]
}
 80060c0:	bf00      	nop
 80060c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060c6:	46bd      	mov	sp, r7
 80060c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060cc:	51eb851f 	.word	0x51eb851f

080060d0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80060d0:	b084      	sub	sp, #16
 80060d2:	b480      	push	{r7}
 80060d4:	b085      	sub	sp, #20
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	f107 001c 	add.w	r0, r7, #28
 80060de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80060e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80060e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80060ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80060ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80060f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80060f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80060f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80060f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80060fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800610a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	b004      	add	sp, #16
 8006124:	4770      	bx	lr

08006126 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2203      	movs	r2, #3
 800616e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0303 	and.w	r3, r3, #3
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80061b8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80061be:	431a      	orrs	r2, r3
                       Command->CPSM);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80061c4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80061d4:	f023 030f 	bic.w	r3, r3, #15
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	b2db      	uxtb	r3, r3
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3314      	adds	r3, #20
 8006216:	461a      	mov	r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	4413      	add	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
}  
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006254:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800625a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006260:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006278:	2300      	movs	r3, #0

}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b088      	sub	sp, #32
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006294:	2310      	movs	r3, #16
 8006296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006298:	2340      	movs	r3, #64	@ 0x40
 800629a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062a6:	f107 0308 	add.w	r3, r7, #8
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff ff74 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80062b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062b6:	2110      	movs	r1, #16
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f9d7 	bl	800666c <SDMMC_GetCmdResp1>
 80062be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062c0:	69fb      	ldr	r3, [r7, #28]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b088      	sub	sp, #32
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80062d8:	2311      	movs	r3, #17
 80062da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062dc:	2340      	movs	r3, #64	@ 0x40
 80062de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062ea:	f107 0308 	add.w	r3, r7, #8
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff ff52 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80062f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062fa:	2111      	movs	r1, #17
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f9b5 	bl	800666c <SDMMC_GetCmdResp1>
 8006302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006304:	69fb      	ldr	r3, [r7, #28]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3720      	adds	r7, #32
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b088      	sub	sp, #32
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800631c:	2312      	movs	r3, #18
 800631e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006320:	2340      	movs	r3, #64	@ 0x40
 8006322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006324:	2300      	movs	r3, #0
 8006326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800632c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800632e:	f107 0308 	add.w	r3, r7, #8
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff ff30 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800633a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800633e:	2112      	movs	r1, #18
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f993 	bl	800666c <SDMMC_GetCmdResp1>
 8006346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006348:	69fb      	ldr	r3, [r7, #28]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3720      	adds	r7, #32
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b088      	sub	sp, #32
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006360:	2318      	movs	r3, #24
 8006362:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006364:	2340      	movs	r3, #64	@ 0x40
 8006366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800636c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006370:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006372:	f107 0308 	add.w	r3, r7, #8
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff ff0e 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800637e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006382:	2118      	movs	r1, #24
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f971 	bl	800666c <SDMMC_GetCmdResp1>
 800638a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800638c:	69fb      	ldr	r3, [r7, #28]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3720      	adds	r7, #32
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b088      	sub	sp, #32
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80063a4:	2319      	movs	r3, #25
 80063a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063a8:	2340      	movs	r3, #64	@ 0x40
 80063aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063b6:	f107 0308 	add.w	r3, r7, #8
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff feec 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80063c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063c6:	2119      	movs	r1, #25
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f94f 	bl	800666c <SDMMC_GetCmdResp1>
 80063ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063d0:	69fb      	ldr	r3, [r7, #28]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3720      	adds	r7, #32
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80063e8:	230c      	movs	r3, #12
 80063ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063ec:	2340      	movs	r3, #64	@ 0x40
 80063ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063fa:	f107 0308 	add.w	r3, r7, #8
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7ff feca 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006406:	4a05      	ldr	r2, [pc, #20]	@ (800641c <SDMMC_CmdStopTransfer+0x40>)
 8006408:	210c      	movs	r1, #12
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f92e 	bl	800666c <SDMMC_GetCmdResp1>
 8006410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006412:	69fb      	ldr	r3, [r7, #28]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3720      	adds	r7, #32
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	05f5e100 	.word	0x05f5e100

08006420 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	@ 0x28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006430:	2307      	movs	r3, #7
 8006432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006434:	2340      	movs	r3, #64	@ 0x40
 8006436:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006438:	2300      	movs	r3, #0
 800643a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800643c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006440:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006442:	f107 0310 	add.w	r3, r7, #16
 8006446:	4619      	mov	r1, r3
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f7ff fea6 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800644e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006452:	2107      	movs	r1, #7
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f909 	bl	800666c <SDMMC_GetCmdResp1>
 800645a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800645e:	4618      	mov	r0, r3
 8006460:	3728      	adds	r7, #40	@ 0x28
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b088      	sub	sp, #32
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800647e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006482:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006484:	f107 0308 	add.w	r3, r7, #8
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff fe85 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fb23 	bl	8006adc <SDMMC_GetCmdError>
 8006496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006498:	69fb      	ldr	r3, [r7, #28]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3720      	adds	r7, #32
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b088      	sub	sp, #32
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80064aa:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80064ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80064b0:	2308      	movs	r3, #8
 80064b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064b4:	2340      	movs	r3, #64	@ 0x40
 80064b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064c2:	f107 0308 	add.w	r3, r7, #8
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff fe66 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fab6 	bl	8006a40 <SDMMC_GetCmdResp7>
 80064d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064d6:	69fb      	ldr	r3, [r7, #28]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3720      	adds	r7, #32
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80064ee:	2337      	movs	r3, #55	@ 0x37
 80064f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064f2:	2340      	movs	r3, #64	@ 0x40
 80064f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064f6:	2300      	movs	r3, #0
 80064f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006500:	f107 0308 	add.w	r3, r7, #8
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fe47 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800650c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006510:	2137      	movs	r1, #55	@ 0x37
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f8aa 	bl	800666c <SDMMC_GetCmdResp1>
 8006518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800651a:	69fb      	ldr	r3, [r7, #28]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800653a:	2329      	movs	r3, #41	@ 0x29
 800653c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800653e:	2340      	movs	r3, #64	@ 0x40
 8006540:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800654a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800654c:	f107 0308 	add.w	r3, r7, #8
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff fe21 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f9bd 	bl	80068d8 <SDMMC_GetCmdResp3>
 800655e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006560:	69fb      	ldr	r3, [r7, #28]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3720      	adds	r7, #32
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b088      	sub	sp, #32
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006576:	2302      	movs	r3, #2
 8006578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800657a:	23c0      	movs	r3, #192	@ 0xc0
 800657c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006586:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006588:	f107 0308 	add.w	r3, r7, #8
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff fe03 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f957 	bl	8006848 <SDMMC_GetCmdResp2>
 800659a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800659c:	69fb      	ldr	r3, [r7, #28]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b088      	sub	sp, #32
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80065b4:	2309      	movs	r3, #9
 80065b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80065b8:	23c0      	movs	r3, #192	@ 0xc0
 80065ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065c6:	f107 0308 	add.w	r3, r7, #8
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff fde4 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f938 	bl	8006848 <SDMMC_GetCmdResp2>
 80065d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065da:	69fb      	ldr	r3, [r7, #28]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3720      	adds	r7, #32
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b088      	sub	sp, #32
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80065f2:	2303      	movs	r3, #3
 80065f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065f6:	2340      	movs	r3, #64	@ 0x40
 80065f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065fa:	2300      	movs	r3, #0
 80065fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006602:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006604:	f107 0308 	add.w	r3, r7, #8
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff fdc5 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	2103      	movs	r1, #3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f99d 	bl	8006954 <SDMMC_GetCmdResp6>
 800661a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800661c:	69fb      	ldr	r3, [r7, #28]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3720      	adds	r7, #32
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b088      	sub	sp, #32
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006634:	230d      	movs	r3, #13
 8006636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006638:	2340      	movs	r3, #64	@ 0x40
 800663a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800663c:	2300      	movs	r3, #0
 800663e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006640:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006644:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006646:	f107 0308 	add.w	r3, r7, #8
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fda4 	bl	800619a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006656:	210d      	movs	r1, #13
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f807 	bl	800666c <SDMMC_GetCmdResp1>
 800665e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006660:	69fb      	ldr	r3, [r7, #28]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	460b      	mov	r3, r1
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800667a:	4b70      	ldr	r3, [pc, #448]	@ (800683c <SDMMC_GetCmdResp1+0x1d0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a70      	ldr	r2, [pc, #448]	@ (8006840 <SDMMC_GetCmdResp1+0x1d4>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	0a5a      	lsrs	r2, r3, #9
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	fb02 f303 	mul.w	r3, r2, r3
 800668c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	1e5a      	subs	r2, r3, #1
 8006692:	61fa      	str	r2, [r7, #28]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006698:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800669c:	e0c9      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0ef      	beq.n	800668e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1ea      	bne.n	800668e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d004      	beq.n	80066ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2204      	movs	r2, #4
 80066c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066ca:	2304      	movs	r3, #4
 80066cc:	e0b1      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e0a6      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	22c5      	movs	r2, #197	@ 0xc5
 80066e8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff fd7f 	bl	80061ee <SDIO_GetCommandResponse>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	7afb      	ldrb	r3, [r7, #11]
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d001      	beq.n	80066fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e099      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80066fe:	2100      	movs	r1, #0
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7ff fd81 	bl	8006208 <SDIO_GetResponse>
 8006706:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4b4e      	ldr	r3, [pc, #312]	@ (8006844 <SDMMC_GetCmdResp1+0x1d8>)
 800670c:	4013      	ands	r3, r2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006712:	2300      	movs	r3, #0
 8006714:	e08d      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2b00      	cmp	r3, #0
 800671a:	da02      	bge.n	8006722 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800671c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006720:	e087      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800672c:	2340      	movs	r3, #64	@ 0x40
 800672e:	e080      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800673a:	2380      	movs	r3, #128	@ 0x80
 800673c:	e079      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006748:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800674c:	e071      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006758:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800675c:	e069      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006768:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800676c:	e061      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006778:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800677c:	e059      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800678c:	e051      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006798:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800679c:	e049      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80067a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80067ac:	e041      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80067b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067bc:	e039      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80067c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80067cc:	e031      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80067d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80067dc:	e029      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80067e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80067ec:	e021      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80067f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80067fc:	e019      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006808:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800680c:	e011      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006818:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800681c:	e009      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006828:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800682c:	e001      	b.n	8006832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800682e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	3720      	adds	r7, #32
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000000 	.word	0x20000000
 8006840:	10624dd3 	.word	0x10624dd3
 8006844:	fdffe008 	.word	0xfdffe008

08006848 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006850:	4b1f      	ldr	r3, [pc, #124]	@ (80068d0 <SDMMC_GetCmdResp2+0x88>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1f      	ldr	r2, [pc, #124]	@ (80068d4 <SDMMC_GetCmdResp2+0x8c>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	0a5b      	lsrs	r3, r3, #9
 800685c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006860:	fb02 f303 	mul.w	r3, r2, r3
 8006864:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	1e5a      	subs	r2, r3, #1
 800686a:	60fa      	str	r2, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006870:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006874:	e026      	b.n	80068c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800687a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0ef      	beq.n	8006866 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1ea      	bne.n	8006866 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2204      	movs	r2, #4
 80068a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068a2:	2304      	movs	r3, #4
 80068a4:	e00e      	b.n	80068c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e003      	b.n	80068c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	22c5      	movs	r2, #197	@ 0xc5
 80068c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	20000000 	.word	0x20000000
 80068d4:	10624dd3 	.word	0x10624dd3

080068d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068e0:	4b1a      	ldr	r3, [pc, #104]	@ (800694c <SDMMC_GetCmdResp3+0x74>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006950 <SDMMC_GetCmdResp3+0x78>)
 80068e6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ea:	0a5b      	lsrs	r3, r3, #9
 80068ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068f0:	fb02 f303 	mul.w	r3, r2, r3
 80068f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	1e5a      	subs	r2, r3, #1
 80068fa:	60fa      	str	r2, [r7, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d102      	bne.n	8006906 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006900:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006904:	e01b      	b.n	800693e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800690a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0ef      	beq.n	80068f6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ea      	bne.n	80068f6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2204      	movs	r2, #4
 8006930:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006932:	2304      	movs	r3, #4
 8006934:	e003      	b.n	800693e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	22c5      	movs	r2, #197	@ 0xc5
 800693a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	20000000 	.word	0x20000000
 8006950:	10624dd3 	.word	0x10624dd3

08006954 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	460b      	mov	r3, r1
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006962:	4b35      	ldr	r3, [pc, #212]	@ (8006a38 <SDMMC_GetCmdResp6+0xe4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a35      	ldr	r2, [pc, #212]	@ (8006a3c <SDMMC_GetCmdResp6+0xe8>)
 8006968:	fba2 2303 	umull	r2, r3, r2, r3
 800696c:	0a5b      	lsrs	r3, r3, #9
 800696e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006972:	fb02 f303 	mul.w	r3, r2, r3
 8006976:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	1e5a      	subs	r2, r3, #1
 800697c:	61fa      	str	r2, [r7, #28]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006982:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006986:	e052      	b.n	8006a2e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800698c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0ef      	beq.n	8006978 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1ea      	bne.n	8006978 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d004      	beq.n	80069b8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2204      	movs	r2, #4
 80069b2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069b4:	2304      	movs	r3, #4
 80069b6:	e03a      	b.n	8006a2e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d004      	beq.n	80069ce <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e02f      	b.n	8006a2e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff fc0d 	bl	80061ee <SDIO_GetCommandResponse>
 80069d4:	4603      	mov	r3, r0
 80069d6:	461a      	mov	r2, r3
 80069d8:	7afb      	ldrb	r3, [r7, #11]
 80069da:	4293      	cmp	r3, r2
 80069dc:	d001      	beq.n	80069e2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069de:	2301      	movs	r3, #1
 80069e0:	e025      	b.n	8006a2e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	22c5      	movs	r2, #197	@ 0xc5
 80069e6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80069e8:	2100      	movs	r1, #0
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f7ff fc0c 	bl	8006208 <SDIO_GetResponse>
 80069f0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	0c1b      	lsrs	r3, r3, #16
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	e011      	b.n	8006a2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006a14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a18:	e009      	b.n	8006a2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a28:	e001      	b.n	8006a2e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006a2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000000 	.word	0x20000000
 8006a3c:	10624dd3 	.word	0x10624dd3

08006a40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a48:	4b22      	ldr	r3, [pc, #136]	@ (8006ad4 <SDMMC_GetCmdResp7+0x94>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a22      	ldr	r2, [pc, #136]	@ (8006ad8 <SDMMC_GetCmdResp7+0x98>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	0a5b      	lsrs	r3, r3, #9
 8006a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a58:	fb02 f303 	mul.w	r3, r2, r3
 8006a5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	1e5a      	subs	r2, r3, #1
 8006a62:	60fa      	str	r2, [r7, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006a6c:	e02c      	b.n	8006ac8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ef      	beq.n	8006a5e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1ea      	bne.n	8006a5e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d004      	beq.n	8006a9e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2204      	movs	r2, #4
 8006a98:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a9a:	2304      	movs	r3, #4
 8006a9c:	e014      	b.n	8006ac8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e009      	b.n	8006ac8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2240      	movs	r2, #64	@ 0x40
 8006ac4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006ac6:	2300      	movs	r3, #0
  
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	20000000 	.word	0x20000000
 8006ad8:	10624dd3 	.word	0x10624dd3

08006adc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ae4:	4b11      	ldr	r3, [pc, #68]	@ (8006b2c <SDMMC_GetCmdError+0x50>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a11      	ldr	r2, [pc, #68]	@ (8006b30 <SDMMC_GetCmdError+0x54>)
 8006aea:	fba2 2303 	umull	r2, r3, r2, r3
 8006aee:	0a5b      	lsrs	r3, r3, #9
 8006af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
 8006af8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	1e5a      	subs	r2, r3, #1
 8006afe:	60fa      	str	r2, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006b08:	e009      	b.n	8006b1e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0f1      	beq.n	8006afa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	22c5      	movs	r2, #197	@ 0xc5
 8006b1a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	20000000 	.word	0x20000000
 8006b30:	10624dd3 	.word	0x10624dd3

08006b34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b34:	b084      	sub	sp, #16
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	f107 001c 	add.w	r0, r7, #28
 8006b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b46:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d123      	bne.n	8006b96 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d105      	bne.n	8006b8a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa9a 	bl	80070c4 <USB_CoreReset>
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]
 8006b94:	e01b      	b.n	8006bce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fa8e 	bl	80070c4 <USB_CoreReset>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d106      	bne.n	8006bc2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	639a      	str	r2, [r3, #56]	@ 0x38
 8006bc0:	e005      	b.n	8006bce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bce:	7fbb      	ldrb	r3, [r7, #30]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d10b      	bne.n	8006bec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f043 0206 	orr.w	r2, r3, #6
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f043 0220 	orr.w	r2, r3, #32
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bf8:	b004      	add	sp, #16
 8006bfa:	4770      	bx	lr

08006bfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f023 0201 	bic.w	r2, r3, #1
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	460b      	mov	r3, r1
 8006c28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c3a:	78fb      	ldrb	r3, [r7, #3]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d115      	bne.n	8006c6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c4c:	200a      	movs	r0, #10
 8006c4e:	f7fb f825 	bl	8001c9c <HAL_Delay>
      ms += 10U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	330a      	adds	r3, #10
 8006c56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa25 	bl	80070a8 <USB_GetMode>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d01e      	beq.n	8006ca2 <USB_SetCurrentMode+0x84>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c68:	d9f0      	bls.n	8006c4c <USB_SetCurrentMode+0x2e>
 8006c6a:	e01a      	b.n	8006ca2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d115      	bne.n	8006c9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c7e:	200a      	movs	r0, #10
 8006c80:	f7fb f80c 	bl	8001c9c <HAL_Delay>
      ms += 10U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	330a      	adds	r3, #10
 8006c88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa0c 	bl	80070a8 <USB_GetMode>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <USB_SetCurrentMode+0x84>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c9a:	d9f0      	bls.n	8006c7e <USB_SetCurrentMode+0x60>
 8006c9c:	e001      	b.n	8006ca2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e005      	b.n	8006cae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ca6:	d101      	bne.n	8006cac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cb8:	b084      	sub	sp, #16
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b086      	sub	sp, #24
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	e009      	b.n	8006cec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	3340      	adds	r3, #64	@ 0x40
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b0e      	cmp	r3, #14
 8006cf0:	d9f2      	bls.n	8006cd8 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006cf2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d11c      	bne.n	8006d34 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d08:	f043 0302 	orr.w	r3, r3, #2
 8006d0c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	e005      	b.n	8006d40 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d46:	461a      	mov	r2, r3
 8006d48:	2300      	movs	r3, #0
 8006d4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d10d      	bne.n	8006d70 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f968 	bl	8007034 <USB_SetDevSpeed>
 8006d64:	e008      	b.n	8006d78 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d66:	2101      	movs	r1, #1
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f963 	bl	8007034 <USB_SetDevSpeed>
 8006d6e:	e003      	b.n	8006d78 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d70:	2103      	movs	r1, #3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f95e 	bl	8007034 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d78:	2110      	movs	r1, #16
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f8fa 	bl	8006f74 <USB_FlushTxFifo>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f924 	bl	8006fd8 <USB_FlushRxFifo>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006da0:	461a      	mov	r2, r3
 8006da2:	2300      	movs	r3, #0
 8006da4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dac:	461a      	mov	r2, r3
 8006dae:	2300      	movs	r3, #0
 8006db0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db8:	461a      	mov	r2, r3
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	e043      	b.n	8006e4c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dda:	d118      	bne.n	8006e0e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dee:	461a      	mov	r2, r3
 8006df0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	e013      	b.n	8006e20 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e04:	461a      	mov	r2, r3
 8006e06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	e008      	b.n	8006e20 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	2300      	movs	r3, #0
 8006e30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e50:	461a      	mov	r2, r3
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d3b5      	bcc.n	8006dc4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	e043      	b.n	8006ee6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e74:	d118      	bne.n	8006ea8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	e013      	b.n	8006eba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e008      	b.n	8006eba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	2300      	movs	r3, #0
 8006eca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ede:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006eea:	461a      	mov	r2, r3
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d3b5      	bcc.n	8006e5e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006f12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d105      	bne.n	8006f28 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	f043 0210 	orr.w	r2, r3, #16
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699a      	ldr	r2, [r3, #24]
 8006f2c:	4b10      	ldr	r3, [pc, #64]	@ (8006f70 <USB_DevInit+0x2b8>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d005      	beq.n	8006f48 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	f043 0208 	orr.w	r2, r3, #8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d107      	bne.n	8006f60 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f58:	f043 0304 	orr.w	r3, r3, #4
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f6c:	b004      	add	sp, #16
 8006f6e:	4770      	bx	lr
 8006f70:	803c3800 	.word	0x803c3800

08006f74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f8e:	d901      	bls.n	8006f94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e01b      	b.n	8006fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	daf2      	bge.n	8006f82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	019b      	lsls	r3, r3, #6
 8006fa4:	f043 0220 	orr.w	r2, r3, #32
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fb8:	d901      	bls.n	8006fbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e006      	b.n	8006fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d0f0      	beq.n	8006fac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ff0:	d901      	bls.n	8006ff6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e018      	b.n	8007028 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	daf2      	bge.n	8006fe4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2210      	movs	r2, #16
 8007006:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3301      	adds	r3, #1
 800700c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007014:	d901      	bls.n	800701a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e006      	b.n	8007028 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f003 0310 	and.w	r3, r3, #16
 8007022:	2b10      	cmp	r3, #16
 8007024:	d0f0      	beq.n	8007008 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	78fb      	ldrb	r3, [r7, #3]
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007054:	4313      	orrs	r3, r2
 8007056:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007066:	b480      	push	{r7}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007080:	f023 0303 	bic.w	r3, r3, #3
 8007084:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007094:	f043 0302 	orr.w	r3, r3, #2
 8007098:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	f003 0301 	and.w	r3, r3, #1
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3301      	adds	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070dc:	d901      	bls.n	80070e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e01b      	b.n	800711a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	daf2      	bge.n	80070d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f043 0201 	orr.w	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3301      	adds	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007106:	d901      	bls.n	800710c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e006      	b.n	800711a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b01      	cmp	r3, #1
 8007116:	d0f0      	beq.n	80070fa <USB_CoreReset+0x36>

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
	...

08007128 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800712c:	4904      	ldr	r1, [pc, #16]	@ (8007140 <MX_FATFS_Init+0x18>)
 800712e:	4805      	ldr	r0, [pc, #20]	@ (8007144 <MX_FATFS_Init+0x1c>)
 8007130:	f003 ff24 	bl	800af7c <FATFS_LinkDriver>
 8007134:	4603      	mov	r3, r0
 8007136:	461a      	mov	r2, r3
 8007138:	4b03      	ldr	r3, [pc, #12]	@ (8007148 <MX_FATFS_Init+0x20>)
 800713a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800713c:	bf00      	nop
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000744 	.word	0x20000744
 8007144:	0800f99c 	.word	0x0800f99c
 8007148:	20000740 	.word	0x20000740

0800714c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007150:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007152:	4618      	mov	r0, r3
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007166:	f000 f888 	bl	800727a <BSP_SD_IsDetected>
 800716a:	4603      	mov	r3, r0
 800716c:	2b01      	cmp	r3, #1
 800716e:	d001      	beq.n	8007174 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e005      	b.n	8007180 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007174:	4804      	ldr	r0, [pc, #16]	@ (8007188 <BSP_SD_Init+0x2c>)
 8007176:	f7fc fe77 	bl	8003e68 <HAL_SD_Init>
 800717a:	4603      	mov	r3, r0
 800717c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800717e:	79fb      	ldrb	r3, [r7, #7]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	2000007c 	.word	0x2000007c

0800718c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	68f9      	ldr	r1, [r7, #12]
 80071a2:	4806      	ldr	r0, [pc, #24]	@ (80071bc <BSP_SD_ReadBlocks_DMA+0x30>)
 80071a4:	f7fc ff10 	bl	8003fc8 <HAL_SD_ReadBlocks_DMA>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	2000007c 	.word	0x2000007c

080071c0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	68f9      	ldr	r1, [r7, #12]
 80071d6:	4806      	ldr	r0, [pc, #24]	@ (80071f0 <BSP_SD_WriteBlocks_DMA+0x30>)
 80071d8:	f7fc ffd6 	bl	8004188 <HAL_SD_WriteBlocks_DMA>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	2000007c 	.word	0x2000007c

080071f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80071f8:	4805      	ldr	r0, [pc, #20]	@ (8007210 <BSP_SD_GetCardState+0x1c>)
 80071fa:	f7fd fbf7 	bl	80049ec <HAL_SD_GetCardState>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b04      	cmp	r3, #4
 8007202:	bf14      	ite	ne
 8007204:	2301      	movne	r3, #1
 8007206:	2300      	moveq	r3, #0
 8007208:	b2db      	uxtb	r3, r3
}
 800720a:	4618      	mov	r0, r3
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	2000007c 	.word	0x2000007c

08007214 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	4803      	ldr	r0, [pc, #12]	@ (800722c <BSP_SD_GetCardInfo+0x18>)
 8007220:	f7fd fbb8 	bl	8004994 <HAL_SD_GetCardInfo>
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	2000007c 	.word	0x2000007c

08007230 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007238:	f000 f818 	bl	800726c <BSP_SD_AbortCallback>
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800724c:	f000 f9b4 	bl	80075b8 <BSP_SD_WriteCpltCallback>
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007260:	f000 f9bc 	bl	80075dc <BSP_SD_ReadCpltCallback>
}
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0

}
 8007270:	bf00      	nop
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007280:	2301      	movs	r3, #1
 8007282:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007284:	f000 f80c 	bl	80072a0 <BSP_PlatformIsDetected>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800728e:	2300      	movs	r3, #0
 8007290:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	b2db      	uxtb	r3, r3
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80072a6:	2301      	movs	r3, #1
 80072a8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80072aa:	2108      	movs	r1, #8
 80072ac:	4806      	ldr	r0, [pc, #24]	@ (80072c8 <BSP_PlatformIsDetected+0x28>)
 80072ae:	f7fb fb5d 	bl	800296c <HAL_GPIO_ReadPin>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80072b8:	2300      	movs	r3, #0
 80072ba:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80072bc:	79fb      	ldrb	r3, [r7, #7]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	40021800 	.word	0x40021800

080072cc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80072d4:	f004 f826 	bl	800b324 <osKernelGetTickCount>
 80072d8:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80072da:	e006      	b.n	80072ea <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80072dc:	f7ff ff8a 	bl	80071f4 <BSP_SD_GetCardState>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	e009      	b.n	80072fe <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80072ea:	f004 f81b 	bl	800b324 <osKernelGetTickCount>
 80072ee:	4602      	mov	r2, r0
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d8f0      	bhi.n	80072dc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80072fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007312:	4b0b      	ldr	r3, [pc, #44]	@ (8007340 <SD_CheckStatus+0x38>)
 8007314:	2201      	movs	r2, #1
 8007316:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007318:	f7ff ff6c 	bl	80071f4 <BSP_SD_GetCardState>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d107      	bne.n	8007332 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007322:	4b07      	ldr	r3, [pc, #28]	@ (8007340 <SD_CheckStatus+0x38>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	b2db      	uxtb	r3, r3
 8007328:	f023 0301 	bic.w	r3, r3, #1
 800732c:	b2da      	uxtb	r2, r3
 800732e:	4b04      	ldr	r3, [pc, #16]	@ (8007340 <SD_CheckStatus+0x38>)
 8007330:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007332:	4b03      	ldr	r3, [pc, #12]	@ (8007340 <SD_CheckStatus+0x38>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	b2db      	uxtb	r3, r3
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20000009 	.word	0x20000009

08007344 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800734e:	4b1c      	ldr	r3, [pc, #112]	@ (80073c0 <SD_initialize+0x7c>)
 8007350:	2201      	movs	r2, #1
 8007352:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8007354:	f003 ff9e 	bl	800b294 <osKernelGetState>
 8007358:	4603      	mov	r3, r0
 800735a:	2b02      	cmp	r3, #2
 800735c:	d129      	bne.n	80073b2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800735e:	f7ff fefd 	bl	800715c <BSP_SD_Init>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d107      	bne.n	8007378 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff ffcc 	bl	8007308 <SD_CheckStatus>
 8007370:	4603      	mov	r3, r0
 8007372:	461a      	mov	r2, r3
 8007374:	4b12      	ldr	r3, [pc, #72]	@ (80073c0 <SD_initialize+0x7c>)
 8007376:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007378:	4b11      	ldr	r3, [pc, #68]	@ (80073c0 <SD_initialize+0x7c>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b01      	cmp	r3, #1
 8007380:	d017      	beq.n	80073b2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8007382:	4b10      	ldr	r3, [pc, #64]	@ (80073c4 <SD_initialize+0x80>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d107      	bne.n	800739a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800738a:	2200      	movs	r2, #0
 800738c:	2102      	movs	r1, #2
 800738e:	200a      	movs	r0, #10
 8007390:	f004 f9ce 	bl	800b730 <osMessageQueueNew>
 8007394:	4603      	mov	r3, r0
 8007396:	4a0b      	ldr	r2, [pc, #44]	@ (80073c4 <SD_initialize+0x80>)
 8007398:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800739a:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <SD_initialize+0x80>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d107      	bne.n	80073b2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80073a2:	4b07      	ldr	r3, [pc, #28]	@ (80073c0 <SD_initialize+0x7c>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	f043 0301 	orr.w	r3, r3, #1
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	4b04      	ldr	r3, [pc, #16]	@ (80073c0 <SD_initialize+0x7c>)
 80073b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80073b2:	4b03      	ldr	r3, [pc, #12]	@ (80073c0 <SD_initialize+0x7c>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	b2db      	uxtb	r3, r3
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20000009 	.word	0x20000009
 80073c4:	20000748 	.word	0x20000748

080073c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4603      	mov	r3, r0
 80073d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff ff97 	bl	8007308 <SD_CheckStatus>
 80073da:	4603      	mov	r3, r0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60b9      	str	r1, [r7, #8]
 80073ec:	607a      	str	r2, [r7, #4]
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80073f8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80073fc:	f7ff ff66 	bl	80072cc <SD_CheckStatusWithTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	da01      	bge.n	800740a <SD_read+0x26>
  {
    return res;
 8007406:	7ffb      	ldrb	r3, [r7, #31]
 8007408:	e02f      	b.n	800746a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	68b8      	ldr	r0, [r7, #8]
 8007410:	f7ff febc 	bl	800718c <BSP_SD_ReadBlocks_DMA>
 8007414:	4603      	mov	r3, r0
 8007416:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8007418:	7fbb      	ldrb	r3, [r7, #30]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d124      	bne.n	8007468 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800741e:	4b15      	ldr	r3, [pc, #84]	@ (8007474 <SD_read+0x90>)
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	f107 0112 	add.w	r1, r7, #18
 8007426:	f247 5330 	movw	r3, #30000	@ 0x7530
 800742a:	2200      	movs	r2, #0
 800742c:	f004 fa54 	bl	800b8d8 <osMessageQueueGet>
 8007430:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d117      	bne.n	8007468 <SD_read+0x84>
 8007438:	8a7b      	ldrh	r3, [r7, #18]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d114      	bne.n	8007468 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800743e:	f003 ff71 	bl	800b324 <osKernelGetTickCount>
 8007442:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8007444:	e007      	b.n	8007456 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007446:	f7ff fed5 	bl	80071f4 <BSP_SD_GetCardState>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d102      	bne.n	8007456 <SD_read+0x72>
              {
                res = RES_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007454:	e008      	b.n	8007468 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8007456:	f003 ff65 	bl	800b324 <osKernelGetTickCount>
 800745a:	4602      	mov	r2, r0
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007464:	4293      	cmp	r3, r2
 8007466:	d9ee      	bls.n	8007446 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007468:	7ffb      	ldrb	r3, [r7, #31]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000748 	.word	0x20000748

08007478 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	607a      	str	r2, [r7, #4]
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800748c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007490:	f7ff ff1c 	bl	80072cc <SD_CheckStatusWithTimeout>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	da01      	bge.n	800749e <SD_write+0x26>
  {
    return res;
 800749a:	7ffb      	ldrb	r3, [r7, #31]
 800749c:	e02d      	b.n	80074fa <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	68b8      	ldr	r0, [r7, #8]
 80074a4:	f7ff fe8c 	bl	80071c0 <BSP_SD_WriteBlocks_DMA>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d124      	bne.n	80074f8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80074ae:	4b15      	ldr	r3, [pc, #84]	@ (8007504 <SD_write+0x8c>)
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	f107 0112 	add.w	r1, r7, #18
 80074b6:	f247 5330 	movw	r3, #30000	@ 0x7530
 80074ba:	2200      	movs	r2, #0
 80074bc:	f004 fa0c 	bl	800b8d8 <osMessageQueueGet>
 80074c0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d117      	bne.n	80074f8 <SD_write+0x80>
 80074c8:	8a7b      	ldrh	r3, [r7, #18]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d114      	bne.n	80074f8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80074ce:	f003 ff29 	bl	800b324 <osKernelGetTickCount>
 80074d2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80074d4:	e007      	b.n	80074e6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80074d6:	f7ff fe8d 	bl	80071f4 <BSP_SD_GetCardState>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <SD_write+0x6e>
          {
            res = RES_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	77fb      	strb	r3, [r7, #31]
            break;
 80074e4:	e008      	b.n	80074f8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80074e6:	f003 ff1d 	bl	800b324 <osKernelGetTickCount>
 80074ea:	4602      	mov	r2, r0
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d9ee      	bls.n	80074d6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 80074f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3720      	adds	r7, #32
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20000748 	.word	0x20000748

08007508 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08c      	sub	sp, #48	@ 0x30
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	603a      	str	r2, [r7, #0]
 8007512:	71fb      	strb	r3, [r7, #7]
 8007514:	460b      	mov	r3, r1
 8007516:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800751e:	4b25      	ldr	r3, [pc, #148]	@ (80075b4 <SD_ioctl+0xac>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <SD_ioctl+0x28>
 800752c:	2303      	movs	r3, #3
 800752e:	e03c      	b.n	80075aa <SD_ioctl+0xa2>

  switch (cmd)
 8007530:	79bb      	ldrb	r3, [r7, #6]
 8007532:	2b03      	cmp	r3, #3
 8007534:	d834      	bhi.n	80075a0 <SD_ioctl+0x98>
 8007536:	a201      	add	r2, pc, #4	@ (adr r2, 800753c <SD_ioctl+0x34>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	0800754d 	.word	0x0800754d
 8007540:	08007555 	.word	0x08007555
 8007544:	0800756d 	.word	0x0800756d
 8007548:	08007587 	.word	0x08007587
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007552:	e028      	b.n	80075a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007554:	f107 030c 	add.w	r3, r7, #12
 8007558:	4618      	mov	r0, r3
 800755a:	f7ff fe5b 	bl	8007214 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800755e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800756a:	e01c      	b.n	80075a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800756c:	f107 030c 	add.w	r3, r7, #12
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff fe4f 	bl	8007214 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	b29a      	uxth	r2, r3
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007584:	e00f      	b.n	80075a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007586:	f107 030c 	add.w	r3, r7, #12
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fe42 	bl	8007214 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007592:	0a5a      	lsrs	r2, r3, #9
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800759e:	e002      	b.n	80075a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80075a0:	2304      	movs	r3, #4
 80075a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80075a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3730      	adds	r7, #48	@ 0x30
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000009 	.word	0x20000009

080075b8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80075be:	2302      	movs	r3, #2
 80075c0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 80075c2:	4b05      	ldr	r3, [pc, #20]	@ (80075d8 <BSP_SD_WriteCpltCallback+0x20>)
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	1db9      	adds	r1, r7, #6
 80075c8:	2300      	movs	r3, #0
 80075ca:	2200      	movs	r2, #0
 80075cc:	f004 f924 	bl	800b818 <osMessageQueuePut>
#endif
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20000748 	.word	0x20000748

080075dc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80075e2:	2301      	movs	r3, #1
 80075e4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 80075e6:	4b05      	ldr	r3, [pc, #20]	@ (80075fc <BSP_SD_ReadCpltCallback+0x20>)
 80075e8:	6818      	ldr	r0, [r3, #0]
 80075ea:	1db9      	adds	r1, r7, #6
 80075ec:	2300      	movs	r3, #0
 80075ee:	2200      	movs	r2, #0
 80075f0:	f004 f912 	bl	800b818 <osMessageQueuePut>
#endif
}
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20000748 	.word	0x20000748

08007600 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	4a08      	ldr	r2, [pc, #32]	@ (8007630 <disk_status+0x30>)
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	79fa      	ldrb	r2, [r7, #7]
 8007618:	4905      	ldr	r1, [pc, #20]	@ (8007630 <disk_status+0x30>)
 800761a:	440a      	add	r2, r1
 800761c:	7a12      	ldrb	r2, [r2, #8]
 800761e:	4610      	mov	r0, r2
 8007620:	4798      	blx	r3
 8007622:	4603      	mov	r3, r0
 8007624:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007626:	7bfb      	ldrb	r3, [r7, #15]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20000774 	.word	0x20000774

08007634 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	4a0e      	ldr	r2, [pc, #56]	@ (8007680 <disk_initialize+0x4c>)
 8007646:	5cd3      	ldrb	r3, [r2, r3]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d114      	bne.n	8007676 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	4a0c      	ldr	r2, [pc, #48]	@ (8007680 <disk_initialize+0x4c>)
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	79fa      	ldrb	r2, [r7, #7]
 800765a:	4909      	ldr	r1, [pc, #36]	@ (8007680 <disk_initialize+0x4c>)
 800765c:	440a      	add	r2, r1
 800765e:	7a12      	ldrb	r2, [r2, #8]
 8007660:	4610      	mov	r0, r2
 8007662:	4798      	blx	r3
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d103      	bne.n	8007676 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800766e:	79fb      	ldrb	r3, [r7, #7]
 8007670:	4a03      	ldr	r2, [pc, #12]	@ (8007680 <disk_initialize+0x4c>)
 8007672:	2101      	movs	r1, #1
 8007674:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007676:	7bfb      	ldrb	r3, [r7, #15]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000774 	.word	0x20000774

08007684 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007684:	b590      	push	{r4, r7, lr}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	4a0a      	ldr	r2, [pc, #40]	@ (80076c0 <disk_read+0x3c>)
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	689c      	ldr	r4, [r3, #8]
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	4a07      	ldr	r2, [pc, #28]	@ (80076c0 <disk_read+0x3c>)
 80076a4:	4413      	add	r3, r2
 80076a6:	7a18      	ldrb	r0, [r3, #8]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	68b9      	ldr	r1, [r7, #8]
 80076ae:	47a0      	blx	r4
 80076b0:	4603      	mov	r3, r0
 80076b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd90      	pop	{r4, r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000774 	.word	0x20000774

080076c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80076c4:	b590      	push	{r4, r7, lr}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	607a      	str	r2, [r7, #4]
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	4603      	mov	r3, r0
 80076d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007700 <disk_write+0x3c>)
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	68dc      	ldr	r4, [r3, #12]
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	4a07      	ldr	r2, [pc, #28]	@ (8007700 <disk_write+0x3c>)
 80076e4:	4413      	add	r3, r2
 80076e6:	7a18      	ldrb	r0, [r3, #8]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	47a0      	blx	r4
 80076f0:	4603      	mov	r3, r0
 80076f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	371c      	adds	r7, #28
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd90      	pop	{r4, r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000774 	.word	0x20000774

08007704 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	603a      	str	r2, [r7, #0]
 800770e:	71fb      	strb	r3, [r7, #7]
 8007710:	460b      	mov	r3, r1
 8007712:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	4a09      	ldr	r2, [pc, #36]	@ (800773c <disk_ioctl+0x38>)
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	79fa      	ldrb	r2, [r7, #7]
 8007722:	4906      	ldr	r1, [pc, #24]	@ (800773c <disk_ioctl+0x38>)
 8007724:	440a      	add	r2, r1
 8007726:	7a10      	ldrb	r0, [r2, #8]
 8007728:	79b9      	ldrb	r1, [r7, #6]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4798      	blx	r3
 800772e:	4603      	mov	r3, r0
 8007730:	73fb      	strb	r3, [r7, #15]
  return res;
 8007732:	7bfb      	ldrb	r3, [r7, #15]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20000774 	.word	0x20000774

08007740 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3301      	adds	r3, #1
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007750:	89fb      	ldrh	r3, [r7, #14]
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	b21a      	sxth	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	b21b      	sxth	r3, r3
 800775c:	4313      	orrs	r3, r2
 800775e:	b21b      	sxth	r3, r3
 8007760:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007762:	89fb      	ldrh	r3, [r7, #14]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	3303      	adds	r3, #3
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	021b      	lsls	r3, r3, #8
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	3202      	adds	r2, #2
 8007788:	7812      	ldrb	r2, [r2, #0]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	021b      	lsls	r3, r3, #8
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	3201      	adds	r2, #1
 8007796:	7812      	ldrb	r2, [r2, #0]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	7812      	ldrb	r2, [r2, #0]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80077a8:	68fb      	ldr	r3, [r7, #12]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	887a      	ldrh	r2, [r7, #2]
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	887b      	ldrh	r3, [r7, #2]
 80077d0:	0a1b      	lsrs	r3, r3, #8
 80077d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	607a      	str	r2, [r7, #4]
 80077da:	887a      	ldrh	r2, [r7, #2]
 80077dc:	b2d2      	uxtb	r2, r2
 80077de:	701a      	strb	r2, [r3, #0]
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	0a1b      	lsrs	r3, r3, #8
 8007806:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	607a      	str	r2, [r7, #4]
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	b2d2      	uxtb	r2, r2
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	0a1b      	lsrs	r3, r3, #8
 8007818:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	b2d2      	uxtb	r2, r2
 8007824:	701a      	strb	r2, [r3, #0]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	0a1b      	lsrs	r3, r3, #8
 800782a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	607a      	str	r2, [r7, #4]
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	701a      	strb	r2, [r3, #0]
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00d      	beq.n	800787a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	1c53      	adds	r3, r2, #1
 8007862:	613b      	str	r3, [r7, #16]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	1c59      	adds	r1, r3, #1
 8007868:	6179      	str	r1, [r7, #20]
 800786a:	7812      	ldrb	r2, [r2, #0]
 800786c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3b01      	subs	r3, #1
 8007872:	607b      	str	r3, [r7, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1f1      	bne.n	800785e <mem_cpy+0x1a>
	}
}
 800787a:	bf00      	nop
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007886:	b480      	push	{r7}
 8007888:	b087      	sub	sp, #28
 800788a:	af00      	add	r7, sp, #0
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	617a      	str	r2, [r7, #20]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	607b      	str	r3, [r7, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1f3      	bne.n	8007896 <mem_set+0x10>
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	371c      	adds	r7, #28
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80078bc:	b480      	push	{r7}
 80078be:	b089      	sub	sp, #36	@ 0x24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	61fb      	str	r3, [r7, #28]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	61fa      	str	r2, [r7, #28]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	4619      	mov	r1, r3
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	61ba      	str	r2, [r7, #24]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	1acb      	subs	r3, r1, r3
 80078e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	607b      	str	r3, [r7, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <mem_cmp+0x40>
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0eb      	beq.n	80078d4 <mem_cmp+0x18>

	return r;
 80078fc:	697b      	ldr	r3, [r7, #20]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3724      	adds	r7, #36	@ 0x24
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007914:	e002      	b.n	800791c <chk_chr+0x12>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3301      	adds	r3, #1
 800791a:	607b      	str	r3, [r7, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <chk_chr+0x26>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	461a      	mov	r2, r3
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	4293      	cmp	r3, r2
 800792e:	d1f2      	bne.n	8007916 <chk_chr+0xc>
	return *str;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	781b      	ldrb	r3, [r3, #0]
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d009      	beq.n	8007962 <lock_fs+0x22>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	4618      	mov	r0, r3
 8007954:	f003 fc0f 	bl	800b176 <ff_req_grant>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <lock_fs+0x22>
 800795e:	2301      	movs	r3, #1
 8007960:	e000      	b.n	8007964 <lock_fs+0x24>
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00d      	beq.n	800799a <unlock_fs+0x2e>
 800797e:	78fb      	ldrb	r3, [r7, #3]
 8007980:	2b0c      	cmp	r3, #12
 8007982:	d00a      	beq.n	800799a <unlock_fs+0x2e>
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	2b0b      	cmp	r3, #11
 8007988:	d007      	beq.n	800799a <unlock_fs+0x2e>
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	2b0f      	cmp	r3, #15
 800798e:	d004      	beq.n	800799a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	4618      	mov	r0, r3
 8007996:	f003 fc03 	bl	800b1a0 <ff_rel_grant>
	}
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80079ae:	2300      	movs	r3, #0
 80079b0:	60bb      	str	r3, [r7, #8]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	60fb      	str	r3, [r7, #12]
 80079b6:	e029      	b.n	8007a0c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80079b8:	4a27      	ldr	r2, [pc, #156]	@ (8007a58 <chk_lock+0xb4>)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	4413      	add	r3, r2
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01d      	beq.n	8007a02 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80079c6:	4a24      	ldr	r2, [pc, #144]	@ (8007a58 <chk_lock+0xb4>)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	4413      	add	r3, r2
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d116      	bne.n	8007a06 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80079d8:	4a1f      	ldr	r2, [pc, #124]	@ (8007a58 <chk_lock+0xb4>)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	4413      	add	r3, r2
 80079e0:	3304      	adds	r3, #4
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d10c      	bne.n	8007a06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80079ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007a58 <chk_lock+0xb4>)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	011b      	lsls	r3, r3, #4
 80079f2:	4413      	add	r3, r2
 80079f4:	3308      	adds	r3, #8
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d102      	bne.n	8007a06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007a00:	e007      	b.n	8007a12 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007a02:	2301      	movs	r3, #1
 8007a04:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d9d2      	bls.n	80079b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d109      	bne.n	8007a2c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <chk_lock+0x80>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d101      	bne.n	8007a28 <chk_lock+0x84>
 8007a24:	2300      	movs	r3, #0
 8007a26:	e010      	b.n	8007a4a <chk_lock+0xa6>
 8007a28:	2312      	movs	r3, #18
 8007a2a:	e00e      	b.n	8007a4a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d108      	bne.n	8007a44 <chk_lock+0xa0>
 8007a32:	4a09      	ldr	r2, [pc, #36]	@ (8007a58 <chk_lock+0xb4>)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	4413      	add	r3, r2
 8007a3a:	330c      	adds	r3, #12
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a42:	d101      	bne.n	8007a48 <chk_lock+0xa4>
 8007a44:	2310      	movs	r3, #16
 8007a46:	e000      	b.n	8007a4a <chk_lock+0xa6>
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20000754 	.word	0x20000754

08007a5c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007a62:	2300      	movs	r3, #0
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	e002      	b.n	8007a6e <enq_lock+0x12>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	607b      	str	r3, [r7, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d806      	bhi.n	8007a82 <enq_lock+0x26>
 8007a74:	4a09      	ldr	r2, [pc, #36]	@ (8007a9c <enq_lock+0x40>)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	4413      	add	r3, r2
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1f2      	bne.n	8007a68 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	bf14      	ite	ne
 8007a88:	2301      	movne	r3, #1
 8007a8a:	2300      	moveq	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	20000754 	.word	0x20000754

08007aa0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	e01f      	b.n	8007af0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007ab0:	4a41      	ldr	r2, [pc, #260]	@ (8007bb8 <inc_lock+0x118>)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	4413      	add	r3, r2
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d113      	bne.n	8007aea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8007bb8 <inc_lock+0x118>)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	011b      	lsls	r3, r3, #4
 8007ac8:	4413      	add	r3, r2
 8007aca:	3304      	adds	r3, #4
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d109      	bne.n	8007aea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007ad6:	4a38      	ldr	r2, [pc, #224]	@ (8007bb8 <inc_lock+0x118>)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	4413      	add	r3, r2
 8007ade:	3308      	adds	r3, #8
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d006      	beq.n	8007af8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3301      	adds	r3, #1
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d9dc      	bls.n	8007ab0 <inc_lock+0x10>
 8007af6:	e000      	b.n	8007afa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007af8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d132      	bne.n	8007b66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e002      	b.n	8007b0c <inc_lock+0x6c>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d806      	bhi.n	8007b20 <inc_lock+0x80>
 8007b12:	4a29      	ldr	r2, [pc, #164]	@ (8007bb8 <inc_lock+0x118>)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	011b      	lsls	r3, r3, #4
 8007b18:	4413      	add	r3, r2
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1f2      	bne.n	8007b06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d101      	bne.n	8007b2a <inc_lock+0x8a>
 8007b26:	2300      	movs	r3, #0
 8007b28:	e040      	b.n	8007bac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	4922      	ldr	r1, [pc, #136]	@ (8007bb8 <inc_lock+0x118>)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	011b      	lsls	r3, r3, #4
 8007b34:	440b      	add	r3, r1
 8007b36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	491e      	ldr	r1, [pc, #120]	@ (8007bb8 <inc_lock+0x118>)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	011b      	lsls	r3, r3, #4
 8007b42:	440b      	add	r3, r1
 8007b44:	3304      	adds	r3, #4
 8007b46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	695a      	ldr	r2, [r3, #20]
 8007b4c:	491a      	ldr	r1, [pc, #104]	@ (8007bb8 <inc_lock+0x118>)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	440b      	add	r3, r1
 8007b54:	3308      	adds	r3, #8
 8007b56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007b58:	4a17      	ldr	r2, [pc, #92]	@ (8007bb8 <inc_lock+0x118>)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	4413      	add	r3, r2
 8007b60:	330c      	adds	r3, #12
 8007b62:	2200      	movs	r2, #0
 8007b64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d009      	beq.n	8007b80 <inc_lock+0xe0>
 8007b6c:	4a12      	ldr	r2, [pc, #72]	@ (8007bb8 <inc_lock+0x118>)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	4413      	add	r3, r2
 8007b74:	330c      	adds	r3, #12
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <inc_lock+0xe0>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e015      	b.n	8007bac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d108      	bne.n	8007b98 <inc_lock+0xf8>
 8007b86:	4a0c      	ldr	r2, [pc, #48]	@ (8007bb8 <inc_lock+0x118>)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	4413      	add	r3, r2
 8007b8e:	330c      	adds	r3, #12
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	e001      	b.n	8007b9c <inc_lock+0xfc>
 8007b98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b9c:	4906      	ldr	r1, [pc, #24]	@ (8007bb8 <inc_lock+0x118>)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	440b      	add	r3, r1
 8007ba4:	330c      	adds	r3, #12
 8007ba6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3301      	adds	r3, #1
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	20000754 	.word	0x20000754

08007bbc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	607b      	str	r3, [r7, #4]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d825      	bhi.n	8007c1c <dec_lock+0x60>
		n = Files[i].ctr;
 8007bd0:	4a17      	ldr	r2, [pc, #92]	@ (8007c30 <dec_lock+0x74>)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	4413      	add	r3, r2
 8007bd8:	330c      	adds	r3, #12
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007bde:	89fb      	ldrh	r3, [r7, #14]
 8007be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007be4:	d101      	bne.n	8007bea <dec_lock+0x2e>
 8007be6:	2300      	movs	r3, #0
 8007be8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007bea:	89fb      	ldrh	r3, [r7, #14]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <dec_lock+0x3a>
 8007bf0:	89fb      	ldrh	r3, [r7, #14]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8007c30 <dec_lock+0x74>)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	4413      	add	r3, r2
 8007bfe:	330c      	adds	r3, #12
 8007c00:	89fa      	ldrh	r2, [r7, #14]
 8007c02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007c04:	89fb      	ldrh	r3, [r7, #14]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d105      	bne.n	8007c16 <dec_lock+0x5a>
 8007c0a:	4a09      	ldr	r2, [pc, #36]	@ (8007c30 <dec_lock+0x74>)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	4413      	add	r3, r2
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	737b      	strb	r3, [r7, #13]
 8007c1a:	e001      	b.n	8007c20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007c20:	7b7b      	ldrb	r3, [r7, #13]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	20000754 	.word	0x20000754

08007c34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	e010      	b.n	8007c64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007c42:	4a0d      	ldr	r2, [pc, #52]	@ (8007c78 <clear_lock+0x44>)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	4413      	add	r3, r2
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d105      	bne.n	8007c5e <clear_lock+0x2a>
 8007c52:	4a09      	ldr	r2, [pc, #36]	@ (8007c78 <clear_lock+0x44>)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	4413      	add	r3, r2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3301      	adds	r3, #1
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d9eb      	bls.n	8007c42 <clear_lock+0xe>
	}
}
 8007c6a:	bf00      	nop
 8007c6c:	bf00      	nop
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	20000754 	.word	0x20000754

08007c7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	78db      	ldrb	r3, [r3, #3]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d034      	beq.n	8007cfa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	7858      	ldrb	r0, [r3, #1]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	f7ff fd0e 	bl	80076c4 <disk_write>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d002      	beq.n	8007cb4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	73fb      	strb	r3, [r7, #15]
 8007cb2:	e022      	b.n	8007cfa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	1ad2      	subs	r2, r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d217      	bcs.n	8007cfa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	789b      	ldrb	r3, [r3, #2]
 8007cce:	613b      	str	r3, [r7, #16]
 8007cd0:	e010      	b.n	8007cf4 <sync_window+0x78>
					wsect += fs->fsize;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	4413      	add	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	7858      	ldrb	r0, [r3, #1]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	f7ff fceb 	bl	80076c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	613b      	str	r3, [r7, #16]
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d8eb      	bhi.n	8007cd2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d01b      	beq.n	8007d54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ffad 	bl	8007c7c <sync_window>
 8007d22:	4603      	mov	r3, r0
 8007d24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d113      	bne.n	8007d54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7858      	ldrb	r0, [r3, #1]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007d36:	2301      	movs	r3, #1
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	f7ff fca3 	bl	8007684 <disk_read>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d004      	beq.n	8007d4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007d44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7ff ff87 	bl	8007c7c <sync_window>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d159      	bne.n	8007e2c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d149      	bne.n	8007e14 <sync_fs+0xb4>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	791b      	ldrb	r3, [r3, #4]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d145      	bne.n	8007e14 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	899b      	ldrh	r3, [r3, #12]
 8007d92:	461a      	mov	r2, r3
 8007d94:	2100      	movs	r1, #0
 8007d96:	f7ff fd76 	bl	8007886 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	333c      	adds	r3, #60	@ 0x3c
 8007d9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007da2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff fd05 	bl	80077b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	333c      	adds	r3, #60	@ 0x3c
 8007db0:	4921      	ldr	r1, [pc, #132]	@ (8007e38 <sync_fs+0xd8>)
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff fd1a 	bl	80077ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	333c      	adds	r3, #60	@ 0x3c
 8007dbc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007dc0:	491e      	ldr	r1, [pc, #120]	@ (8007e3c <sync_fs+0xdc>)
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7ff fd12 	bl	80077ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	333c      	adds	r3, #60	@ 0x3c
 8007dcc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	f7ff fd08 	bl	80077ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	333c      	adds	r3, #60	@ 0x3c
 8007de0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	4619      	mov	r1, r3
 8007dea:	4610      	mov	r0, r2
 8007dec:	f7ff fcfe 	bl	80077ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	7858      	ldrb	r0, [r3, #1]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e08:	2301      	movs	r3, #1
 8007e0a:	f7ff fc5b 	bl	80076c4 <disk_write>
			fs->fsi_flag = 0;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff fc71 	bl	8007704 <disk_ioctl>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <sync_fs+0xcc>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	41615252 	.word	0x41615252
 8007e3c:	61417272 	.word	0x61417272

08007e40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	3b02      	subs	r3, #2
 8007e4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	3b02      	subs	r3, #2
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d301      	bcc.n	8007e60 <clust2sect+0x20>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e008      	b.n	8007e72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	895b      	ldrh	r3, [r3, #10]
 8007e64:	461a      	mov	r2, r3
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	fb03 f202 	mul.w	r2, r3, r2
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e70:	4413      	add	r3, r2
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b086      	sub	sp, #24
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d904      	bls.n	8007e9e <get_fat+0x20>
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d302      	bcc.n	8007ea4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	617b      	str	r3, [r7, #20]
 8007ea2:	e0ba      	b.n	800801a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007ea4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ea8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	f000 8082 	beq.w	8007fb8 <get_fat+0x13a>
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	f300 80a6 	bgt.w	8008006 <get_fat+0x188>
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d002      	beq.n	8007ec4 <get_fat+0x46>
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d055      	beq.n	8007f6e <get_fat+0xf0>
 8007ec2:	e0a0      	b.n	8008006 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	085b      	lsrs	r3, r3, #1
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	899b      	ldrh	r3, [r3, #12]
 8007eda:	4619      	mov	r1, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ee2:	4413      	add	r3, r2
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6938      	ldr	r0, [r7, #16]
 8007ee8:	f7ff ff0c 	bl	8007d04 <move_window>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f040 808c 	bne.w	800800c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	60fa      	str	r2, [r7, #12]
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	8992      	ldrh	r2, [r2, #12]
 8007efe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f02:	fb01 f202 	mul.w	r2, r1, r2
 8007f06:	1a9b      	subs	r3, r3, r2
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f10:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	899b      	ldrh	r3, [r3, #12]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f22:	4413      	add	r3, r2
 8007f24:	4619      	mov	r1, r3
 8007f26:	6938      	ldr	r0, [r7, #16]
 8007f28:	f7ff feec 	bl	8007d04 <move_window>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d16e      	bne.n	8008010 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	899b      	ldrh	r3, [r3, #12]
 8007f36:	461a      	mov	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f3e:	fb01 f202 	mul.w	r2, r1, r2
 8007f42:	1a9b      	subs	r3, r3, r2
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	4413      	add	r3, r2
 8007f48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f4c:	021b      	lsls	r3, r3, #8
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <get_fat+0xe6>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	091b      	lsrs	r3, r3, #4
 8007f62:	e002      	b.n	8007f6a <get_fat+0xec>
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f6a:	617b      	str	r3, [r7, #20]
			break;
 8007f6c:	e055      	b.n	800801a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	899b      	ldrh	r3, [r3, #12]
 8007f76:	085b      	lsrs	r3, r3, #1
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f82:	4413      	add	r3, r2
 8007f84:	4619      	mov	r1, r3
 8007f86:	6938      	ldr	r0, [r7, #16]
 8007f88:	f7ff febc 	bl	8007d04 <move_window>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d140      	bne.n	8008014 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	8992      	ldrh	r2, [r2, #12]
 8007fa0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fa4:	fb00 f202 	mul.w	r2, r0, r2
 8007fa8:	1a9b      	subs	r3, r3, r2
 8007faa:	440b      	add	r3, r1
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff fbc7 	bl	8007740 <ld_word>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	617b      	str	r3, [r7, #20]
			break;
 8007fb6:	e030      	b.n	800801a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	899b      	ldrh	r3, [r3, #12]
 8007fc0:	089b      	lsrs	r3, r3, #2
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fcc:	4413      	add	r3, r2
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6938      	ldr	r0, [r7, #16]
 8007fd2:	f7ff fe97 	bl	8007d04 <move_window>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d11d      	bne.n	8008018 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	8992      	ldrh	r2, [r2, #12]
 8007fea:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fee:	fb00 f202 	mul.w	r2, r0, r2
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	440b      	add	r3, r1
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff fbba 	bl	8007770 <ld_dword>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008002:	617b      	str	r3, [r7, #20]
			break;
 8008004:	e009      	b.n	800801a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008006:	2301      	movs	r3, #1
 8008008:	617b      	str	r3, [r7, #20]
 800800a:	e006      	b.n	800801a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800800c:	bf00      	nop
 800800e:	e004      	b.n	800801a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008010:	bf00      	nop
 8008012:	e002      	b.n	800801a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008014:	bf00      	nop
 8008016:	e000      	b.n	800801a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008018:	bf00      	nop
		}
	}

	return val;
 800801a:	697b      	ldr	r3, [r7, #20]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008024:	b590      	push	{r4, r7, lr}
 8008026:	b089      	sub	sp, #36	@ 0x24
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008030:	2302      	movs	r3, #2
 8008032:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b01      	cmp	r3, #1
 8008038:	f240 8109 	bls.w	800824e <put_fat+0x22a>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	429a      	cmp	r2, r3
 8008044:	f080 8103 	bcs.w	800824e <put_fat+0x22a>
		switch (fs->fs_type) {
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b03      	cmp	r3, #3
 800804e:	f000 80b6 	beq.w	80081be <put_fat+0x19a>
 8008052:	2b03      	cmp	r3, #3
 8008054:	f300 80fb 	bgt.w	800824e <put_fat+0x22a>
 8008058:	2b01      	cmp	r3, #1
 800805a:	d003      	beq.n	8008064 <put_fat+0x40>
 800805c:	2b02      	cmp	r3, #2
 800805e:	f000 8083 	beq.w	8008168 <put_fat+0x144>
 8008062:	e0f4      	b.n	800824e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	61bb      	str	r3, [r7, #24]
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	085b      	lsrs	r3, r3, #1
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	4413      	add	r3, r2
 8008070:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	899b      	ldrh	r3, [r3, #12]
 800807a:	4619      	mov	r1, r3
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008082:	4413      	add	r3, r2
 8008084:	4619      	mov	r1, r3
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f7ff fe3c 	bl	8007d04 <move_window>
 800808c:	4603      	mov	r3, r0
 800808e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008090:	7ffb      	ldrb	r3, [r7, #31]
 8008092:	2b00      	cmp	r3, #0
 8008094:	f040 80d4 	bne.w	8008240 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	61ba      	str	r2, [r7, #24]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	8992      	ldrh	r2, [r2, #12]
 80080a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80080ac:	fb00 f202 	mul.w	r2, r0, r2
 80080b0:	1a9b      	subs	r3, r3, r2
 80080b2:	440b      	add	r3, r1
 80080b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00d      	beq.n	80080dc <put_fat+0xb8>
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	b25b      	sxtb	r3, r3
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	b25a      	sxtb	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	b25b      	sxtb	r3, r3
 80080d4:	4313      	orrs	r3, r2
 80080d6:	b25b      	sxtb	r3, r3
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	e001      	b.n	80080e0 <put_fat+0xbc>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2201      	movs	r2, #1
 80080e8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	899b      	ldrh	r3, [r3, #12]
 80080f2:	4619      	mov	r1, r3
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80080fa:	4413      	add	r3, r2
 80080fc:	4619      	mov	r1, r3
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7ff fe00 	bl	8007d04 <move_window>
 8008104:	4603      	mov	r3, r0
 8008106:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008108:	7ffb      	ldrb	r3, [r7, #31]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f040 809a 	bne.w	8008244 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	899b      	ldrh	r3, [r3, #12]
 800811a:	461a      	mov	r2, r3
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008122:	fb00 f202 	mul.w	r2, r0, r2
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	440b      	add	r3, r1
 800812a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <put_fat+0x11a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	091b      	lsrs	r3, r3, #4
 800813a:	b2db      	uxtb	r3, r3
 800813c:	e00e      	b.n	800815c <put_fat+0x138>
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	b25b      	sxtb	r3, r3
 8008144:	f023 030f 	bic.w	r3, r3, #15
 8008148:	b25a      	sxtb	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	0a1b      	lsrs	r3, r3, #8
 800814e:	b25b      	sxtb	r3, r3
 8008150:	f003 030f 	and.w	r3, r3, #15
 8008154:	b25b      	sxtb	r3, r3
 8008156:	4313      	orrs	r3, r2
 8008158:	b25b      	sxtb	r3, r3
 800815a:	b2db      	uxtb	r3, r3
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2201      	movs	r2, #1
 8008164:	70da      	strb	r2, [r3, #3]
			break;
 8008166:	e072      	b.n	800824e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	899b      	ldrh	r3, [r3, #12]
 8008170:	085b      	lsrs	r3, r3, #1
 8008172:	b29b      	uxth	r3, r3
 8008174:	4619      	mov	r1, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	fbb3 f3f1 	udiv	r3, r3, r1
 800817c:	4413      	add	r3, r2
 800817e:	4619      	mov	r1, r3
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f7ff fdbf 	bl	8007d04 <move_window>
 8008186:	4603      	mov	r3, r0
 8008188:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800818a:	7ffb      	ldrb	r3, [r7, #31]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d15b      	bne.n	8008248 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	8992      	ldrh	r2, [r2, #12]
 800819e:	fbb3 f0f2 	udiv	r0, r3, r2
 80081a2:	fb00 f202 	mul.w	r2, r0, r2
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	440b      	add	r3, r1
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	b292      	uxth	r2, r2
 80081ae:	4611      	mov	r1, r2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff fb00 	bl	80077b6 <st_word>
			fs->wflag = 1;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2201      	movs	r2, #1
 80081ba:	70da      	strb	r2, [r3, #3]
			break;
 80081bc:	e047      	b.n	800824e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	899b      	ldrh	r3, [r3, #12]
 80081c6:	089b      	lsrs	r3, r3, #2
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	4619      	mov	r1, r3
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80081d2:	4413      	add	r3, r2
 80081d4:	4619      	mov	r1, r3
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f7ff fd94 	bl	8007d04 <move_window>
 80081dc:	4603      	mov	r3, r0
 80081de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80081e0:	7ffb      	ldrb	r3, [r7, #31]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d132      	bne.n	800824c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	8992      	ldrh	r2, [r2, #12]
 80081fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80081fe:	fb00 f202 	mul.w	r2, r0, r2
 8008202:	1a9b      	subs	r3, r3, r2
 8008204:	440b      	add	r3, r1
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff fab2 	bl	8007770 <ld_dword>
 800820c:	4603      	mov	r3, r0
 800820e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008212:	4323      	orrs	r3, r4
 8008214:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	8992      	ldrh	r2, [r2, #12]
 8008224:	fbb3 f0f2 	udiv	r0, r3, r2
 8008228:	fb00 f202 	mul.w	r2, r0, r2
 800822c:	1a9b      	subs	r3, r3, r2
 800822e:	440b      	add	r3, r1
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff fada 	bl	80077ec <st_dword>
			fs->wflag = 1;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2201      	movs	r2, #1
 800823c:	70da      	strb	r2, [r3, #3]
			break;
 800823e:	e006      	b.n	800824e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008240:	bf00      	nop
 8008242:	e004      	b.n	800824e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008244:	bf00      	nop
 8008246:	e002      	b.n	800824e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008248:	bf00      	nop
 800824a:	e000      	b.n	800824e <put_fat+0x22a>
			if (res != FR_OK) break;
 800824c:	bf00      	nop
		}
	}
	return res;
 800824e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3724      	adds	r7, #36	@ 0x24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd90      	pop	{r4, r7, pc}

08008258 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d904      	bls.n	800827e <remove_chain+0x26>
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	429a      	cmp	r2, r3
 800827c:	d301      	bcc.n	8008282 <remove_chain+0x2a>
 800827e:	2302      	movs	r3, #2
 8008280:	e04b      	b.n	800831a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00c      	beq.n	80082a2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008288:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	69b8      	ldr	r0, [r7, #24]
 8008290:	f7ff fec8 	bl	8008024 <put_fat>
 8008294:	4603      	mov	r3, r0
 8008296:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008298:	7ffb      	ldrb	r3, [r7, #31]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <remove_chain+0x4a>
 800829e:	7ffb      	ldrb	r3, [r7, #31]
 80082a0:	e03b      	b.n	800831a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80082a2:	68b9      	ldr	r1, [r7, #8]
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff fdea 	bl	8007e7e <get_fat>
 80082aa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d031      	beq.n	8008316 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d101      	bne.n	80082bc <remove_chain+0x64>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e02e      	b.n	800831a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082c2:	d101      	bne.n	80082c8 <remove_chain+0x70>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e028      	b.n	800831a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80082c8:	2200      	movs	r2, #0
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	69b8      	ldr	r0, [r7, #24]
 80082ce:	f7ff fea9 	bl	8008024 <put_fat>
 80082d2:	4603      	mov	r3, r0
 80082d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80082d6:	7ffb      	ldrb	r3, [r7, #31]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <remove_chain+0x88>
 80082dc:	7ffb      	ldrb	r3, [r7, #31]
 80082de:	e01c      	b.n	800831a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	69da      	ldr	r2, [r3, #28]
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	3b02      	subs	r3, #2
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d20b      	bcs.n	8008306 <remove_chain+0xae>
			fs->free_clst++;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	791b      	ldrb	r3, [r3, #4]
 80082fc:	f043 0301 	orr.w	r3, r3, #1
 8008300:	b2da      	uxtb	r2, r3
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	429a      	cmp	r2, r3
 8008312:	d3c6      	bcc.n	80082a2 <remove_chain+0x4a>
 8008314:	e000      	b.n	8008318 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008316:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3720      	adds	r7, #32
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b088      	sub	sp, #32
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10d      	bne.n	8008354 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d004      	beq.n	800834e <create_chain+0x2c>
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	429a      	cmp	r2, r3
 800834c:	d31b      	bcc.n	8008386 <create_chain+0x64>
 800834e:	2301      	movs	r3, #1
 8008350:	61bb      	str	r3, [r7, #24]
 8008352:	e018      	b.n	8008386 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff fd91 	bl	8007e7e <get_fat>
 800835c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d801      	bhi.n	8008368 <create_chain+0x46>
 8008364:	2301      	movs	r3, #1
 8008366:	e070      	b.n	800844a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800836e:	d101      	bne.n	8008374 <create_chain+0x52>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	e06a      	b.n	800844a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	429a      	cmp	r2, r3
 800837c:	d201      	bcs.n	8008382 <create_chain+0x60>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	e063      	b.n	800844a <create_chain+0x128>
		scl = clst;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	3301      	adds	r3, #1
 800838e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	69fa      	ldr	r2, [r7, #28]
 8008396:	429a      	cmp	r2, r3
 8008398:	d307      	bcc.n	80083aa <create_chain+0x88>
				ncl = 2;
 800839a:	2302      	movs	r3, #2
 800839c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800839e:	69fa      	ldr	r2, [r7, #28]
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d901      	bls.n	80083aa <create_chain+0x88>
 80083a6:	2300      	movs	r3, #0
 80083a8:	e04f      	b.n	800844a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80083aa:	69f9      	ldr	r1, [r7, #28]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7ff fd66 	bl	8007e7e <get_fat>
 80083b2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00e      	beq.n	80083d8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d003      	beq.n	80083c8 <create_chain+0xa6>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083c6:	d101      	bne.n	80083cc <create_chain+0xaa>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	e03e      	b.n	800844a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d1da      	bne.n	800838a <create_chain+0x68>
 80083d4:	2300      	movs	r3, #0
 80083d6:	e038      	b.n	800844a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80083d8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80083da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083de:	69f9      	ldr	r1, [r7, #28]
 80083e0:	6938      	ldr	r0, [r7, #16]
 80083e2:	f7ff fe1f 	bl	8008024 <put_fat>
 80083e6:	4603      	mov	r3, r0
 80083e8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <create_chain+0xe2>
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d006      	beq.n	8008404 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6938      	ldr	r0, [r7, #16]
 80083fc:	f7ff fe12 	bl	8008024 <put_fat>
 8008400:	4603      	mov	r3, r0
 8008402:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d116      	bne.n	8008438 <create_chain+0x116>
		fs->last_clst = ncl;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	69fa      	ldr	r2, [r7, #28]
 800840e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	69da      	ldr	r2, [r3, #28]
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	3b02      	subs	r3, #2
 800841a:	429a      	cmp	r2, r3
 800841c:	d804      	bhi.n	8008428 <create_chain+0x106>
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	1e5a      	subs	r2, r3, #1
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	791b      	ldrb	r3, [r3, #4]
 800842c:	f043 0301 	orr.w	r3, r3, #1
 8008430:	b2da      	uxtb	r2, r3
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	711a      	strb	r2, [r3, #4]
 8008436:	e007      	b.n	8008448 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d102      	bne.n	8008444 <create_chain+0x122>
 800843e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008442:	e000      	b.n	8008446 <create_chain+0x124>
 8008444:	2301      	movs	r3, #1
 8008446:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008448:	69fb      	ldr	r3, [r7, #28]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008452:	b480      	push	{r7}
 8008454:	b087      	sub	sp, #28
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008466:	3304      	adds	r3, #4
 8008468:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	899b      	ldrh	r3, [r3, #12]
 800846e:	461a      	mov	r2, r3
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	fbb3 f3f2 	udiv	r3, r3, r2
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	8952      	ldrh	r2, [r2, #10]
 800847a:	fbb3 f3f2 	udiv	r3, r3, r2
 800847e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	1d1a      	adds	r2, r3, #4
 8008484:	613a      	str	r2, [r7, #16]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <clmt_clust+0x42>
 8008490:	2300      	movs	r3, #0
 8008492:	e010      	b.n	80084b6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	429a      	cmp	r2, r3
 800849a:	d307      	bcc.n	80084ac <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	617b      	str	r3, [r7, #20]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	3304      	adds	r3, #4
 80084a8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80084aa:	e7e9      	b.n	8008480 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80084ac:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	4413      	add	r3, r2
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b086      	sub	sp, #24
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084d8:	d204      	bcs.n	80084e4 <dir_sdi+0x22>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	f003 031f 	and.w	r3, r3, #31
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80084e4:	2302      	movs	r3, #2
 80084e6:	e071      	b.n	80085cc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <dir_sdi+0x46>
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d902      	bls.n	8008508 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008506:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10c      	bne.n	8008528 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	095b      	lsrs	r3, r3, #5
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	8912      	ldrh	r2, [r2, #8]
 8008516:	4293      	cmp	r3, r2
 8008518:	d301      	bcc.n	800851e <dir_sdi+0x5c>
 800851a:	2302      	movs	r3, #2
 800851c:	e056      	b.n	80085cc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	61da      	str	r2, [r3, #28]
 8008526:	e02d      	b.n	8008584 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	895b      	ldrh	r3, [r3, #10]
 800852c:	461a      	mov	r2, r3
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	899b      	ldrh	r3, [r3, #12]
 8008532:	fb02 f303 	mul.w	r3, r2, r3
 8008536:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008538:	e019      	b.n	800856e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6979      	ldr	r1, [r7, #20]
 800853e:	4618      	mov	r0, r3
 8008540:	f7ff fc9d 	bl	8007e7e <get_fat>
 8008544:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800854c:	d101      	bne.n	8008552 <dir_sdi+0x90>
 800854e:	2301      	movs	r3, #1
 8008550:	e03c      	b.n	80085cc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d904      	bls.n	8008562 <dir_sdi+0xa0>
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	6a1b      	ldr	r3, [r3, #32]
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	429a      	cmp	r2, r3
 8008560:	d301      	bcc.n	8008566 <dir_sdi+0xa4>
 8008562:	2302      	movs	r3, #2
 8008564:	e032      	b.n	80085cc <dir_sdi+0x10a>
			ofs -= csz;
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	429a      	cmp	r2, r3
 8008574:	d2e1      	bcs.n	800853a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008576:	6979      	ldr	r1, [r7, #20]
 8008578:	6938      	ldr	r0, [r7, #16]
 800857a:	f7ff fc61 	bl	8007e40 <clust2sect>
 800857e:	4602      	mov	r2, r0
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <dir_sdi+0xd4>
 8008592:	2302      	movs	r3, #2
 8008594:	e01a      	b.n	80085cc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	69da      	ldr	r2, [r3, #28]
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	899b      	ldrh	r3, [r3, #12]
 800859e:	4619      	mov	r1, r3
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80085a6:	441a      	add	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	899b      	ldrh	r3, [r3, #12]
 80085b6:	461a      	mov	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80085be:	fb00 f202 	mul.w	r2, r0, r2
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	18ca      	adds	r2, r1, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	3320      	adds	r3, #32
 80085ea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	69db      	ldr	r3, [r3, #28]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <dir_next+0x28>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085fa:	d301      	bcc.n	8008600 <dir_next+0x2c>
 80085fc:	2304      	movs	r3, #4
 80085fe:	e0bb      	b.n	8008778 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	899b      	ldrh	r3, [r3, #12]
 8008604:	461a      	mov	r2, r3
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	fbb3 f1f2 	udiv	r1, r3, r2
 800860c:	fb01 f202 	mul.w	r2, r1, r2
 8008610:	1a9b      	subs	r3, r3, r2
 8008612:	2b00      	cmp	r3, #0
 8008614:	f040 809d 	bne.w	8008752 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10b      	bne.n	8008642 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	095b      	lsrs	r3, r3, #5
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	8912      	ldrh	r2, [r2, #8]
 8008632:	4293      	cmp	r3, r2
 8008634:	f0c0 808d 	bcc.w	8008752 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	61da      	str	r2, [r3, #28]
 800863e:	2304      	movs	r3, #4
 8008640:	e09a      	b.n	8008778 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	899b      	ldrh	r3, [r3, #12]
 8008646:	461a      	mov	r2, r3
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	fbb3 f3f2 	udiv	r3, r3, r2
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	8952      	ldrh	r2, [r2, #10]
 8008652:	3a01      	subs	r2, #1
 8008654:	4013      	ands	r3, r2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d17b      	bne.n	8008752 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	4619      	mov	r1, r3
 8008662:	4610      	mov	r0, r2
 8008664:	f7ff fc0b 	bl	8007e7e <get_fat>
 8008668:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d801      	bhi.n	8008674 <dir_next+0xa0>
 8008670:	2302      	movs	r3, #2
 8008672:	e081      	b.n	8008778 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800867a:	d101      	bne.n	8008680 <dir_next+0xac>
 800867c:	2301      	movs	r3, #1
 800867e:	e07b      	b.n	8008778 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	429a      	cmp	r2, r3
 8008688:	d359      	bcc.n	800873e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d104      	bne.n	800869a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	61da      	str	r2, [r3, #28]
 8008696:	2304      	movs	r3, #4
 8008698:	e06e      	b.n	8008778 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	4619      	mov	r1, r3
 80086a2:	4610      	mov	r0, r2
 80086a4:	f7ff fe3d 	bl	8008322 <create_chain>
 80086a8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <dir_next+0xe0>
 80086b0:	2307      	movs	r3, #7
 80086b2:	e061      	b.n	8008778 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d101      	bne.n	80086be <dir_next+0xea>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e05c      	b.n	8008778 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086c4:	d101      	bne.n	80086ca <dir_next+0xf6>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e056      	b.n	8008778 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f7ff fad6 	bl	8007c7c <sync_window>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <dir_next+0x106>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e04e      	b.n	8008778 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	899b      	ldrh	r3, [r3, #12]
 80086e4:	461a      	mov	r2, r3
 80086e6:	2100      	movs	r1, #0
 80086e8:	f7ff f8cd 	bl	8007886 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80086ec:	2300      	movs	r3, #0
 80086ee:	613b      	str	r3, [r7, #16]
 80086f0:	6979      	ldr	r1, [r7, #20]
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fba4 	bl	8007e40 <clust2sect>
 80086f8:	4602      	mov	r2, r0
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80086fe:	e012      	b.n	8008726 <dir_next+0x152>
						fs->wflag = 1;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2201      	movs	r2, #1
 8008704:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7ff fab8 	bl	8007c7c <sync_window>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <dir_next+0x142>
 8008712:	2301      	movs	r3, #1
 8008714:	e030      	b.n	8008778 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	3301      	adds	r3, #1
 800871a:	613b      	str	r3, [r7, #16]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	639a      	str	r2, [r3, #56]	@ 0x38
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	895b      	ldrh	r3, [r3, #10]
 800872a:	461a      	mov	r2, r3
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	4293      	cmp	r3, r2
 8008730:	d3e6      	bcc.n	8008700 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	1ad2      	subs	r2, r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008744:	6979      	ldr	r1, [r7, #20]
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f7ff fb7a 	bl	8007e40 <clust2sect>
 800874c:	4602      	mov	r2, r0
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	899b      	ldrh	r3, [r3, #12]
 8008762:	461a      	mov	r2, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	fbb3 f0f2 	udiv	r0, r3, r2
 800876a:	fb00 f202 	mul.w	r2, r0, r2
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	18ca      	adds	r2, r1, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008790:	2100      	movs	r1, #0
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7ff fe95 	bl	80084c2 <dir_sdi>
 8008798:	4603      	mov	r3, r0
 800879a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d12b      	bne.n	80087fa <dir_alloc+0x7a>
		n = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	4619      	mov	r1, r3
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f7ff faa9 	bl	8007d04 <move_window>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d11d      	bne.n	80087f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	2be5      	cmp	r3, #229	@ 0xe5
 80087c4:	d004      	beq.n	80087d0 <dir_alloc+0x50>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d107      	bne.n	80087e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	3301      	adds	r3, #1
 80087d4:	613b      	str	r3, [r7, #16]
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d102      	bne.n	80087e4 <dir_alloc+0x64>
 80087de:	e00c      	b.n	80087fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80087e0:	2300      	movs	r3, #0
 80087e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80087e4:	2101      	movs	r1, #1
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7ff fef4 	bl	80085d4 <dir_next>
 80087ec:	4603      	mov	r3, r0
 80087ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0d7      	beq.n	80087a6 <dir_alloc+0x26>
 80087f6:	e000      	b.n	80087fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80087f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	d101      	bne.n	8008804 <dir_alloc+0x84>
 8008800:	2307      	movs	r3, #7
 8008802:	75fb      	strb	r3, [r7, #23]
	return res;
 8008804:	7dfb      	ldrb	r3, [r7, #23]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	331a      	adds	r3, #26
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe ff8f 	bl	8007740 <ld_word>
 8008822:	4603      	mov	r3, r0
 8008824:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b03      	cmp	r3, #3
 800882c:	d109      	bne.n	8008842 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	3314      	adds	r3, #20
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe ff84 	bl	8007740 <ld_word>
 8008838:	4603      	mov	r3, r0
 800883a:	041b      	lsls	r3, r3, #16
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	4313      	orrs	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008842:	68fb      	ldr	r3, [r7, #12]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	331a      	adds	r3, #26
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	b292      	uxth	r2, r2
 8008860:	4611      	mov	r1, r2
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe ffa7 	bl	80077b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b03      	cmp	r3, #3
 800886e:	d109      	bne.n	8008884 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f103 0214 	add.w	r2, r3, #20
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	0c1b      	lsrs	r3, r3, #16
 800887a:	b29b      	uxth	r3, r3
 800887c:	4619      	mov	r1, r3
 800887e:	4610      	mov	r0, r2
 8008880:	f7fe ff99 	bl	80077b6 <st_word>
	}
}
 8008884:	bf00      	nop
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800888c:	b590      	push	{r4, r7, lr}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	331a      	adds	r3, #26
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe ff50 	bl	8007740 <ld_word>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <cmp_lfn+0x1e>
 80088a6:	2300      	movs	r3, #0
 80088a8:	e059      	b.n	800895e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088b2:	1e5a      	subs	r2, r3, #1
 80088b4:	4613      	mov	r3, r2
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80088c0:	2301      	movs	r3, #1
 80088c2:	81fb      	strh	r3, [r7, #14]
 80088c4:	2300      	movs	r3, #0
 80088c6:	613b      	str	r3, [r7, #16]
 80088c8:	e033      	b.n	8008932 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80088ca:	4a27      	ldr	r2, [pc, #156]	@ (8008968 <cmp_lfn+0xdc>)
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	4413      	add	r3, r2
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	4413      	add	r3, r2
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fe ff31 	bl	8007740 <ld_word>
 80088de:	4603      	mov	r3, r0
 80088e0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80088e2:	89fb      	ldrh	r3, [r7, #14]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01a      	beq.n	800891e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80088ec:	d812      	bhi.n	8008914 <cmp_lfn+0x88>
 80088ee:	89bb      	ldrh	r3, [r7, #12]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f002 fb8f 	bl	800b014 <ff_wtoupper>
 80088f6:	4603      	mov	r3, r0
 80088f8:	461c      	mov	r4, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	617a      	str	r2, [r7, #20]
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4413      	add	r3, r2
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	4618      	mov	r0, r3
 800890a:	f002 fb83 	bl	800b014 <ff_wtoupper>
 800890e:	4603      	mov	r3, r0
 8008910:	429c      	cmp	r4, r3
 8008912:	d001      	beq.n	8008918 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008914:	2300      	movs	r3, #0
 8008916:	e022      	b.n	800895e <cmp_lfn+0xd2>
			}
			wc = uc;
 8008918:	89bb      	ldrh	r3, [r7, #12]
 800891a:	81fb      	strh	r3, [r7, #14]
 800891c:	e006      	b.n	800892c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800891e:	89bb      	ldrh	r3, [r7, #12]
 8008920:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008924:	4293      	cmp	r3, r2
 8008926:	d001      	beq.n	800892c <cmp_lfn+0xa0>
 8008928:	2300      	movs	r3, #0
 800892a:	e018      	b.n	800895e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	3301      	adds	r3, #1
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b0c      	cmp	r3, #12
 8008936:	d9c8      	bls.n	80088ca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00b      	beq.n	800895c <cmp_lfn+0xd0>
 8008944:	89fb      	ldrh	r3, [r7, #14]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d008      	beq.n	800895c <cmp_lfn+0xd0>
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <cmp_lfn+0xd0>
 8008958:	2300      	movs	r3, #0
 800895a:	e000      	b.n	800895e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800895c:	2301      	movs	r3, #1
}
 800895e:	4618      	mov	r0, r3
 8008960:	371c      	adds	r7, #28
 8008962:	46bd      	mov	sp, r7
 8008964:	bd90      	pop	{r4, r7, pc}
 8008966:	bf00      	nop
 8008968:	0800fa30 	.word	0x0800fa30

0800896c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b088      	sub	sp, #32
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4611      	mov	r1, r2
 8008978:	461a      	mov	r2, r3
 800897a:	460b      	mov	r3, r1
 800897c:	71fb      	strb	r3, [r7, #7]
 800897e:	4613      	mov	r3, r2
 8008980:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	330d      	adds	r3, #13
 8008986:	79ba      	ldrb	r2, [r7, #6]
 8008988:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	330b      	adds	r3, #11
 800898e:	220f      	movs	r2, #15
 8008990:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	330c      	adds	r3, #12
 8008996:	2200      	movs	r2, #0
 8008998:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	331a      	adds	r3, #26
 800899e:	2100      	movs	r1, #0
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fe ff08 	bl	80077b6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80089a6:	79fb      	ldrb	r3, [r7, #7]
 80089a8:	1e5a      	subs	r2, r3, #1
 80089aa:	4613      	mov	r3, r2
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	82fb      	strh	r3, [r7, #22]
 80089ba:	2300      	movs	r3, #0
 80089bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80089be:	8afb      	ldrh	r3, [r7, #22]
 80089c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d007      	beq.n	80089d8 <put_lfn+0x6c>
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	61fa      	str	r2, [r7, #28]
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80089d8:	4a17      	ldr	r2, [pc, #92]	@ (8008a38 <put_lfn+0xcc>)
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	4413      	add	r3, r2
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	461a      	mov	r2, r3
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	4413      	add	r3, r2
 80089e6:	8afa      	ldrh	r2, [r7, #22]
 80089e8:	4611      	mov	r1, r2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fee3 	bl	80077b6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80089f0:	8afb      	ldrh	r3, [r7, #22]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d102      	bne.n	80089fc <put_lfn+0x90>
 80089f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80089fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	3301      	adds	r3, #1
 8008a00:	61bb      	str	r3, [r7, #24]
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	2b0c      	cmp	r3, #12
 8008a06:	d9da      	bls.n	80089be <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008a08:	8afb      	ldrh	r3, [r7, #22]
 8008a0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d006      	beq.n	8008a20 <put_lfn+0xb4>
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4413      	add	r3, r2
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d103      	bne.n	8008a28 <put_lfn+0xbc>
 8008a20:	79fb      	ldrb	r3, [r7, #7]
 8008a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a26:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	79fa      	ldrb	r2, [r7, #7]
 8008a2c:	701a      	strb	r2, [r3, #0]
}
 8008a2e:	bf00      	nop
 8008a30:	3720      	adds	r7, #32
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	0800fa30 	.word	0x0800fa30

08008a3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08c      	sub	sp, #48	@ 0x30
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
 8008a48:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008a4a:	220b      	movs	r2, #11
 8008a4c:	68b9      	ldr	r1, [r7, #8]
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7fe fef8 	bl	8007844 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2b05      	cmp	r3, #5
 8008a58:	d92b      	bls.n	8008ab2 <gen_numname+0x76>
		sr = seq;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008a5e:	e022      	b.n	8008aa6 <gen_numname+0x6a>
			wc = *lfn++;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	1c9a      	adds	r2, r3, #2
 8008a64:	607a      	str	r2, [r7, #4]
 8008a66:	881b      	ldrh	r3, [r3, #0]
 8008a68:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a6e:	e017      	b.n	8008aa0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	005a      	lsls	r2, r3, #1
 8008a74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	4413      	add	r3, r2
 8008a7c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008a7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a80:	085b      	lsrs	r3, r3, #1
 8008a82:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d005      	beq.n	8008a9a <gen_numname+0x5e>
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8008a94:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008a98:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa2:	2b0f      	cmp	r3, #15
 8008aa4:	d9e4      	bls.n	8008a70 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1d8      	bne.n	8008a60 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008ab2:	2307      	movs	r3, #7
 8008ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	f003 030f 	and.w	r3, r3, #15
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	3330      	adds	r3, #48	@ 0x30
 8008ac2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8008ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008aca:	2b39      	cmp	r3, #57	@ 0x39
 8008acc:	d904      	bls.n	8008ad8 <gen_numname+0x9c>
 8008ace:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ad2:	3307      	adds	r3, #7
 8008ad4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ada:	1e5a      	subs	r2, r3, #1
 8008adc:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008ade:	3330      	adds	r3, #48	@ 0x30
 8008ae0:	443b      	add	r3, r7
 8008ae2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008ae6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	091b      	lsrs	r3, r3, #4
 8008aee:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1df      	bne.n	8008ab6 <gen_numname+0x7a>
	ns[i] = '~';
 8008af6:	f107 0214 	add.w	r2, r7, #20
 8008afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afc:	4413      	add	r3, r2
 8008afe:	227e      	movs	r2, #126	@ 0x7e
 8008b00:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008b02:	2300      	movs	r3, #0
 8008b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b06:	e002      	b.n	8008b0e <gen_numname+0xd2>
 8008b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d205      	bcs.n	8008b22 <gen_numname+0xe6>
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1a:	4413      	add	r3, r2
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2b20      	cmp	r3, #32
 8008b20:	d1f2      	bne.n	8008b08 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b24:	2b07      	cmp	r3, #7
 8008b26:	d807      	bhi.n	8008b38 <gen_numname+0xfc>
 8008b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008b2e:	3330      	adds	r3, #48	@ 0x30
 8008b30:	443b      	add	r3, r7
 8008b32:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008b36:	e000      	b.n	8008b3a <gen_numname+0xfe>
 8008b38:	2120      	movs	r1, #32
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4413      	add	r3, r2
 8008b44:	460a      	mov	r2, r1
 8008b46:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4a:	2b07      	cmp	r3, #7
 8008b4c:	d9e9      	bls.n	8008b22 <gen_numname+0xe6>
}
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	3730      	adds	r7, #48	@ 0x30
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008b64:	230b      	movs	r3, #11
 8008b66:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	0852      	lsrs	r2, r2, #1
 8008b6e:	01db      	lsls	r3, r3, #7
 8008b70:	4313      	orrs	r3, r2
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	1c59      	adds	r1, r3, #1
 8008b78:	6079      	str	r1, [r7, #4]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	60bb      	str	r3, [r7, #8]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1ed      	bne.n	8008b68 <sum_sfn+0x10>
	return sum;
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b086      	sub	sp, #24
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008ba8:	2100      	movs	r1, #0
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff fc89 	bl	80084c2 <dir_sdi>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008bb4:	7dfb      	ldrb	r3, [r7, #23]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <dir_find+0x24>
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	e0a9      	b.n	8008d12 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008bbe:	23ff      	movs	r3, #255	@ 0xff
 8008bc0:	753b      	strb	r3, [r7, #20]
 8008bc2:	7d3b      	ldrb	r3, [r7, #20]
 8008bc4:	757b      	strb	r3, [r7, #21]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008bcc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6938      	ldr	r0, [r7, #16]
 8008bd6:	f7ff f895 	bl	8007d04 <move_window>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f040 8090 	bne.w	8008d06 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008bee:	7dbb      	ldrb	r3, [r7, #22]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d102      	bne.n	8008bfa <dir_find+0x60>
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	75fb      	strb	r3, [r7, #23]
 8008bf8:	e08a      	b.n	8008d10 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	330b      	adds	r3, #11
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c06:	73fb      	strb	r3, [r7, #15]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	7bfa      	ldrb	r2, [r7, #15]
 8008c0c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008c0e:	7dbb      	ldrb	r3, [r7, #22]
 8008c10:	2be5      	cmp	r3, #229	@ 0xe5
 8008c12:	d007      	beq.n	8008c24 <dir_find+0x8a>
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	f003 0308 	and.w	r3, r3, #8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d009      	beq.n	8008c32 <dir_find+0x98>
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	2b0f      	cmp	r3, #15
 8008c22:	d006      	beq.n	8008c32 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008c24:	23ff      	movs	r3, #255	@ 0xff
 8008c26:	757b      	strb	r3, [r7, #21]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c30:	e05e      	b.n	8008cf0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	2b0f      	cmp	r3, #15
 8008c36:	d136      	bne.n	8008ca6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d154      	bne.n	8008cf0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008c46:	7dbb      	ldrb	r3, [r7, #22]
 8008c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00d      	beq.n	8008c6c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	7b5b      	ldrb	r3, [r3, #13]
 8008c56:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008c58:	7dbb      	ldrb	r3, [r7, #22]
 8008c5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c5e:	75bb      	strb	r3, [r7, #22]
 8008c60:	7dbb      	ldrb	r3, [r7, #22]
 8008c62:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	695a      	ldr	r2, [r3, #20]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008c6c:	7dba      	ldrb	r2, [r7, #22]
 8008c6e:	7d7b      	ldrb	r3, [r7, #21]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d115      	bne.n	8008ca0 <dir_find+0x106>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	330d      	adds	r3, #13
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	7d3a      	ldrb	r2, [r7, #20]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d10e      	bne.n	8008ca0 <dir_find+0x106>
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	691a      	ldr	r2, [r3, #16]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	f7ff fdfd 	bl	800888c <cmp_lfn>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <dir_find+0x106>
 8008c98:	7d7b      	ldrb	r3, [r7, #21]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	e000      	b.n	8008ca2 <dir_find+0x108>
 8008ca0:	23ff      	movs	r3, #255	@ 0xff
 8008ca2:	757b      	strb	r3, [r7, #21]
 8008ca4:	e024      	b.n	8008cf0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008ca6:	7d7b      	ldrb	r3, [r7, #21]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d109      	bne.n	8008cc0 <dir_find+0x126>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a1b      	ldr	r3, [r3, #32]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7ff ff51 	bl	8008b58 <sum_sfn>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	461a      	mov	r2, r3
 8008cba:	7d3b      	ldrb	r3, [r7, #20]
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d024      	beq.n	8008d0a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10a      	bne.n	8008ce4 <dir_find+0x14a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a18      	ldr	r0, [r3, #32]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	3324      	adds	r3, #36	@ 0x24
 8008cd6:	220b      	movs	r2, #11
 8008cd8:	4619      	mov	r1, r3
 8008cda:	f7fe fdef 	bl	80078bc <mem_cmp>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d014      	beq.n	8008d0e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008ce4:	23ff      	movs	r3, #255	@ 0xff
 8008ce6:	757b      	strb	r3, [r7, #21]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cee:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7ff fc6e 	bl	80085d4 <dir_next>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f43f af65 	beq.w	8008bce <dir_find+0x34>
 8008d04:	e004      	b.n	8008d10 <dir_find+0x176>
		if (res != FR_OK) break;
 8008d06:	bf00      	nop
 8008d08:	e002      	b.n	8008d10 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008d0a:	bf00      	nop
 8008d0c:	e000      	b.n	8008d10 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008d0e:	bf00      	nop

	return res;
 8008d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08c      	sub	sp, #48	@ 0x30
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008d30:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <dir_register+0x20>
 8008d38:	2306      	movs	r3, #6
 8008d3a:	e0e0      	b.n	8008efe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d40:	e002      	b.n	8008d48 <dir_register+0x2c>
 8008d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d44:	3301      	adds	r3, #1
 8008d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	691a      	ldr	r2, [r3, #16]
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	4413      	add	r3, r2
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1f4      	bne.n	8008d42 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8008d5e:	f107 030c 	add.w	r3, r7, #12
 8008d62:	220c      	movs	r2, #12
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe fd6d 	bl	8007844 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d032      	beq.n	8008dda <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2240      	movs	r2, #64	@ 0x40
 8008d78:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d80:	e016      	b.n	8008db0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	691a      	ldr	r2, [r3, #16]
 8008d8c:	f107 010c 	add.w	r1, r7, #12
 8008d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d92:	f7ff fe53 	bl	8008a3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff feff 	bl	8008b9a <dir_find>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008da2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d106      	bne.n	8008db8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dac:	3301      	adds	r3, #1
 8008dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db2:	2b63      	cmp	r3, #99	@ 0x63
 8008db4:	d9e5      	bls.n	8008d82 <dir_register+0x66>
 8008db6:	e000      	b.n	8008dba <dir_register+0x9e>
			if (res != FR_OK) break;
 8008db8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	2b64      	cmp	r3, #100	@ 0x64
 8008dbe:	d101      	bne.n	8008dc4 <dir_register+0xa8>
 8008dc0:	2307      	movs	r3, #7
 8008dc2:	e09c      	b.n	8008efe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d002      	beq.n	8008dd2 <dir_register+0xb6>
 8008dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008dd0:	e095      	b.n	8008efe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008dd2:	7dfa      	ldrb	r2, [r7, #23]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008dda:	7dfb      	ldrb	r3, [r7, #23]
 8008ddc:	f003 0302 	and.w	r3, r3, #2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d007      	beq.n	8008df4 <dir_register+0xd8>
 8008de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de6:	330c      	adds	r3, #12
 8008de8:	4a47      	ldr	r2, [pc, #284]	@ (8008f08 <dir_register+0x1ec>)
 8008dea:	fba2 2303 	umull	r2, r3, r2, r3
 8008dee:	089b      	lsrs	r3, r3, #2
 8008df0:	3301      	adds	r3, #1
 8008df2:	e000      	b.n	8008df6 <dir_register+0xda>
 8008df4:	2301      	movs	r3, #1
 8008df6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008df8:	6a39      	ldr	r1, [r7, #32]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7ff fcc0 	bl	8008780 <dir_alloc>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008e06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d148      	bne.n	8008ea0 <dir_register+0x184>
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	623b      	str	r3, [r7, #32]
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d042      	beq.n	8008ea0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	695a      	ldr	r2, [r3, #20]
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	015b      	lsls	r3, r3, #5
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff fb4b 	bl	80084c2 <dir_sdi>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008e32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d132      	bne.n	8008ea0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	3324      	adds	r3, #36	@ 0x24
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fe8a 	bl	8008b58 <sum_sfn>
 8008e44:	4603      	mov	r3, r0
 8008e46:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	69db      	ldr	r3, [r3, #28]
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	69f8      	ldr	r0, [r7, #28]
 8008e50:	f7fe ff58 	bl	8007d04 <move_window>
 8008e54:	4603      	mov	r3, r0
 8008e56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d11d      	bne.n	8008e9e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	6918      	ldr	r0, [r3, #16]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a19      	ldr	r1, [r3, #32]
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	7efb      	ldrb	r3, [r7, #27]
 8008e70:	f7ff fd7c 	bl	800896c <put_lfn>
				fs->wflag = 1;
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	2201      	movs	r2, #1
 8008e78:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7ff fba9 	bl	80085d4 <dir_next>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008e88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d107      	bne.n	8008ea0 <dir_register+0x184>
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	623b      	str	r3, [r7, #32]
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1d5      	bne.n	8008e48 <dir_register+0x12c>
 8008e9c:	e000      	b.n	8008ea0 <dir_register+0x184>
				if (res != FR_OK) break;
 8008e9e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008ea0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d128      	bne.n	8008efa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	4619      	mov	r1, r3
 8008eae:	69f8      	ldr	r0, [r7, #28]
 8008eb0:	f7fe ff28 	bl	8007d04 <move_window>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008eba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d11b      	bne.n	8008efa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fcdb 	bl	8007886 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a18      	ldr	r0, [r3, #32]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3324      	adds	r3, #36	@ 0x24
 8008ed8:	220b      	movs	r2, #11
 8008eda:	4619      	mov	r1, r3
 8008edc:	f7fe fcb2 	bl	8007844 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	330c      	adds	r3, #12
 8008eec:	f002 0218 	and.w	r2, r2, #24
 8008ef0:	b2d2      	uxtb	r2, r2
 8008ef2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008efa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3730      	adds	r7, #48	@ 0x30
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	4ec4ec4f 	.word	0x4ec4ec4f

08008f0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08a      	sub	sp, #40	@ 0x28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	613b      	str	r3, [r7, #16]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	60fb      	str	r3, [r7, #12]
 8008f24:	2300      	movs	r3, #0
 8008f26:	617b      	str	r3, [r7, #20]
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	1c5a      	adds	r2, r3, #1
 8008f30:	61ba      	str	r2, [r7, #24]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	4413      	add	r3, r2
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008f3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f3c:	2b1f      	cmp	r3, #31
 8008f3e:	d940      	bls.n	8008fc2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008f40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f42:	2b2f      	cmp	r3, #47	@ 0x2f
 8008f44:	d006      	beq.n	8008f54 <create_name+0x48>
 8008f46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f48:	2b5c      	cmp	r3, #92	@ 0x5c
 8008f4a:	d110      	bne.n	8008f6e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008f4c:	e002      	b.n	8008f54 <create_name+0x48>
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	3301      	adds	r3, #1
 8008f52:	61bb      	str	r3, [r7, #24]
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	4413      	add	r3, r2
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008f5e:	d0f6      	beq.n	8008f4e <create_name+0x42>
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	4413      	add	r3, r2
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	2b5c      	cmp	r3, #92	@ 0x5c
 8008f6a:	d0f0      	beq.n	8008f4e <create_name+0x42>
			break;
 8008f6c:	e02a      	b.n	8008fc4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2bfe      	cmp	r3, #254	@ 0xfe
 8008f72:	d901      	bls.n	8008f78 <create_name+0x6c>
 8008f74:	2306      	movs	r3, #6
 8008f76:	e17d      	b.n	8009274 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008f78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008f7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f80:	2101      	movs	r1, #1
 8008f82:	4618      	mov	r0, r3
 8008f84:	f002 f80a 	bl	800af9c <ff_convert>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008f8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <create_name+0x8a>
 8008f92:	2306      	movs	r3, #6
 8008f94:	e16e      	b.n	8009274 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008f96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f98:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f9a:	d809      	bhi.n	8008fb0 <create_name+0xa4>
 8008f9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	488d      	ldr	r0, [pc, #564]	@ (80091d8 <create_name+0x2cc>)
 8008fa2:	f7fe fcb2 	bl	800790a <chk_chr>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <create_name+0xa4>
 8008fac:	2306      	movs	r3, #6
 8008fae:	e161      	b.n	8009274 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	617a      	str	r2, [r7, #20]
 8008fb6:	005b      	lsls	r3, r3, #1
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	4413      	add	r3, r2
 8008fbc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008fbe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008fc0:	e7b4      	b.n	8008f2c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008fc2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	441a      	add	r2, r3
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008fce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fd0:	2b1f      	cmp	r3, #31
 8008fd2:	d801      	bhi.n	8008fd8 <create_name+0xcc>
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	e000      	b.n	8008fda <create_name+0xce>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008fde:	e011      	b.n	8009004 <create_name+0xf8>
		w = lfn[di - 1];
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	005b      	lsls	r3, r3, #1
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4413      	add	r3, r2
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008ff2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ff4:	2b20      	cmp	r3, #32
 8008ff6:	d002      	beq.n	8008ffe <create_name+0xf2>
 8008ff8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ffa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ffc:	d106      	bne.n	800900c <create_name+0x100>
		di--;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	3b01      	subs	r3, #1
 8009002:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1ea      	bne.n	8008fe0 <create_name+0xd4>
 800900a:	e000      	b.n	800900e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800900c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	4413      	add	r3, r2
 8009016:	2200      	movs	r2, #0
 8009018:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <create_name+0x118>
 8009020:	2306      	movs	r3, #6
 8009022:	e127      	b.n	8009274 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3324      	adds	r3, #36	@ 0x24
 8009028:	220b      	movs	r2, #11
 800902a:	2120      	movs	r1, #32
 800902c:	4618      	mov	r0, r3
 800902e:	f7fe fc2a 	bl	8007886 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009032:	2300      	movs	r3, #0
 8009034:	61bb      	str	r3, [r7, #24]
 8009036:	e002      	b.n	800903e <create_name+0x132>
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	3301      	adds	r3, #1
 800903c:	61bb      	str	r3, [r7, #24]
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	005b      	lsls	r3, r3, #1
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	4413      	add	r3, r2
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	2b20      	cmp	r3, #32
 800904a:	d0f5      	beq.n	8009038 <create_name+0x12c>
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4413      	add	r3, r2
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	2b2e      	cmp	r3, #46	@ 0x2e
 8009058:	d0ee      	beq.n	8009038 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d009      	beq.n	8009074 <create_name+0x168>
 8009060:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009064:	f043 0303 	orr.w	r3, r3, #3
 8009068:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800906c:	e002      	b.n	8009074 <create_name+0x168>
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	3b01      	subs	r3, #1
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d009      	beq.n	800908e <create_name+0x182>
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009080:	3b01      	subs	r3, #1
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	4413      	add	r3, r2
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	2b2e      	cmp	r3, #46	@ 0x2e
 800908c:	d1ef      	bne.n	800906e <create_name+0x162>

	i = b = 0; ni = 8;
 800908e:	2300      	movs	r3, #0
 8009090:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009094:	2300      	movs	r3, #0
 8009096:	623b      	str	r3, [r7, #32]
 8009098:	2308      	movs	r3, #8
 800909a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	61ba      	str	r2, [r7, #24]
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80090ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 8090 	beq.w	80091d4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80090b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090b6:	2b20      	cmp	r3, #32
 80090b8:	d006      	beq.n	80090c8 <create_name+0x1bc>
 80090ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80090be:	d10a      	bne.n	80090d6 <create_name+0x1ca>
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d006      	beq.n	80090d6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80090c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090cc:	f043 0303 	orr.w	r3, r3, #3
 80090d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80090d4:	e07d      	b.n	80091d2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80090d6:	6a3a      	ldr	r2, [r7, #32]
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d203      	bcs.n	80090e6 <create_name+0x1da>
 80090de:	69ba      	ldr	r2, [r7, #24]
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d123      	bne.n	800912e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	2b0b      	cmp	r3, #11
 80090ea:	d106      	bne.n	80090fa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80090ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090f0:	f043 0303 	orr.w	r3, r3, #3
 80090f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80090f8:	e075      	b.n	80091e6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d005      	beq.n	800910e <create_name+0x202>
 8009102:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009106:	f043 0303 	orr.w	r3, r3, #3
 800910a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800910e:	69ba      	ldr	r2, [r7, #24]
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	429a      	cmp	r2, r3
 8009114:	d866      	bhi.n	80091e4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	61bb      	str	r3, [r7, #24]
 800911a:	2308      	movs	r3, #8
 800911c:	623b      	str	r3, [r7, #32]
 800911e:	230b      	movs	r3, #11
 8009120:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009122:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800912c:	e051      	b.n	80091d2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800912e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009130:	2b7f      	cmp	r3, #127	@ 0x7f
 8009132:	d914      	bls.n	800915e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009134:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009136:	2100      	movs	r1, #0
 8009138:	4618      	mov	r0, r3
 800913a:	f001 ff2f 	bl	800af9c <ff_convert>
 800913e:	4603      	mov	r3, r0
 8009140:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009142:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009144:	2b00      	cmp	r3, #0
 8009146:	d004      	beq.n	8009152 <create_name+0x246>
 8009148:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800914a:	3b80      	subs	r3, #128	@ 0x80
 800914c:	4a23      	ldr	r2, [pc, #140]	@ (80091dc <create_name+0x2d0>)
 800914e:	5cd3      	ldrb	r3, [r2, r3]
 8009150:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009156:	f043 0302 	orr.w	r3, r3, #2
 800915a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800915e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009160:	2b00      	cmp	r3, #0
 8009162:	d007      	beq.n	8009174 <create_name+0x268>
 8009164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009166:	4619      	mov	r1, r3
 8009168:	481d      	ldr	r0, [pc, #116]	@ (80091e0 <create_name+0x2d4>)
 800916a:	f7fe fbce 	bl	800790a <chk_chr>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d008      	beq.n	8009186 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009174:	235f      	movs	r3, #95	@ 0x5f
 8009176:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800917c:	f043 0303 	orr.w	r3, r3, #3
 8009180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009184:	e01b      	b.n	80091be <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009186:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009188:	2b40      	cmp	r3, #64	@ 0x40
 800918a:	d909      	bls.n	80091a0 <create_name+0x294>
 800918c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800918e:	2b5a      	cmp	r3, #90	@ 0x5a
 8009190:	d806      	bhi.n	80091a0 <create_name+0x294>
					b |= 2;
 8009192:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009196:	f043 0302 	orr.w	r3, r3, #2
 800919a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800919e:	e00e      	b.n	80091be <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80091a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091a2:	2b60      	cmp	r3, #96	@ 0x60
 80091a4:	d90b      	bls.n	80091be <create_name+0x2b2>
 80091a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091a8:	2b7a      	cmp	r3, #122	@ 0x7a
 80091aa:	d808      	bhi.n	80091be <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80091ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80091b0:	f043 0301 	orr.w	r3, r3, #1
 80091b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80091b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091ba:	3b20      	subs	r3, #32
 80091bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80091be:	6a3b      	ldr	r3, [r7, #32]
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	623a      	str	r2, [r7, #32]
 80091c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80091c6:	b2d1      	uxtb	r1, r2
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	4413      	add	r3, r2
 80091cc:	460a      	mov	r2, r1
 80091ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80091d2:	e763      	b.n	800909c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80091d4:	bf00      	nop
 80091d6:	e006      	b.n	80091e6 <create_name+0x2da>
 80091d8:	0800f8f8 	.word	0x0800f8f8
 80091dc:	0800f9b0 	.word	0x0800f9b0
 80091e0:	0800f904 	.word	0x0800f904
			if (si > di) break;			/* No extension */
 80091e4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80091ec:	2be5      	cmp	r3, #229	@ 0xe5
 80091ee:	d103      	bne.n	80091f8 <create_name+0x2ec>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2205      	movs	r2, #5
 80091f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	2b08      	cmp	r3, #8
 80091fc:	d104      	bne.n	8009208 <create_name+0x2fc>
 80091fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009208:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800920c:	f003 030c 	and.w	r3, r3, #12
 8009210:	2b0c      	cmp	r3, #12
 8009212:	d005      	beq.n	8009220 <create_name+0x314>
 8009214:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009218:	f003 0303 	and.w	r3, r3, #3
 800921c:	2b03      	cmp	r3, #3
 800921e:	d105      	bne.n	800922c <create_name+0x320>
 8009220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009224:	f043 0302 	orr.w	r3, r3, #2
 8009228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800922c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d117      	bne.n	8009268 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009238:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800923c:	f003 0303 	and.w	r3, r3, #3
 8009240:	2b01      	cmp	r3, #1
 8009242:	d105      	bne.n	8009250 <create_name+0x344>
 8009244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009248:	f043 0310 	orr.w	r3, r3, #16
 800924c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009250:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009254:	f003 030c 	and.w	r3, r3, #12
 8009258:	2b04      	cmp	r3, #4
 800925a:	d105      	bne.n	8009268 <create_name+0x35c>
 800925c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009260:	f043 0308 	orr.w	r3, r3, #8
 8009264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800926e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8009272:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009274:	4618      	mov	r0, r3
 8009276:	3728      	adds	r7, #40	@ 0x28
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009290:	e002      	b.n	8009298 <follow_path+0x1c>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	3301      	adds	r3, #1
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	2b2f      	cmp	r3, #47	@ 0x2f
 800929e:	d0f8      	beq.n	8009292 <follow_path+0x16>
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80092a6:	d0f4      	beq.n	8009292 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	2200      	movs	r2, #0
 80092ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2b1f      	cmp	r3, #31
 80092b4:	d80a      	bhi.n	80092cc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2280      	movs	r2, #128	@ 0x80
 80092ba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80092be:	2100      	movs	r1, #0
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff f8fe 	bl	80084c2 <dir_sdi>
 80092c6:	4603      	mov	r3, r0
 80092c8:	75fb      	strb	r3, [r7, #23]
 80092ca:	e048      	b.n	800935e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80092cc:	463b      	mov	r3, r7
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff fe1b 	bl	8008f0c <create_name>
 80092d6:	4603      	mov	r3, r0
 80092d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80092da:	7dfb      	ldrb	r3, [r7, #23]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d139      	bne.n	8009354 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff fc5a 	bl	8008b9a <dir_find>
 80092e6:	4603      	mov	r3, r0
 80092e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80092f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80092f2:	7dfb      	ldrb	r3, [r7, #23]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00a      	beq.n	800930e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80092f8:	7dfb      	ldrb	r3, [r7, #23]
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	d12c      	bne.n	8009358 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80092fe:	7afb      	ldrb	r3, [r7, #11]
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d127      	bne.n	8009358 <follow_path+0xdc>
 8009308:	2305      	movs	r3, #5
 800930a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800930c:	e024      	b.n	8009358 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800930e:	7afb      	ldrb	r3, [r7, #11]
 8009310:	f003 0304 	and.w	r3, r3, #4
 8009314:	2b00      	cmp	r3, #0
 8009316:	d121      	bne.n	800935c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	799b      	ldrb	r3, [r3, #6]
 800931c:	f003 0310 	and.w	r3, r3, #16
 8009320:	2b00      	cmp	r3, #0
 8009322:	d102      	bne.n	800932a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009324:	2305      	movs	r3, #5
 8009326:	75fb      	strb	r3, [r7, #23]
 8009328:	e019      	b.n	800935e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	8992      	ldrh	r2, [r2, #12]
 8009338:	fbb3 f0f2 	udiv	r0, r3, r2
 800933c:	fb00 f202 	mul.w	r2, r0, r2
 8009340:	1a9b      	subs	r3, r3, r2
 8009342:	440b      	add	r3, r1
 8009344:	4619      	mov	r1, r3
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f7ff fa61 	bl	800880e <ld_clust>
 800934c:	4602      	mov	r2, r0
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009352:	e7bb      	b.n	80092cc <follow_path+0x50>
			if (res != FR_OK) break;
 8009354:	bf00      	nop
 8009356:	e002      	b.n	800935e <follow_path+0xe2>
				break;
 8009358:	bf00      	nop
 800935a:	e000      	b.n	800935e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800935c:	bf00      	nop
			}
		}
	}

	return res;
 800935e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009374:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d031      	beq.n	80093e2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	617b      	str	r3, [r7, #20]
 8009384:	e002      	b.n	800938c <get_ldnumber+0x24>
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	3301      	adds	r3, #1
 800938a:	617b      	str	r3, [r7, #20]
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	2b1f      	cmp	r3, #31
 8009392:	d903      	bls.n	800939c <get_ldnumber+0x34>
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b3a      	cmp	r3, #58	@ 0x3a
 800939a:	d1f4      	bne.n	8009386 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	2b3a      	cmp	r3, #58	@ 0x3a
 80093a2:	d11c      	bne.n	80093de <get_ldnumber+0x76>
			tp = *path;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	60fa      	str	r2, [r7, #12]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	3b30      	subs	r3, #48	@ 0x30
 80093b4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b09      	cmp	r3, #9
 80093ba:	d80e      	bhi.n	80093da <get_ldnumber+0x72>
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d10a      	bne.n	80093da <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d107      	bne.n	80093da <get_ldnumber+0x72>
					vol = (int)i;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	3301      	adds	r3, #1
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	e002      	b.n	80093e4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80093de:	2300      	movs	r3, #0
 80093e0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80093e2:	693b      	ldr	r3, [r7, #16]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	371c      	adds	r7, #28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	70da      	strb	r2, [r3, #3]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009406:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7fe fc7a 	bl	8007d04 <move_window>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <check_fs+0x2a>
 8009416:	2304      	movs	r3, #4
 8009418:	e038      	b.n	800948c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	333c      	adds	r3, #60	@ 0x3c
 800941e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe f98c 	bl	8007740 <ld_word>
 8009428:	4603      	mov	r3, r0
 800942a:	461a      	mov	r2, r3
 800942c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009430:	429a      	cmp	r2, r3
 8009432:	d001      	beq.n	8009438 <check_fs+0x48>
 8009434:	2303      	movs	r3, #3
 8009436:	e029      	b.n	800948c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800943e:	2be9      	cmp	r3, #233	@ 0xe9
 8009440:	d009      	beq.n	8009456 <check_fs+0x66>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009448:	2beb      	cmp	r3, #235	@ 0xeb
 800944a:	d11e      	bne.n	800948a <check_fs+0x9a>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009452:	2b90      	cmp	r3, #144	@ 0x90
 8009454:	d119      	bne.n	800948a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	333c      	adds	r3, #60	@ 0x3c
 800945a:	3336      	adds	r3, #54	@ 0x36
 800945c:	4618      	mov	r0, r3
 800945e:	f7fe f987 	bl	8007770 <ld_dword>
 8009462:	4603      	mov	r3, r0
 8009464:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009468:	4a0a      	ldr	r2, [pc, #40]	@ (8009494 <check_fs+0xa4>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d101      	bne.n	8009472 <check_fs+0x82>
 800946e:	2300      	movs	r3, #0
 8009470:	e00c      	b.n	800948c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	333c      	adds	r3, #60	@ 0x3c
 8009476:	3352      	adds	r3, #82	@ 0x52
 8009478:	4618      	mov	r0, r3
 800947a:	f7fe f979 	bl	8007770 <ld_dword>
 800947e:	4603      	mov	r3, r0
 8009480:	4a05      	ldr	r2, [pc, #20]	@ (8009498 <check_fs+0xa8>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d101      	bne.n	800948a <check_fs+0x9a>
 8009486:	2300      	movs	r3, #0
 8009488:	e000      	b.n	800948c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800948a:	2302      	movs	r3, #2
}
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	00544146 	.word	0x00544146
 8009498:	33544146 	.word	0x33544146

0800949c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b096      	sub	sp, #88	@ 0x58
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	4613      	mov	r3, r2
 80094a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2200      	movs	r2, #0
 80094ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f7ff ff59 	bl	8009368 <get_ldnumber>
 80094b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80094b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	da01      	bge.n	80094c2 <find_volume+0x26>
 80094be:	230b      	movs	r3, #11
 80094c0:	e26a      	b.n	8009998 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80094c2:	4aa3      	ldr	r2, [pc, #652]	@ (8009750 <find_volume+0x2b4>)
 80094c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80094cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <find_volume+0x3a>
 80094d2:	230c      	movs	r3, #12
 80094d4:	e260      	b.n	8009998 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 80094d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80094d8:	f7fe fa32 	bl	8007940 <lock_fs>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <find_volume+0x4a>
 80094e2:	230f      	movs	r3, #15
 80094e4:	e258      	b.n	8009998 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	f023 0301 	bic.w	r3, r3, #1
 80094f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80094f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d01a      	beq.n	8009532 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80094fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fe:	785b      	ldrb	r3, [r3, #1]
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe f87d 	bl	8007600 <disk_status>
 8009506:	4603      	mov	r3, r0
 8009508:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800950c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009510:	f003 0301 	and.w	r3, r3, #1
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10c      	bne.n	8009532 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009518:	79fb      	ldrb	r3, [r7, #7]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d007      	beq.n	800952e <find_volume+0x92>
 800951e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009522:	f003 0304 	and.w	r3, r3, #4
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800952a:	230a      	movs	r3, #10
 800952c:	e234      	b.n	8009998 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800952e:	2300      	movs	r3, #0
 8009530:	e232      	b.n	8009998 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009534:	2200      	movs	r2, #0
 8009536:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800953a:	b2da      	uxtb	r2, r3
 800953c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009542:	785b      	ldrb	r3, [r3, #1]
 8009544:	4618      	mov	r0, r3
 8009546:	f7fe f875 	bl	8007634 <disk_initialize>
 800954a:	4603      	mov	r3, r0
 800954c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009550:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800955c:	2303      	movs	r3, #3
 800955e:	e21b      	b.n	8009998 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009560:	79fb      	ldrb	r3, [r7, #7]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d007      	beq.n	8009576 <find_volume+0xda>
 8009566:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800956a:	f003 0304 	and.w	r3, r3, #4
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009572:	230a      	movs	r3, #10
 8009574:	e210      	b.n	8009998 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009578:	7858      	ldrb	r0, [r3, #1]
 800957a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957c:	330c      	adds	r3, #12
 800957e:	461a      	mov	r2, r3
 8009580:	2102      	movs	r1, #2
 8009582:	f7fe f8bf 	bl	8007704 <disk_ioctl>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <find_volume+0xf4>
 800958c:	2301      	movs	r3, #1
 800958e:	e203      	b.n	8009998 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009592:	899b      	ldrh	r3, [r3, #12]
 8009594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009598:	d80d      	bhi.n	80095b6 <find_volume+0x11a>
 800959a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959c:	899b      	ldrh	r3, [r3, #12]
 800959e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095a2:	d308      	bcc.n	80095b6 <find_volume+0x11a>
 80095a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a6:	899b      	ldrh	r3, [r3, #12]
 80095a8:	461a      	mov	r2, r3
 80095aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ac:	899b      	ldrh	r3, [r3, #12]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	4013      	ands	r3, r2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <find_volume+0x11e>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e1ee      	b.n	8009998 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80095be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80095c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80095c2:	f7ff ff15 	bl	80093f0 <check_fs>
 80095c6:	4603      	mov	r3, r0
 80095c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80095cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d149      	bne.n	8009668 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80095d4:	2300      	movs	r3, #0
 80095d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80095d8:	e01e      	b.n	8009618 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80095da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095dc:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80095e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095e2:	011b      	lsls	r3, r3, #4
 80095e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80095e8:	4413      	add	r3, r2
 80095ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80095ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ee:	3304      	adds	r3, #4
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d006      	beq.n	8009604 <find_volume+0x168>
 80095f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f8:	3308      	adds	r3, #8
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fe f8b8 	bl	8007770 <ld_dword>
 8009600:	4602      	mov	r2, r0
 8009602:	e000      	b.n	8009606 <find_volume+0x16a>
 8009604:	2200      	movs	r2, #0
 8009606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	3358      	adds	r3, #88	@ 0x58
 800960c:	443b      	add	r3, r7
 800960e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009614:	3301      	adds	r3, #1
 8009616:	643b      	str	r3, [r7, #64]	@ 0x40
 8009618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800961a:	2b03      	cmp	r3, #3
 800961c:	d9dd      	bls.n	80095da <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800961e:	2300      	movs	r3, #0
 8009620:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <find_volume+0x192>
 8009628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800962a:	3b01      	subs	r3, #1
 800962c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800962e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	3358      	adds	r3, #88	@ 0x58
 8009634:	443b      	add	r3, r7
 8009636:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800963a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800963c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800963e:	2b00      	cmp	r3, #0
 8009640:	d005      	beq.n	800964e <find_volume+0x1b2>
 8009642:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009644:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009646:	f7ff fed3 	bl	80093f0 <check_fs>
 800964a:	4603      	mov	r3, r0
 800964c:	e000      	b.n	8009650 <find_volume+0x1b4>
 800964e:	2303      	movs	r3, #3
 8009650:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009654:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009658:	2b01      	cmp	r3, #1
 800965a:	d905      	bls.n	8009668 <find_volume+0x1cc>
 800965c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800965e:	3301      	adds	r3, #1
 8009660:	643b      	str	r3, [r7, #64]	@ 0x40
 8009662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009664:	2b03      	cmp	r3, #3
 8009666:	d9e2      	bls.n	800962e <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009668:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800966c:	2b04      	cmp	r3, #4
 800966e:	d101      	bne.n	8009674 <find_volume+0x1d8>
 8009670:	2301      	movs	r3, #1
 8009672:	e191      	b.n	8009998 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009674:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009678:	2b01      	cmp	r3, #1
 800967a:	d901      	bls.n	8009680 <find_volume+0x1e4>
 800967c:	230d      	movs	r3, #13
 800967e:	e18b      	b.n	8009998 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009682:	333c      	adds	r3, #60	@ 0x3c
 8009684:	330b      	adds	r3, #11
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe f85a 	bl	8007740 <ld_word>
 800968c:	4603      	mov	r3, r0
 800968e:	461a      	mov	r2, r3
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	899b      	ldrh	r3, [r3, #12]
 8009694:	429a      	cmp	r2, r3
 8009696:	d001      	beq.n	800969c <find_volume+0x200>
 8009698:	230d      	movs	r3, #13
 800969a:	e17d      	b.n	8009998 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800969c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969e:	333c      	adds	r3, #60	@ 0x3c
 80096a0:	3316      	adds	r3, #22
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe f84c 	bl	8007740 <ld_word>
 80096a8:	4603      	mov	r3, r0
 80096aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80096ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d106      	bne.n	80096c0 <find_volume+0x224>
 80096b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b4:	333c      	adds	r3, #60	@ 0x3c
 80096b6:	3324      	adds	r3, #36	@ 0x24
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fe f859 	bl	8007770 <ld_dword>
 80096be:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096c4:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80096c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c8:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 80096cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80096d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d2:	789b      	ldrb	r3, [r3, #2]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d005      	beq.n	80096e4 <find_volume+0x248>
 80096d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096da:	789b      	ldrb	r3, [r3, #2]
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d001      	beq.n	80096e4 <find_volume+0x248>
 80096e0:	230d      	movs	r3, #13
 80096e2:	e159      	b.n	8009998 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80096e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e6:	789b      	ldrb	r3, [r3, #2]
 80096e8:	461a      	mov	r2, r3
 80096ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ec:	fb02 f303 	mul.w	r3, r2, r3
 80096f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80096f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80096f8:	461a      	mov	r2, r3
 80096fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80096fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009700:	895b      	ldrh	r3, [r3, #10]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d008      	beq.n	8009718 <find_volume+0x27c>
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	895b      	ldrh	r3, [r3, #10]
 800970a:	461a      	mov	r2, r3
 800970c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970e:	895b      	ldrh	r3, [r3, #10]
 8009710:	3b01      	subs	r3, #1
 8009712:	4013      	ands	r3, r2
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <find_volume+0x280>
 8009718:	230d      	movs	r3, #13
 800971a:	e13d      	b.n	8009998 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800971c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971e:	333c      	adds	r3, #60	@ 0x3c
 8009720:	3311      	adds	r3, #17
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe f80c 	bl	8007740 <ld_word>
 8009728:	4603      	mov	r3, r0
 800972a:	461a      	mov	r2, r3
 800972c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009732:	891b      	ldrh	r3, [r3, #8]
 8009734:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009736:	8992      	ldrh	r2, [r2, #12]
 8009738:	0952      	lsrs	r2, r2, #5
 800973a:	b292      	uxth	r2, r2
 800973c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009740:	fb01 f202 	mul.w	r2, r1, r2
 8009744:	1a9b      	subs	r3, r3, r2
 8009746:	b29b      	uxth	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <find_volume+0x2b8>
 800974c:	230d      	movs	r3, #13
 800974e:	e123      	b.n	8009998 <find_volume+0x4fc>
 8009750:	2000074c 	.word	0x2000074c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009756:	333c      	adds	r3, #60	@ 0x3c
 8009758:	3313      	adds	r3, #19
 800975a:	4618      	mov	r0, r3
 800975c:	f7fd fff0 	bl	8007740 <ld_word>
 8009760:	4603      	mov	r3, r0
 8009762:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009766:	2b00      	cmp	r3, #0
 8009768:	d106      	bne.n	8009778 <find_volume+0x2dc>
 800976a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976c:	333c      	adds	r3, #60	@ 0x3c
 800976e:	3320      	adds	r3, #32
 8009770:	4618      	mov	r0, r3
 8009772:	f7fd fffd 	bl	8007770 <ld_dword>
 8009776:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977a:	333c      	adds	r3, #60	@ 0x3c
 800977c:	330e      	adds	r3, #14
 800977e:	4618      	mov	r0, r3
 8009780:	f7fd ffde 	bl	8007740 <ld_word>
 8009784:	4603      	mov	r3, r0
 8009786:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009788:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <find_volume+0x2f6>
 800978e:	230d      	movs	r3, #13
 8009790:	e102      	b.n	8009998 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009792:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009796:	4413      	add	r3, r2
 8009798:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800979a:	8911      	ldrh	r1, [r2, #8]
 800979c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800979e:	8992      	ldrh	r2, [r2, #12]
 80097a0:	0952      	lsrs	r2, r2, #5
 80097a2:	b292      	uxth	r2, r2
 80097a4:	fbb1 f2f2 	udiv	r2, r1, r2
 80097a8:	b292      	uxth	r2, r2
 80097aa:	4413      	add	r3, r2
 80097ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80097ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d201      	bcs.n	80097ba <find_volume+0x31e>
 80097b6:	230d      	movs	r3, #13
 80097b8:	e0ee      	b.n	8009998 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80097ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097c2:	8952      	ldrh	r2, [r2, #10]
 80097c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80097c8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80097ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <find_volume+0x338>
 80097d0:	230d      	movs	r3, #13
 80097d2:	e0e1      	b.n	8009998 <find_volume+0x4fc>
		fmt = FS_FAT32;
 80097d4:	2303      	movs	r3, #3
 80097d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80097da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097dc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d802      	bhi.n	80097ea <find_volume+0x34e>
 80097e4:	2302      	movs	r3, #2
 80097e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80097ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ec:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d802      	bhi.n	80097fa <find_volume+0x35e>
 80097f4:	2301      	movs	r3, #1
 80097f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80097fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fc:	1c9a      	adds	r2, r3, #2
 80097fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009800:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8009802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009804:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009806:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009808:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800980a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800980c:	441a      	add	r2, r3
 800980e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009810:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8009812:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009816:	441a      	add	r2, r3
 8009818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800981c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009820:	2b03      	cmp	r3, #3
 8009822:	d11e      	bne.n	8009862 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009826:	333c      	adds	r3, #60	@ 0x3c
 8009828:	332a      	adds	r3, #42	@ 0x2a
 800982a:	4618      	mov	r0, r3
 800982c:	f7fd ff88 	bl	8007740 <ld_word>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <find_volume+0x39e>
 8009836:	230d      	movs	r3, #13
 8009838:	e0ae      	b.n	8009998 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800983a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983c:	891b      	ldrh	r3, [r3, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <find_volume+0x3aa>
 8009842:	230d      	movs	r3, #13
 8009844:	e0a8      	b.n	8009998 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009848:	333c      	adds	r3, #60	@ 0x3c
 800984a:	332c      	adds	r3, #44	@ 0x2c
 800984c:	4618      	mov	r0, r3
 800984e:	f7fd ff8f 	bl	8007770 <ld_dword>
 8009852:	4602      	mov	r2, r0
 8009854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009856:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009860:	e01f      	b.n	80098a2 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009864:	891b      	ldrh	r3, [r3, #8]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <find_volume+0x3d2>
 800986a:	230d      	movs	r3, #13
 800986c:	e094      	b.n	8009998 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800986e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009874:	441a      	add	r2, r3
 8009876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009878:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800987a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800987e:	2b02      	cmp	r3, #2
 8009880:	d103      	bne.n	800988a <find_volume+0x3ee>
 8009882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	e00a      	b.n	80098a0 <find_volume+0x404>
 800988a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988c:	6a1a      	ldr	r2, [r3, #32]
 800988e:	4613      	mov	r3, r2
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	4413      	add	r3, r2
 8009894:	085a      	lsrs	r2, r3, #1
 8009896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80098a0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80098a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a8:	899b      	ldrh	r3, [r3, #12]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ae:	440b      	add	r3, r1
 80098b0:	3b01      	subs	r3, #1
 80098b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80098b4:	8989      	ldrh	r1, [r1, #12]
 80098b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d201      	bcs.n	80098c2 <find_volume+0x426>
 80098be:	230d      	movs	r3, #13
 80098c0:	e06a      	b.n	8009998 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80098c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80098c8:	61da      	str	r2, [r3, #28]
 80098ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098cc:	69da      	ldr	r2, [r3, #28]
 80098ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 80098d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d4:	2280      	movs	r2, #128	@ 0x80
 80098d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80098d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80098dc:	2b03      	cmp	r3, #3
 80098de:	d149      	bne.n	8009974 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80098e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e2:	333c      	adds	r3, #60	@ 0x3c
 80098e4:	3330      	adds	r3, #48	@ 0x30
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fd ff2a 	bl	8007740 <ld_word>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d140      	bne.n	8009974 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80098f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098f4:	3301      	adds	r3, #1
 80098f6:	4619      	mov	r1, r3
 80098f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80098fa:	f7fe fa03 	bl	8007d04 <move_window>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d137      	bne.n	8009974 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8009904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009906:	2200      	movs	r2, #0
 8009908:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800990a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990c:	333c      	adds	r3, #60	@ 0x3c
 800990e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009912:	4618      	mov	r0, r3
 8009914:	f7fd ff14 	bl	8007740 <ld_word>
 8009918:	4603      	mov	r3, r0
 800991a:	461a      	mov	r2, r3
 800991c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009920:	429a      	cmp	r2, r3
 8009922:	d127      	bne.n	8009974 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009926:	333c      	adds	r3, #60	@ 0x3c
 8009928:	4618      	mov	r0, r3
 800992a:	f7fd ff21 	bl	8007770 <ld_dword>
 800992e:	4603      	mov	r3, r0
 8009930:	4a1b      	ldr	r2, [pc, #108]	@ (80099a0 <find_volume+0x504>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d11e      	bne.n	8009974 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009938:	333c      	adds	r3, #60	@ 0x3c
 800993a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800993e:	4618      	mov	r0, r3
 8009940:	f7fd ff16 	bl	8007770 <ld_dword>
 8009944:	4603      	mov	r3, r0
 8009946:	4a17      	ldr	r2, [pc, #92]	@ (80099a4 <find_volume+0x508>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d113      	bne.n	8009974 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800994c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994e:	333c      	adds	r3, #60	@ 0x3c
 8009950:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009954:	4618      	mov	r0, r3
 8009956:	f7fd ff0b 	bl	8007770 <ld_dword>
 800995a:	4602      	mov	r2, r0
 800995c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009962:	333c      	adds	r3, #60	@ 0x3c
 8009964:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009968:	4618      	mov	r0, r3
 800996a:	f7fd ff01 	bl	8007770 <ld_dword>
 800996e:	4602      	mov	r2, r0
 8009970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009972:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009976:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800997a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800997c:	4b0a      	ldr	r3, [pc, #40]	@ (80099a8 <find_volume+0x50c>)
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	3301      	adds	r3, #1
 8009982:	b29a      	uxth	r2, r3
 8009984:	4b08      	ldr	r3, [pc, #32]	@ (80099a8 <find_volume+0x50c>)
 8009986:	801a      	strh	r2, [r3, #0]
 8009988:	4b07      	ldr	r3, [pc, #28]	@ (80099a8 <find_volume+0x50c>)
 800998a:	881a      	ldrh	r2, [r3, #0]
 800998c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009990:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009992:	f7fe f94f 	bl	8007c34 <clear_lock>
#endif
	return FR_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3758      	adds	r7, #88	@ 0x58
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	41615252 	.word	0x41615252
 80099a4:	61417272 	.word	0x61417272
 80099a8:	20000750 	.word	0x20000750

080099ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80099b6:	2309      	movs	r3, #9
 80099b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d02e      	beq.n	8009a1e <validate+0x72>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d02a      	beq.n	8009a1e <validate+0x72>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d025      	beq.n	8009a1e <validate+0x72>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	889a      	ldrh	r2, [r3, #4]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	88db      	ldrh	r3, [r3, #6]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d11e      	bne.n	8009a1e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fd ffab 	bl	8007940 <lock_fs>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d014      	beq.n	8009a1a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	785b      	ldrb	r3, [r3, #1]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fd fe02 	bl	8007600 <disk_status>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d102      	bne.n	8009a0c <validate+0x60>
				res = FR_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73fb      	strb	r3, [r7, #15]
 8009a0a:	e008      	b.n	8009a1e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2100      	movs	r1, #0
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fd ffaa 	bl	800796c <unlock_fs>
 8009a18:	e001      	b.n	8009a1e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009a1a:	230f      	movs	r3, #15
 8009a1c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d102      	bne.n	8009a2a <validate+0x7e>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	e000      	b.n	8009a2c <validate+0x80>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	6013      	str	r3, [r2, #0]
	return res;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b088      	sub	sp, #32
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	4613      	mov	r3, r2
 8009a48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009a4e:	f107 0310 	add.w	r3, r7, #16
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7ff fc88 	bl	8009368 <get_ldnumber>
 8009a58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	da01      	bge.n	8009a64 <f_mount+0x28>
 8009a60:	230b      	movs	r3, #11
 8009a62:	e048      	b.n	8009af6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a64:	4a26      	ldr	r2, [pc, #152]	@ (8009b00 <f_mount+0xc4>)
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00f      	beq.n	8009a94 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009a74:	69b8      	ldr	r0, [r7, #24]
 8009a76:	f7fe f8dd 	bl	8007c34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f001 fb6d 	bl	800b15e <ff_del_syncobj>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d101      	bne.n	8009a8e <f_mount+0x52>
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	e033      	b.n	8009af6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	2200      	movs	r2, #0
 8009a92:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00f      	beq.n	8009aba <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	3314      	adds	r3, #20
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f001 fb3c 	bl	800b128 <ff_cre_syncobj>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <f_mount+0x7e>
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e01d      	b.n	8009af6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	4910      	ldr	r1, [pc, #64]	@ (8009b00 <f_mount+0xc4>)
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d002      	beq.n	8009ad0 <f_mount+0x94>
 8009aca:	79fb      	ldrb	r3, [r7, #7]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d001      	beq.n	8009ad4 <f_mount+0x98>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	e010      	b.n	8009af6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009ad4:	f107 010c 	add.w	r1, r7, #12
 8009ad8:	f107 0308 	add.w	r3, r7, #8
 8009adc:	2200      	movs	r2, #0
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff fcdc 	bl	800949c <find_volume>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	7dfa      	ldrb	r2, [r7, #23]
 8009aec:	4611      	mov	r1, r2
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fd ff3c 	bl	800796c <unlock_fs>
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3720      	adds	r7, #32
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	2000074c 	.word	0x2000074c

08009b04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b09a      	sub	sp, #104	@ 0x68
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <f_open+0x18>
 8009b18:	2309      	movs	r3, #9
 8009b1a:	e1d3      	b.n	8009ec4 <f_open+0x3c0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b22:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009b24:	79fa      	ldrb	r2, [r7, #7]
 8009b26:	f107 0110 	add.w	r1, r7, #16
 8009b2a:	f107 0308 	add.w	r3, r7, #8
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff fcb4 	bl	800949c <find_volume>
 8009b34:	4603      	mov	r3, r0
 8009b36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8009b3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f040 81b0 	bne.w	8009ea4 <f_open+0x3a0>
		dj.obj.fs = fs;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8009b48:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009b4c:	f001 fb33 	bl	800b1b6 <ff_memalloc>
 8009b50:	65b8      	str	r0, [r7, #88]	@ 0x58
 8009b52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d106      	bne.n	8009b66 <f_open+0x62>
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	2111      	movs	r1, #17
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fd ff05 	bl	800796c <unlock_fs>
 8009b62:	2311      	movs	r3, #17
 8009b64:	e1ae      	b.n	8009ec4 <f_open+0x3c0>
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b6a:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	f107 0314 	add.w	r3, r7, #20
 8009b72:	4611      	mov	r1, r2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff fb81 	bl	800927c <follow_path>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009b80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d118      	bne.n	8009bba <f_open+0xb6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009b88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b8c:	b25b      	sxtb	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	da03      	bge.n	8009b9a <f_open+0x96>
				res = FR_INVALID_NAME;
 8009b92:	2306      	movs	r3, #6
 8009b94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009b98:	e00f      	b.n	8009bba <f_open+0xb6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b9a:	79fb      	ldrb	r3, [r7, #7]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	bf8c      	ite	hi
 8009ba0:	2301      	movhi	r3, #1
 8009ba2:	2300      	movls	r3, #0
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f107 0314 	add.w	r3, r7, #20
 8009bac:	4611      	mov	r1, r2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fd fef8 	bl	80079a4 <chk_lock>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	f003 031c 	and.w	r3, r3, #28
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d07f      	beq.n	8009cc4 <f_open+0x1c0>
			if (res != FR_OK) {					/* No file, create new */
 8009bc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d017      	beq.n	8009bfc <f_open+0xf8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009bcc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d10e      	bne.n	8009bf2 <f_open+0xee>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009bd4:	f7fd ff42 	bl	8007a5c <enq_lock>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d006      	beq.n	8009bec <f_open+0xe8>
 8009bde:	f107 0314 	add.w	r3, r7, #20
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff f89a 	bl	8008d1c <dir_register>
 8009be8:	4603      	mov	r3, r0
 8009bea:	e000      	b.n	8009bee <f_open+0xea>
 8009bec:	2312      	movs	r3, #18
 8009bee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009bf2:	79fb      	ldrb	r3, [r7, #7]
 8009bf4:	f043 0308 	orr.w	r3, r3, #8
 8009bf8:	71fb      	strb	r3, [r7, #7]
 8009bfa:	e010      	b.n	8009c1e <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009bfc:	7ebb      	ldrb	r3, [r7, #26]
 8009bfe:	f003 0311 	and.w	r3, r3, #17
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <f_open+0x10a>
					res = FR_DENIED;
 8009c06:	2307      	movs	r3, #7
 8009c08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009c0c:	e007      	b.n	8009c1e <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	f003 0304 	and.w	r3, r3, #4
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d002      	beq.n	8009c1e <f_open+0x11a>
 8009c18:	2308      	movs	r3, #8
 8009c1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009c1e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d168      	bne.n	8009cf8 <f_open+0x1f4>
 8009c26:	79fb      	ldrb	r3, [r7, #7]
 8009c28:	f003 0308 	and.w	r3, r3, #8
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d063      	beq.n	8009cf8 <f_open+0x1f4>
				dw = GET_FATTIME();
 8009c30:	f7fd fa8c 	bl	800714c <get_fattime>
 8009c34:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c38:	330e      	adds	r3, #14
 8009c3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fd fdd5 	bl	80077ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c44:	3316      	adds	r3, #22
 8009c46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fd fdcf 	bl	80077ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c50:	330b      	adds	r3, #11
 8009c52:	2220      	movs	r2, #32
 8009c54:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe fdd6 	bl	800880e <ld_clust>
 8009c62:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009c68:	2200      	movs	r2, #0
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fdee 	bl	800884c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c72:	331c      	adds	r3, #28
 8009c74:	2100      	movs	r1, #0
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fd fdb8 	bl	80077ec <st_dword>
					fs->wflag = 1;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d037      	beq.n	8009cf8 <f_open+0x1f4>
						dw = fs->winsect;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c8c:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8009c8e:	f107 0314 	add.w	r3, r7, #20
 8009c92:	2200      	movs	r2, #0
 8009c94:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe fade 	bl	8008258 <remove_chain>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8009ca2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d126      	bne.n	8009cf8 <f_open+0x1f4>
							res = move_window(fs, dw);
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe f828 	bl	8007d04 <move_window>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009cbe:	3a01      	subs	r2, #1
 8009cc0:	619a      	str	r2, [r3, #24]
 8009cc2:	e019      	b.n	8009cf8 <f_open+0x1f4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009cc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d115      	bne.n	8009cf8 <f_open+0x1f4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009ccc:	7ebb      	ldrb	r3, [r7, #26]
 8009cce:	f003 0310 	and.w	r3, r3, #16
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <f_open+0x1da>
					res = FR_NO_FILE;
 8009cd6:	2304      	movs	r3, #4
 8009cd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009cdc:	e00c      	b.n	8009cf8 <f_open+0x1f4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009cde:	79fb      	ldrb	r3, [r7, #7]
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d007      	beq.n	8009cf8 <f_open+0x1f4>
 8009ce8:	7ebb      	ldrb	r3, [r7, #26]
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d002      	beq.n	8009cf8 <f_open+0x1f4>
						res = FR_DENIED;
 8009cf2:	2307      	movs	r3, #7
 8009cf4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009cf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d126      	bne.n	8009d4e <f_open+0x24a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	f003 0308 	and.w	r3, r3, #8
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d003      	beq.n	8009d12 <f_open+0x20e>
				mode |= FA_MODIFIED;
 8009d0a:	79fb      	ldrb	r3, [r7, #7]
 8009d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d10:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009d1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d20:	79fb      	ldrb	r3, [r7, #7]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	bf8c      	ite	hi
 8009d26:	2301      	movhi	r3, #1
 8009d28:	2300      	movls	r3, #0
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	f107 0314 	add.w	r3, r7, #20
 8009d32:	4611      	mov	r1, r2
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fd feb3 	bl	8007aa0 <inc_lock>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <f_open+0x24a>
 8009d48:	2302      	movs	r3, #2
 8009d4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009d4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f040 80a3 	bne.w	8009e9e <f_open+0x39a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe fd55 	bl	800880e <ld_clust>
 8009d64:	4602      	mov	r2, r0
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d6c:	331c      	adds	r3, #28
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fd fcfe 	bl	8007770 <ld_dword>
 8009d74:	4602      	mov	r2, r0
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	88da      	ldrh	r2, [r3, #6]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	79fa      	ldrb	r2, [r7, #7]
 8009d92:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3330      	adds	r3, #48	@ 0x30
 8009daa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009dae:	2100      	movs	r1, #0
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fd fd68 	bl	8007886 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d06e      	beq.n	8009e9e <f_open+0x39a>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d06a      	beq.n	8009e9e <f_open+0x39a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	68da      	ldr	r2, [r3, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	895b      	ldrh	r3, [r3, #10]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	899b      	ldrh	r3, [r3, #12]
 8009dda:	fb02 f303 	mul.w	r3, r2, r3
 8009dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dec:	e016      	b.n	8009e1c <f_open+0x318>
					clst = get_fat(&fp->obj, clst);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fe f843 	bl	8007e7e <get_fat>
 8009df8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009dfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d802      	bhi.n	8009e06 <f_open+0x302>
 8009e00:	2302      	movs	r3, #2
 8009e02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009e06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e0c:	d102      	bne.n	8009e14 <f_open+0x310>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d103      	bne.n	8009e2c <f_open+0x328>
 8009e24:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d8e0      	bhi.n	8009dee <f_open+0x2ea>
				}
				fp->clust = clst;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e30:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009e32:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d131      	bne.n	8009e9e <f_open+0x39a>
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	899b      	ldrh	r3, [r3, #12]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e42:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e46:	fb01 f202 	mul.w	r2, r1, r2
 8009e4a:	1a9b      	subs	r3, r3, r2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d026      	beq.n	8009e9e <f_open+0x39a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fd fff3 	bl	8007e40 <clust2sect>
 8009e5a:	64b8      	str	r0, [r7, #72]	@ 0x48
 8009e5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d103      	bne.n	8009e6a <f_open+0x366>
						res = FR_INT_ERR;
 8009e62:	2302      	movs	r3, #2
 8009e64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009e68:	e019      	b.n	8009e9e <f_open+0x39a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	899b      	ldrh	r3, [r3, #12]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e72:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e78:	441a      	add	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	7858      	ldrb	r0, [r3, #1]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6a1a      	ldr	r2, [r3, #32]
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	f7fd fbf9 	bl	8007684 <disk_read>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d002      	beq.n	8009e9e <f_open+0x39a>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8009e9e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009ea0:	f001 f995 	bl	800b1ce <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009ea4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <f_open+0x3ae>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009eb8:	4611      	mov	r1, r2
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fd fd56 	bl	800796c <unlock_fs>
 8009ec0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3768      	adds	r7, #104	@ 0x68
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08e      	sub	sp, #56	@ 0x38
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
 8009ed8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f107 0214 	add.w	r2, r7, #20
 8009eea:	4611      	mov	r1, r2
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff fd5d 	bl	80099ac <validate>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009ef8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d107      	bne.n	8009f10 <f_read+0x44>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	7d5b      	ldrb	r3, [r3, #21]
 8009f04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009f08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d009      	beq.n	8009f24 <f_read+0x58>
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009f16:	4611      	mov	r1, r2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fd fd27 	bl	800796c <unlock_fs>
 8009f1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f22:	e15d      	b.n	800a1e0 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	7d1b      	ldrb	r3, [r3, #20]
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d106      	bne.n	8009f3e <f_read+0x72>
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2107      	movs	r1, #7
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fd fd19 	bl	800796c <unlock_fs>
 8009f3a:	2307      	movs	r3, #7
 8009f3c:	e150      	b.n	800a1e0 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	68da      	ldr	r2, [r3, #12]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	f240 813c 	bls.w	800a1cc <f_read+0x300>
 8009f54:	6a3b      	ldr	r3, [r7, #32]
 8009f56:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009f58:	e138      	b.n	800a1cc <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	8992      	ldrh	r2, [r2, #12]
 8009f62:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f66:	fb01 f202 	mul.w	r2, r1, r2
 8009f6a:	1a9b      	subs	r3, r3, r2
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f040 80f3 	bne.w	800a158 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	8992      	ldrh	r2, [r2, #12]
 8009f7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	8952      	ldrh	r2, [r2, #10]
 8009f82:	3a01      	subs	r2, #1
 8009f84:	4013      	ands	r3, r2
 8009f86:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d139      	bne.n	800a002 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d103      	bne.n	8009f9e <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f9c:	e013      	b.n	8009fc6 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d007      	beq.n	8009fb6 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	4619      	mov	r1, r3
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f7fe fa50 	bl	8008452 <clmt_clust>
 8009fb2:	6338      	str	r0, [r7, #48]	@ 0x30
 8009fb4:	e007      	b.n	8009fc6 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	69db      	ldr	r3, [r3, #28]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	f7fd ff5d 	bl	8007e7e <get_fat>
 8009fc4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d809      	bhi.n	8009fe0 <f_read+0x114>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2202      	movs	r2, #2
 8009fd0:	755a      	strb	r2, [r3, #21]
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	2102      	movs	r1, #2
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fd fcc8 	bl	800796c <unlock_fs>
 8009fdc:	2302      	movs	r3, #2
 8009fde:	e0ff      	b.n	800a1e0 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fe6:	d109      	bne.n	8009ffc <f_read+0x130>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2201      	movs	r2, #1
 8009fec:	755a      	strb	r2, [r3, #21]
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fd fcba 	bl	800796c <unlock_fs>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e0f1      	b.n	800a1e0 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a000:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	4619      	mov	r1, r3
 800a00a:	4610      	mov	r0, r2
 800a00c:	f7fd ff18 	bl	8007e40 <clust2sect>
 800a010:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d109      	bne.n	800a02c <f_read+0x160>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2202      	movs	r2, #2
 800a01c:	755a      	strb	r2, [r3, #21]
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2102      	movs	r1, #2
 800a022:	4618      	mov	r0, r3
 800a024:	f7fd fca2 	bl	800796c <unlock_fs>
 800a028:	2302      	movs	r3, #2
 800a02a:	e0d9      	b.n	800a1e0 <f_read+0x314>
			sect += csect;
 800a02c:	69ba      	ldr	r2, [r7, #24]
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	4413      	add	r3, r2
 800a032:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	899b      	ldrh	r3, [r3, #12]
 800a038:	461a      	mov	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a040:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a044:	2b00      	cmp	r3, #0
 800a046:	d046      	beq.n	800a0d6 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a048:	69fa      	ldr	r2, [r7, #28]
 800a04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04c:	4413      	add	r3, r2
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	8952      	ldrh	r2, [r2, #10]
 800a052:	4293      	cmp	r3, r2
 800a054:	d905      	bls.n	800a062 <f_read+0x196>
					cc = fs->csize - csect;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	895b      	ldrh	r3, [r3, #10]
 800a05a:	461a      	mov	r2, r3
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	7858      	ldrb	r0, [r3, #1]
 800a066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a068:	69ba      	ldr	r2, [r7, #24]
 800a06a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a06c:	f7fd fb0a 	bl	8007684 <disk_read>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d009      	beq.n	800a08a <f_read+0x1be>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2201      	movs	r2, #1
 800a07a:	755a      	strb	r2, [r3, #21]
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	2101      	movs	r1, #1
 800a080:	4618      	mov	r0, r3
 800a082:	f7fd fc73 	bl	800796c <unlock_fs>
 800a086:	2301      	movs	r3, #1
 800a088:	e0aa      	b.n	800a1e0 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	7d1b      	ldrb	r3, [r3, #20]
 800a08e:	b25b      	sxtb	r3, r3
 800a090:	2b00      	cmp	r3, #0
 800a092:	da18      	bge.n	800a0c6 <f_read+0x1fa>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6a1a      	ldr	r2, [r3, #32]
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d911      	bls.n	800a0c6 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6a1a      	ldr	r2, [r3, #32]
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	8992      	ldrh	r2, [r2, #12]
 800a0ae:	fb02 f303 	mul.w	r3, r2, r3
 800a0b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0b4:	18d0      	adds	r0, r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	899b      	ldrh	r3, [r3, #12]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	f7fd fbbf 	bl	8007844 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	899b      	ldrh	r3, [r3, #12]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ce:	fb02 f303 	mul.w	r3, r2, r3
 800a0d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a0d4:	e066      	b.n	800a1a4 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d038      	beq.n	800a152 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	7d1b      	ldrb	r3, [r3, #20]
 800a0e4:	b25b      	sxtb	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	da1d      	bge.n	800a126 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	7858      	ldrb	r0, [r3, #1]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6a1a      	ldr	r2, [r3, #32]
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	f7fd fae3 	bl	80076c4 <disk_write>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d009      	beq.n	800a118 <f_read+0x24c>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2201      	movs	r2, #1
 800a108:	755a      	strb	r2, [r3, #21]
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	2101      	movs	r1, #1
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fd fc2c 	bl	800796c <unlock_fs>
 800a114:	2301      	movs	r3, #1
 800a116:	e063      	b.n	800a1e0 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	7d1b      	ldrb	r3, [r3, #20]
 800a11c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a120:	b2da      	uxtb	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	7858      	ldrb	r0, [r3, #1]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a130:	2301      	movs	r3, #1
 800a132:	69ba      	ldr	r2, [r7, #24]
 800a134:	f7fd faa6 	bl	8007684 <disk_read>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d009      	beq.n	800a152 <f_read+0x286>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	755a      	strb	r2, [r3, #21]
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2101      	movs	r1, #1
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fd fc0f 	bl	800796c <unlock_fs>
 800a14e:	2301      	movs	r3, #1
 800a150:	e046      	b.n	800a1e0 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	899b      	ldrh	r3, [r3, #12]
 800a15c:	4618      	mov	r0, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	8992      	ldrh	r2, [r2, #12]
 800a166:	fbb3 f1f2 	udiv	r1, r3, r2
 800a16a:	fb01 f202 	mul.w	r2, r1, r2
 800a16e:	1a9b      	subs	r3, r3, r2
 800a170:	1ac3      	subs	r3, r0, r3
 800a172:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d901      	bls.n	800a180 <f_read+0x2b4>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	8992      	ldrh	r2, [r2, #12]
 800a18e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a192:	fb00 f202 	mul.w	r2, r0, r2
 800a196:	1a9b      	subs	r3, r3, r2
 800a198:	440b      	add	r3, r1
 800a19a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a19c:	4619      	mov	r1, r3
 800a19e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a1a0:	f7fd fb50 	bl	8007844 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a1a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a8:	4413      	add	r3, r2
 800a1aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	699a      	ldr	r2, [r3, #24]
 800a1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b2:	441a      	add	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	619a      	str	r2, [r3, #24]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1be:	441a      	add	r2, r3
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f47f aec3 	bne.w	8009f5a <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fd fbc7 	bl	800796c <unlock_fs>
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3738      	adds	r7, #56	@ 0x38
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08c      	sub	sp, #48	@ 0x30
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f107 0210 	add.w	r2, r7, #16
 800a206:	4611      	mov	r1, r2
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff fbcf 	bl	80099ac <validate>
 800a20e:	4603      	mov	r3, r0
 800a210:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a214:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d107      	bne.n	800a22c <f_write+0x44>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	7d5b      	ldrb	r3, [r3, #21]
 800a220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a224:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d009      	beq.n	800a240 <f_write+0x58>
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a232:	4611      	mov	r1, r2
 800a234:	4618      	mov	r0, r3
 800a236:	f7fd fb99 	bl	800796c <unlock_fs>
 800a23a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a23e:	e192      	b.n	800a566 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	7d1b      	ldrb	r3, [r3, #20]
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d106      	bne.n	800a25a <f_write+0x72>
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	2107      	movs	r1, #7
 800a250:	4618      	mov	r0, r3
 800a252:	f7fd fb8b 	bl	800796c <unlock_fs>
 800a256:	2307      	movs	r3, #7
 800a258:	e185      	b.n	800a566 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	699a      	ldr	r2, [r3, #24]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	441a      	add	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	429a      	cmp	r2, r3
 800a268:	f080 816a 	bcs.w	800a540 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	43db      	mvns	r3, r3
 800a272:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a274:	e164      	b.n	800a540 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	8992      	ldrh	r2, [r2, #12]
 800a27e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a282:	fb01 f202 	mul.w	r2, r1, r2
 800a286:	1a9b      	subs	r3, r3, r2
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f040 810f 	bne.w	800a4ac <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	8992      	ldrh	r2, [r2, #12]
 800a296:	fbb3 f3f2 	udiv	r3, r3, r2
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	8952      	ldrh	r2, [r2, #10]
 800a29e:	3a01      	subs	r2, #1
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d14d      	bne.n	800a346 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10c      	bne.n	800a2cc <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d11a      	bne.n	800a2f4 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe f82d 	bl	8008322 <create_chain>
 800a2c8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a2ca:	e013      	b.n	800a2f4 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d007      	beq.n	800a2e4 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7fe f8b9 	bl	8008452 <clmt_clust>
 800a2e0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a2e2:	e007      	b.n	800a2f4 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	f7fe f818 	bl	8008322 <create_chain>
 800a2f2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 8127 	beq.w	800a54a <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d109      	bne.n	800a316 <f_write+0x12e>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2202      	movs	r2, #2
 800a306:	755a      	strb	r2, [r3, #21]
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	2102      	movs	r1, #2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fd fb2d 	bl	800796c <unlock_fs>
 800a312:	2302      	movs	r3, #2
 800a314:	e127      	b.n	800a566 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a318:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a31c:	d109      	bne.n	800a332 <f_write+0x14a>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2201      	movs	r2, #1
 800a322:	755a      	strb	r2, [r3, #21]
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	2101      	movs	r1, #1
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fd fb1f 	bl	800796c <unlock_fs>
 800a32e:	2301      	movs	r3, #1
 800a330:	e119      	b.n	800a566 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a336:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <f_write+0x15e>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a344:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	7d1b      	ldrb	r3, [r3, #20]
 800a34a:	b25b      	sxtb	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	da1d      	bge.n	800a38c <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	7858      	ldrb	r0, [r3, #1]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6a1a      	ldr	r2, [r3, #32]
 800a35e:	2301      	movs	r3, #1
 800a360:	f7fd f9b0 	bl	80076c4 <disk_write>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d009      	beq.n	800a37e <f_write+0x196>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2201      	movs	r2, #1
 800a36e:	755a      	strb	r2, [r3, #21]
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	2101      	movs	r1, #1
 800a374:	4618      	mov	r0, r3
 800a376:	f7fd faf9 	bl	800796c <unlock_fs>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e0f3      	b.n	800a566 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	7d1b      	ldrb	r3, [r3, #20]
 800a382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a386:	b2da      	uxtb	r2, r3
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	4619      	mov	r1, r3
 800a394:	4610      	mov	r0, r2
 800a396:	f7fd fd53 	bl	8007e40 <clust2sect>
 800a39a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d109      	bne.n	800a3b6 <f_write+0x1ce>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2202      	movs	r2, #2
 800a3a6:	755a      	strb	r2, [r3, #21]
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	2102      	movs	r1, #2
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fd fadd 	bl	800796c <unlock_fs>
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	e0d7      	b.n	800a566 <f_write+0x37e>
			sect += csect;
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	899b      	ldrh	r3, [r3, #12]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3ca:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d048      	beq.n	800a464 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a3d2:	69ba      	ldr	r2, [r7, #24]
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	8952      	ldrh	r2, [r2, #10]
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d905      	bls.n	800a3ec <f_write+0x204>
					cc = fs->csize - csect;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	895b      	ldrh	r3, [r3, #10]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	7858      	ldrb	r0, [r3, #1]
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	69f9      	ldr	r1, [r7, #28]
 800a3f6:	f7fd f965 	bl	80076c4 <disk_write>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d009      	beq.n	800a414 <f_write+0x22c>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2201      	movs	r2, #1
 800a404:	755a      	strb	r2, [r3, #21]
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	2101      	movs	r1, #1
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fd faae 	bl	800796c <unlock_fs>
 800a410:	2301      	movs	r3, #1
 800a412:	e0a8      	b.n	800a566 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6a1a      	ldr	r2, [r3, #32]
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	6a3a      	ldr	r2, [r7, #32]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d918      	bls.n	800a454 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6a1a      	ldr	r2, [r3, #32]
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	8992      	ldrh	r2, [r2, #12]
 800a434:	fb02 f303 	mul.w	r3, r2, r3
 800a438:	69fa      	ldr	r2, [r7, #28]
 800a43a:	18d1      	adds	r1, r2, r3
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	899b      	ldrh	r3, [r3, #12]
 800a440:	461a      	mov	r2, r3
 800a442:	f7fd f9ff 	bl	8007844 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	7d1b      	ldrb	r3, [r3, #20]
 800a44a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a44e:	b2da      	uxtb	r2, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	899b      	ldrh	r3, [r3, #12]
 800a458:	461a      	mov	r2, r3
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	fb02 f303 	mul.w	r3, r2, r3
 800a460:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a462:	e050      	b.n	800a506 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d01b      	beq.n	800a4a6 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	699a      	ldr	r2, [r3, #24]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a476:	429a      	cmp	r2, r3
 800a478:	d215      	bcs.n	800a4a6 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	7858      	ldrb	r0, [r3, #1]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a484:	2301      	movs	r3, #1
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	f7fd f8fc 	bl	8007684 <disk_read>
 800a48c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d009      	beq.n	800a4a6 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2201      	movs	r2, #1
 800a496:	755a      	strb	r2, [r3, #21]
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2101      	movs	r1, #1
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fd fa65 	bl	800796c <unlock_fs>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e05f      	b.n	800a566 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	899b      	ldrh	r3, [r3, #12]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	8992      	ldrh	r2, [r2, #12]
 800a4ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4be:	fb01 f202 	mul.w	r2, r1, r2
 800a4c2:	1a9b      	subs	r3, r3, r2
 800a4c4:	1ac3      	subs	r3, r0, r3
 800a4c6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a4c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d901      	bls.n	800a4d4 <f_write+0x2ec>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	8992      	ldrh	r2, [r2, #12]
 800a4e2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4e6:	fb00 f202 	mul.w	r2, r0, r2
 800a4ea:	1a9b      	subs	r3, r3, r2
 800a4ec:	440b      	add	r3, r1
 800a4ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4f0:	69f9      	ldr	r1, [r7, #28]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fd f9a6 	bl	8007844 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	7d1b      	ldrb	r3, [r3, #20]
 800a4fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a500:	b2da      	uxtb	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a506:	69fa      	ldr	r2, [r7, #28]
 800a508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50a:	4413      	add	r3, r2
 800a50c:	61fb      	str	r3, [r7, #28]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	699a      	ldr	r2, [r3, #24]
 800a512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a514:	441a      	add	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	619a      	str	r2, [r3, #24]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	429a      	cmp	r2, r3
 800a524:	bf38      	it	cc
 800a526:	461a      	movcc	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	60da      	str	r2, [r3, #12]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a532:	441a      	add	r2, r3
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	f47f ae97 	bne.w	800a276 <f_write+0x8e>
 800a548:	e000      	b.n	800a54c <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a54a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	7d1b      	ldrb	r3, [r3, #20]
 800a550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a554:	b2da      	uxtb	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2100      	movs	r1, #0
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fd fa04 	bl	800796c <unlock_fs>
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3730      	adds	r7, #48	@ 0x30
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b086      	sub	sp, #24
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f107 0208 	add.w	r2, r7, #8
 800a57c:	4611      	mov	r1, r2
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff fa14 	bl	80099ac <validate>
 800a584:	4603      	mov	r3, r0
 800a586:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a588:	7dfb      	ldrb	r3, [r7, #23]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d16d      	bne.n	800a66a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	7d1b      	ldrb	r3, [r3, #20]
 800a592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a596:	2b00      	cmp	r3, #0
 800a598:	d067      	beq.n	800a66a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	7d1b      	ldrb	r3, [r3, #20]
 800a59e:	b25b      	sxtb	r3, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	da1a      	bge.n	800a5da <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	7858      	ldrb	r0, [r3, #1]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1a      	ldr	r2, [r3, #32]
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	f7fd f886 	bl	80076c4 <disk_write>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d006      	beq.n	800a5cc <f_sync+0x5e>
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2101      	movs	r1, #1
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fd f9d2 	bl	800796c <unlock_fs>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e055      	b.n	800a678 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	7d1b      	ldrb	r3, [r3, #20]
 800a5d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a5da:	f7fc fdb7 	bl	800714c <get_fattime>
 800a5de:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	f7fd fb8b 	bl	8007d04 <move_window>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a5f2:	7dfb      	ldrb	r3, [r7, #23]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d138      	bne.n	800a66a <f_sync+0xfc>
					dir = fp->dir_ptr;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	330b      	adds	r3, #11
 800a602:	781a      	ldrb	r2, [r3, #0]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	330b      	adds	r3, #11
 800a608:	f042 0220 	orr.w	r2, r2, #32
 800a60c:	b2d2      	uxtb	r2, r2
 800a60e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6818      	ldr	r0, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	461a      	mov	r2, r3
 800a61a:	68f9      	ldr	r1, [r7, #12]
 800a61c:	f7fe f916 	bl	800884c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f103 021c 	add.w	r2, r3, #28
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	4619      	mov	r1, r3
 800a62c:	4610      	mov	r0, r2
 800a62e:	f7fd f8dd 	bl	80077ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3316      	adds	r3, #22
 800a636:	6939      	ldr	r1, [r7, #16]
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fd f8d7 	bl	80077ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3312      	adds	r3, #18
 800a642:	2100      	movs	r1, #0
 800a644:	4618      	mov	r0, r3
 800a646:	f7fd f8b6 	bl	80077b6 <st_word>
					fs->wflag = 1;
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2201      	movs	r2, #1
 800a64e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	4618      	mov	r0, r3
 800a654:	f7fd fb84 	bl	8007d60 <sync_fs>
 800a658:	4603      	mov	r3, r0
 800a65a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	7d1b      	ldrb	r3, [r3, #20]
 800a660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a664:	b2da      	uxtb	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	7dfa      	ldrb	r2, [r7, #23]
 800a66e:	4611      	mov	r1, r2
 800a670:	4618      	mov	r0, r3
 800a672:	f7fd f97b 	bl	800796c <unlock_fs>
 800a676:	7dfb      	ldrb	r3, [r7, #23]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3718      	adds	r7, #24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f7ff ff70 	bl	800a56e <f_sync>
 800a68e:	4603      	mov	r3, r0
 800a690:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a692:	7bfb      	ldrb	r3, [r7, #15]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d11d      	bne.n	800a6d4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f107 0208 	add.w	r2, r7, #8
 800a69e:	4611      	mov	r1, r2
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff f983 	bl	80099ac <validate>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d111      	bne.n	800a6d4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fd fa81 	bl	8007bbc <dec_lock>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d102      	bne.n	800a6ca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fd f94c 	bl	800796c <unlock_fs>
#endif
		}
	}
	return res;
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b090      	sub	sp, #64	@ 0x40
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f107 0208 	add.w	r2, r7, #8
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7ff f95b 	bl	80099ac <validate>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a6fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a700:	2b00      	cmp	r3, #0
 800a702:	d103      	bne.n	800a70c <f_lseek+0x2e>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	7d5b      	ldrb	r3, [r3, #21]
 800a708:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a70c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a710:	2b00      	cmp	r3, #0
 800a712:	d009      	beq.n	800a728 <f_lseek+0x4a>
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800a71a:	4611      	mov	r1, r2
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fd f925 	bl	800796c <unlock_fs>
 800a722:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a726:	e244      	b.n	800abb2 <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 80f2 	beq.w	800a916 <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a738:	d164      	bne.n	800a804 <f_lseek+0x126>
			tbl = fp->cltbl;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a73e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a742:	1d1a      	adds	r2, r3, #4
 800a744:	627a      	str	r2, [r7, #36]	@ 0x24
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	2302      	movs	r3, #2
 800a74c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800a754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a756:	2b00      	cmp	r3, #0
 800a758:	d044      	beq.n	800a7e4 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75c:	613b      	str	r3, [r7, #16]
 800a75e:	2300      	movs	r3, #0
 800a760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a764:	3302      	adds	r3, #2
 800a766:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800a768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a76e:	3301      	adds	r3, #1
 800a770:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a776:	4618      	mov	r0, r3
 800a778:	f7fd fb81 	bl	8007e7e <get_fat>
 800a77c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a780:	2b01      	cmp	r3, #1
 800a782:	d809      	bhi.n	800a798 <f_lseek+0xba>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	755a      	strb	r2, [r3, #21]
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	2102      	movs	r1, #2
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fd f8ec 	bl	800796c <unlock_fs>
 800a794:	2302      	movs	r3, #2
 800a796:	e20c      	b.n	800abb2 <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a79e:	d109      	bne.n	800a7b4 <f_lseek+0xd6>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	755a      	strb	r2, [r3, #21]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fd f8de 	bl	800796c <unlock_fs>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e1fe      	b.n	800abb2 <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d0d4      	beq.n	800a768 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a7be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d809      	bhi.n	800a7da <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c8:	1d1a      	adds	r2, r3, #4
 800a7ca:	627a      	str	r2, [r7, #36]	@ 0x24
 800a7cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	1d1a      	adds	r2, r3, #4
 800a7d4:	627a      	str	r2, [r7, #36]	@ 0x24
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d3ba      	bcc.n	800a75a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7ea:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a7ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d803      	bhi.n	800a7fc <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	e1d1      	b.n	800aba0 <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a7fc:	2311      	movs	r3, #17
 800a7fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a802:	e1cd      	b.n	800aba0 <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d902      	bls.n	800a814 <f_lseek+0x136>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f000 81bf 	beq.w	800aba0 <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	3b01      	subs	r3, #1
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7fd fe12 	bl	8008452 <clmt_clust>
 800a82e:	4602      	mov	r2, r0
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	69db      	ldr	r3, [r3, #28]
 800a83a:	4619      	mov	r1, r3
 800a83c:	4610      	mov	r0, r2
 800a83e:	f7fd faff 	bl	8007e40 <clust2sect>
 800a842:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d109      	bne.n	800a85e <f_lseek+0x180>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2202      	movs	r2, #2
 800a84e:	755a      	strb	r2, [r3, #21]
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2102      	movs	r1, #2
 800a854:	4618      	mov	r0, r3
 800a856:	f7fd f889 	bl	800796c <unlock_fs>
 800a85a:	2302      	movs	r3, #2
 800a85c:	e1a9      	b.n	800abb2 <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	3b01      	subs	r3, #1
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	8992      	ldrh	r2, [r2, #12]
 800a866:	fbb3 f3f2 	udiv	r3, r3, r2
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	8952      	ldrh	r2, [r2, #10]
 800a86e:	3a01      	subs	r2, #1
 800a870:	4013      	ands	r3, r2
 800a872:	69ba      	ldr	r2, [r7, #24]
 800a874:	4413      	add	r3, r2
 800a876:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	8992      	ldrh	r2, [r2, #12]
 800a880:	fbb3 f1f2 	udiv	r1, r3, r2
 800a884:	fb01 f202 	mul.w	r2, r1, r2
 800a888:	1a9b      	subs	r3, r3, r2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f000 8188 	beq.w	800aba0 <f_lseek+0x4c2>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	69ba      	ldr	r2, [r7, #24]
 800a896:	429a      	cmp	r2, r3
 800a898:	f000 8182 	beq.w	800aba0 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	7d1b      	ldrb	r3, [r3, #20]
 800a8a0:	b25b      	sxtb	r3, r3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	da1d      	bge.n	800a8e2 <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	7858      	ldrb	r0, [r3, #1]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a1a      	ldr	r2, [r3, #32]
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	f7fc ff05 	bl	80076c4 <disk_write>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d009      	beq.n	800a8d4 <f_lseek+0x1f6>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	755a      	strb	r2, [r3, #21]
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	2101      	movs	r1, #1
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fd f84e 	bl	800796c <unlock_fs>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e16e      	b.n	800abb2 <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	7d1b      	ldrb	r3, [r3, #20]
 800a8d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8dc:	b2da      	uxtb	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	7858      	ldrb	r0, [r3, #1]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	f7fc fec8 	bl	8007684 <disk_read>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d009      	beq.n	800a90e <f_lseek+0x230>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	755a      	strb	r2, [r3, #21]
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	2101      	movs	r1, #1
 800a904:	4618      	mov	r0, r3
 800a906:	f7fd f831 	bl	800796c <unlock_fs>
 800a90a:	2301      	movs	r3, #1
 800a90c:	e151      	b.n	800abb2 <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	621a      	str	r2, [r3, #32]
 800a914:	e144      	b.n	800aba0 <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d908      	bls.n	800a932 <f_lseek+0x254>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	7d1b      	ldrb	r3, [r3, #20]
 800a924:	f003 0302 	and.w	r3, r3, #2
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d102      	bne.n	800a932 <f_lseek+0x254>
			ofs = fp->obj.objsize;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a940:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	f000 80ce 	beq.w	800aae6 <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	895b      	ldrh	r3, [r3, #10]
 800a94e:	461a      	mov	r2, r3
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	899b      	ldrh	r3, [r3, #12]
 800a954:	fb02 f303 	mul.w	r3, r2, r3
 800a958:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d01b      	beq.n	800a998 <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	1e5a      	subs	r2, r3, #1
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	fbb2 f2f3 	udiv	r2, r2, r3
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	1e59      	subs	r1, r3, #1
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a974:	429a      	cmp	r2, r3
 800a976:	d30f      	bcc.n	800a998 <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	1e5a      	subs	r2, r3, #1
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	425b      	negs	r3, r3
 800a980:	401a      	ands	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	69db      	ldr	r3, [r3, #28]
 800a994:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a996:	e02c      	b.n	800a9f2 <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d123      	bne.n	800a9ec <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fd fcba 	bl	8008322 <create_chain>
 800a9ae:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d109      	bne.n	800a9ca <f_lseek+0x2ec>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	755a      	strb	r2, [r3, #21]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2102      	movs	r1, #2
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fc ffd3 	bl	800796c <unlock_fs>
 800a9c6:	2302      	movs	r3, #2
 800a9c8:	e0f3      	b.n	800abb2 <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9d0:	d109      	bne.n	800a9e6 <f_lseek+0x308>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	755a      	strb	r2, [r3, #21]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2101      	movs	r1, #1
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fc ffc5 	bl	800796c <unlock_fs>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e0e5      	b.n	800abb2 <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9ea:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9f0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d076      	beq.n	800aae6 <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 800a9f8:	e044      	b.n	800aa84 <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	603b      	str	r3, [r7, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	699a      	ldr	r2, [r3, #24]
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	441a      	add	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	7d1b      	ldrb	r3, [r3, #20]
 800aa12:	f003 0302 	and.w	r3, r3, #2
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00b      	beq.n	800aa32 <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fd fc7f 	bl	8008322 <create_chain>
 800aa24:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800aa26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d108      	bne.n	800aa3e <f_lseek+0x360>
							ofs = 0; break;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	603b      	str	r3, [r7, #0]
 800aa30:	e02c      	b.n	800aa8c <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fd fa21 	bl	8007e7e <get_fat>
 800aa3c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa44:	d109      	bne.n	800aa5a <f_lseek+0x37c>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	755a      	strb	r2, [r3, #21]
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2101      	movs	r1, #1
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fc ff8b 	bl	800796c <unlock_fs>
 800aa56:	2301      	movs	r3, #1
 800aa58:	e0ab      	b.n	800abb2 <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d904      	bls.n	800aa6a <f_lseek+0x38c>
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d309      	bcc.n	800aa7e <f_lseek+0x3a0>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	755a      	strb	r2, [r3, #21]
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2102      	movs	r1, #2
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fc ff79 	bl	800796c <unlock_fs>
 800aa7a:	2302      	movs	r3, #2
 800aa7c:	e099      	b.n	800abb2 <f_lseek+0x4d4>
					fp->clust = clst;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa82:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d8b6      	bhi.n	800a9fa <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	699a      	ldr	r2, [r3, #24]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	441a      	add	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	899b      	ldrh	r3, [r3, #12]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	fbb3 f1f2 	udiv	r1, r3, r2
 800aaa4:	fb01 f202 	mul.w	r2, r1, r2
 800aaa8:	1a9b      	subs	r3, r3, r2
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d01b      	beq.n	800aae6 <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fd f9c4 	bl	8007e40 <clust2sect>
 800aab8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800aaba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d109      	bne.n	800aad4 <f_lseek+0x3f6>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2202      	movs	r2, #2
 800aac4:	755a      	strb	r2, [r3, #21]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	2102      	movs	r1, #2
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fc ff4e 	bl	800796c <unlock_fs>
 800aad0:	2302      	movs	r3, #2
 800aad2:	e06e      	b.n	800abb2 <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	899b      	ldrh	r3, [r3, #12]
 800aad8:	461a      	mov	r2, r3
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	fbb3 f3f2 	udiv	r3, r3, r2
 800aae0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aae2:	4413      	add	r3, r2
 800aae4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	699a      	ldr	r2, [r3, #24]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d90a      	bls.n	800ab08 <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	699a      	ldr	r2, [r3, #24]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	7d1b      	ldrb	r3, [r3, #20]
 800aafe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	699b      	ldr	r3, [r3, #24]
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	8992      	ldrh	r2, [r2, #12]
 800ab10:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab14:	fb01 f202 	mul.w	r2, r1, r2
 800ab18:	1a9b      	subs	r3, r3, r2
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d040      	beq.n	800aba0 <f_lseek+0x4c2>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d03b      	beq.n	800aba0 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	7d1b      	ldrb	r3, [r3, #20]
 800ab2c:	b25b      	sxtb	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	da1d      	bge.n	800ab6e <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	7858      	ldrb	r0, [r3, #1]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a1a      	ldr	r2, [r3, #32]
 800ab40:	2301      	movs	r3, #1
 800ab42:	f7fc fdbf 	bl	80076c4 <disk_write>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d009      	beq.n	800ab60 <f_lseek+0x482>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	755a      	strb	r2, [r3, #21]
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2101      	movs	r1, #1
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fc ff08 	bl	800796c <unlock_fs>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e028      	b.n	800abb2 <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	7d1b      	ldrb	r3, [r3, #20]
 800ab64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	7858      	ldrb	r0, [r3, #1]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab78:	2301      	movs	r3, #1
 800ab7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab7c:	f7fc fd82 	bl	8007684 <disk_read>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d009      	beq.n	800ab9a <f_lseek+0x4bc>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	755a      	strb	r2, [r3, #21]
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2101      	movs	r1, #1
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fc feeb 	bl	800796c <unlock_fs>
 800ab96:	2301      	movs	r3, #1
 800ab98:	e00b      	b.n	800abb2 <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab9e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800aba6:	4611      	mov	r1, r2
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fc fedf 	bl	800796c <unlock_fs>
 800abae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3740      	adds	r7, #64	@ 0x40
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b092      	sub	sp, #72	@ 0x48
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	60f8      	str	r0, [r7, #12]
 800abc2:	60b9      	str	r1, [r7, #8]
 800abc4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800abc6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800abca:	f107 030c 	add.w	r3, r7, #12
 800abce:	2200      	movs	r2, #0
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fe fc63 	bl	800949c <find_volume>
 800abd6:	4603      	mov	r3, r0
 800abd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800abdc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f040 8099 	bne.w	800ad18 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800abe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800abec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abee:	69da      	ldr	r2, [r3, #28]
 800abf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf2:	6a1b      	ldr	r3, [r3, #32]
 800abf4:	3b02      	subs	r3, #2
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d804      	bhi.n	800ac04 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800abfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abfc:	69da      	ldr	r2, [r3, #28]
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	e089      	b.n	800ad18 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ac08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d128      	bne.n	800ac62 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ac10:	2302      	movs	r3, #2
 800ac12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac16:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ac18:	f107 0314 	add.w	r3, r7, #20
 800ac1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fd f92d 	bl	8007e7e <get_fat>
 800ac24:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ac26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac2c:	d103      	bne.n	800ac36 <f_getfree+0x7c>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ac34:	e063      	b.n	800acfe <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ac36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d103      	bne.n	800ac44 <f_getfree+0x8a>
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ac42:	e05c      	b.n	800acfe <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ac44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d102      	bne.n	800ac50 <f_getfree+0x96>
 800ac4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800ac50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac52:	3301      	adds	r3, #1
 800ac54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d3db      	bcc.n	800ac18 <f_getfree+0x5e>
 800ac60:	e04d      	b.n	800acfe <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ac62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac6c:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac72:	2300      	movs	r3, #0
 800ac74:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800ac76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d113      	bne.n	800aca4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ac7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ac84:	4619      	mov	r1, r3
 800ac86:	f7fd f83d 	bl	8007d04 <move_window>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800ac90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d131      	bne.n	800acfc <f_getfree+0x142>
							p = fs->win;
 800ac98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9a:	333c      	adds	r3, #60	@ 0x3c
 800ac9c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800ac9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca0:	899b      	ldrh	r3, [r3, #12]
 800aca2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800aca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	d10f      	bne.n	800accc <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800acac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800acae:	f7fc fd47 	bl	8007740 <ld_word>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d102      	bne.n	800acbe <f_getfree+0x104>
 800acb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acba:	3301      	adds	r3, #1
 800acbc:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc0:	3302      	adds	r3, #2
 800acc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800acc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acc6:	3b02      	subs	r3, #2
 800acc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800acca:	e010      	b.n	800acee <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800accc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800acce:	f7fc fd4f 	bl	8007770 <ld_dword>
 800acd2:	4603      	mov	r3, r0
 800acd4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d102      	bne.n	800ace2 <f_getfree+0x128>
 800acdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acde:	3301      	adds	r3, #1
 800ace0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	3304      	adds	r3, #4
 800ace6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ace8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acea:	3b04      	subs	r3, #4
 800acec:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800acee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acf0:	3b01      	subs	r3, #1
 800acf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1bd      	bne.n	800ac76 <f_getfree+0xbc>
 800acfa:	e000      	b.n	800acfe <f_getfree+0x144>
							if (res != FR_OK) break;
 800acfc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad02:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ad04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad08:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ad0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad0c:	791a      	ldrb	r2, [r3, #4]
 800ad0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad10:	f042 0201 	orr.w	r2, r2, #1
 800ad14:	b2d2      	uxtb	r2, r2
 800ad16:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ad18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad1a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800ad1e:	4611      	mov	r1, r2
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fc fe23 	bl	800796c <unlock_fs>
 800ad26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3748      	adds	r7, #72	@ 0x48
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b088      	sub	sp, #32
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	60f8      	str	r0, [r7, #12]
 800ad3a:	60b9      	str	r1, [r7, #8]
 800ad3c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ad46:	e01c      	b.n	800ad82 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800ad48:	f107 0310 	add.w	r3, r7, #16
 800ad4c:	f107 0114 	add.w	r1, r7, #20
 800ad50:	2201      	movs	r2, #1
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7ff f8ba 	bl	8009ecc <f_read>
		if (rc != 1) break;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d117      	bne.n	800ad8e <f_gets+0x5c>
		c = s[0];
 800ad5e:	7d3b      	ldrb	r3, [r7, #20]
 800ad60:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	2b0d      	cmp	r3, #13
 800ad66:	d00b      	beq.n	800ad80 <f_gets+0x4e>
		*p++ = c;
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	61ba      	str	r2, [r7, #24]
 800ad6e:	7dfa      	ldrb	r2, [r7, #23]
 800ad70:	701a      	strb	r2, [r3, #0]
		n++;
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	3301      	adds	r3, #1
 800ad76:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800ad78:	7dfb      	ldrb	r3, [r7, #23]
 800ad7a:	2b0a      	cmp	r3, #10
 800ad7c:	d009      	beq.n	800ad92 <f_gets+0x60>
 800ad7e:	e000      	b.n	800ad82 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ad80:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	69fa      	ldr	r2, [r7, #28]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	dbdd      	blt.n	800ad48 <f_gets+0x16>
 800ad8c:	e002      	b.n	800ad94 <f_gets+0x62>
		if (rc != 1) break;
 800ad8e:	bf00      	nop
 800ad90:	e000      	b.n	800ad94 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800ad92:	bf00      	nop
	}
	*p = 0;
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	2200      	movs	r2, #0
 800ad98:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d001      	beq.n	800ada4 <f_gets+0x72>
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	e000      	b.n	800ada6 <f_gets+0x74>
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3720      	adds	r7, #32
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	460b      	mov	r3, r1
 800adb8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800adba:	78fb      	ldrb	r3, [r7, #3]
 800adbc:	2b0a      	cmp	r3, #10
 800adbe:	d103      	bne.n	800adc8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800adc0:	210d      	movs	r1, #13
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7ff fff3 	bl	800adae <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	db25      	blt.n	800ae20 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	1c5a      	adds	r2, r3, #1
 800add8:	60fa      	str	r2, [r7, #12]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	4413      	add	r3, r2
 800adde:	78fa      	ldrb	r2, [r7, #3]
 800ade0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2b3c      	cmp	r3, #60	@ 0x3c
 800ade6:	dd12      	ble.n	800ae0e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6818      	ldr	r0, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f103 010c 	add.w	r1, r3, #12
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	f107 0308 	add.w	r3, r7, #8
 800adf8:	f7ff f9f6 	bl	800a1e8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d101      	bne.n	800ae08 <putc_bfd+0x5a>
 800ae04:	2300      	movs	r3, #0
 800ae06:	e001      	b.n	800ae0c <putc_bfd+0x5e>
 800ae08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae0c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	1c5a      	adds	r2, r3, #1
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	609a      	str	r2, [r3, #8]
 800ae1e:	e000      	b.n	800ae22 <putc_bfd+0x74>
	if (i < 0) return;
 800ae20:	bf00      	nop
}
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	db16      	blt.n	800ae66 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6818      	ldr	r0, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f103 010c 	add.w	r1, r3, #12
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	461a      	mov	r2, r3
 800ae48:	f107 030c 	add.w	r3, r7, #12
 800ae4c:	f7ff f9cc 	bl	800a1e8 <f_write>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d107      	bne.n	800ae66 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d102      	bne.n	800ae66 <putc_flush+0x3e>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	e001      	b.n	800ae6a <putc_flush+0x42>
	return EOF;
 800ae66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b083      	sub	sp, #12
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	605a      	str	r2, [r3, #4]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	609a      	str	r2, [r3, #8]
}
 800ae90:	bf00      	nop
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b096      	sub	sp, #88	@ 0x58
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800aea6:	f107 030c 	add.w	r3, r7, #12
 800aeaa:	6839      	ldr	r1, [r7, #0]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7ff ffe0 	bl	800ae72 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800aeb2:	e009      	b.n	800aec8 <f_puts+0x2c>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	1c5a      	adds	r2, r3, #1
 800aeb8:	607a      	str	r2, [r7, #4]
 800aeba:	781a      	ldrb	r2, [r3, #0]
 800aebc:	f107 030c 	add.w	r3, r7, #12
 800aec0:	4611      	mov	r1, r2
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7ff ff73 	bl	800adae <putc_bfd>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1f1      	bne.n	800aeb4 <f_puts+0x18>
	return putc_flush(&pb);
 800aed0:	f107 030c 	add.w	r3, r7, #12
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7ff ffa7 	bl	800ae28 <putc_flush>
 800aeda:	4603      	mov	r3, r0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3758      	adds	r7, #88	@ 0x58
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b087      	sub	sp, #28
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	4613      	mov	r3, r2
 800aef0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aef2:	2301      	movs	r3, #1
 800aef4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aefa:	4b1f      	ldr	r3, [pc, #124]	@ (800af78 <FATFS_LinkDriverEx+0x94>)
 800aefc:	7a5b      	ldrb	r3, [r3, #9]
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	2b00      	cmp	r3, #0
 800af02:	d131      	bne.n	800af68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af04:	4b1c      	ldr	r3, [pc, #112]	@ (800af78 <FATFS_LinkDriverEx+0x94>)
 800af06:	7a5b      	ldrb	r3, [r3, #9]
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	461a      	mov	r2, r3
 800af0c:	4b1a      	ldr	r3, [pc, #104]	@ (800af78 <FATFS_LinkDriverEx+0x94>)
 800af0e:	2100      	movs	r1, #0
 800af10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800af12:	4b19      	ldr	r3, [pc, #100]	@ (800af78 <FATFS_LinkDriverEx+0x94>)
 800af14:	7a5b      	ldrb	r3, [r3, #9]
 800af16:	b2db      	uxtb	r3, r3
 800af18:	4a17      	ldr	r2, [pc, #92]	@ (800af78 <FATFS_LinkDriverEx+0x94>)
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800af22:	4b15      	ldr	r3, [pc, #84]	@ (800af78 <FATFS_LinkDriverEx+0x94>)
 800af24:	7a5b      	ldrb	r3, [r3, #9]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	461a      	mov	r2, r3
 800af2a:	4b13      	ldr	r3, [pc, #76]	@ (800af78 <FATFS_LinkDriverEx+0x94>)
 800af2c:	4413      	add	r3, r2
 800af2e:	79fa      	ldrb	r2, [r7, #7]
 800af30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800af32:	4b11      	ldr	r3, [pc, #68]	@ (800af78 <FATFS_LinkDriverEx+0x94>)
 800af34:	7a5b      	ldrb	r3, [r3, #9]
 800af36:	b2db      	uxtb	r3, r3
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	b2d1      	uxtb	r1, r2
 800af3c:	4a0e      	ldr	r2, [pc, #56]	@ (800af78 <FATFS_LinkDriverEx+0x94>)
 800af3e:	7251      	strb	r1, [r2, #9]
 800af40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800af42:	7dbb      	ldrb	r3, [r7, #22]
 800af44:	3330      	adds	r3, #48	@ 0x30
 800af46:	b2da      	uxtb	r2, r3
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	3301      	adds	r3, #1
 800af50:	223a      	movs	r2, #58	@ 0x3a
 800af52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	3302      	adds	r3, #2
 800af58:	222f      	movs	r2, #47	@ 0x2f
 800af5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	3303      	adds	r3, #3
 800af60:	2200      	movs	r2, #0
 800af62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800af68:	7dfb      	ldrb	r3, [r7, #23]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	20000774 	.word	0x20000774

0800af7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800af86:	2200      	movs	r2, #0
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7ff ffaa 	bl	800aee4 <FATFS_LinkDriverEx>
 800af90:	4603      	mov	r3, r0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	6039      	str	r1, [r7, #0]
 800afa6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800afa8:	88fb      	ldrh	r3, [r7, #6]
 800afaa:	2b7f      	cmp	r3, #127	@ 0x7f
 800afac:	d802      	bhi.n	800afb4 <ff_convert+0x18>
		c = chr;
 800afae:	88fb      	ldrh	r3, [r7, #6]
 800afb0:	81fb      	strh	r3, [r7, #14]
 800afb2:	e025      	b.n	800b000 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00b      	beq.n	800afd2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800afba:	88fb      	ldrh	r3, [r7, #6]
 800afbc:	2bff      	cmp	r3, #255	@ 0xff
 800afbe:	d805      	bhi.n	800afcc <ff_convert+0x30>
 800afc0:	88fb      	ldrh	r3, [r7, #6]
 800afc2:	3b80      	subs	r3, #128	@ 0x80
 800afc4:	4a12      	ldr	r2, [pc, #72]	@ (800b010 <ff_convert+0x74>)
 800afc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afca:	e000      	b.n	800afce <ff_convert+0x32>
 800afcc:	2300      	movs	r3, #0
 800afce:	81fb      	strh	r3, [r7, #14]
 800afd0:	e016      	b.n	800b000 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800afd2:	2300      	movs	r3, #0
 800afd4:	81fb      	strh	r3, [r7, #14]
 800afd6:	e009      	b.n	800afec <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800afd8:	89fb      	ldrh	r3, [r7, #14]
 800afda:	4a0d      	ldr	r2, [pc, #52]	@ (800b010 <ff_convert+0x74>)
 800afdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afe0:	88fa      	ldrh	r2, [r7, #6]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d006      	beq.n	800aff4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800afe6:	89fb      	ldrh	r3, [r7, #14]
 800afe8:	3301      	adds	r3, #1
 800afea:	81fb      	strh	r3, [r7, #14]
 800afec:	89fb      	ldrh	r3, [r7, #14]
 800afee:	2b7f      	cmp	r3, #127	@ 0x7f
 800aff0:	d9f2      	bls.n	800afd8 <ff_convert+0x3c>
 800aff2:	e000      	b.n	800aff6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800aff4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800aff6:	89fb      	ldrh	r3, [r7, #14]
 800aff8:	3380      	adds	r3, #128	@ 0x80
 800affa:	b29b      	uxth	r3, r3
 800affc:	b2db      	uxtb	r3, r3
 800affe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b000:	89fb      	ldrh	r3, [r7, #14]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	0800fa40 	.word	0x0800fa40

0800b014 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b014:	b480      	push	{r7}
 800b016:	b087      	sub	sp, #28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	4603      	mov	r3, r0
 800b01c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b01e:	88fb      	ldrh	r3, [r7, #6]
 800b020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b024:	d201      	bcs.n	800b02a <ff_wtoupper+0x16>
 800b026:	4b3e      	ldr	r3, [pc, #248]	@ (800b120 <ff_wtoupper+0x10c>)
 800b028:	e000      	b.n	800b02c <ff_wtoupper+0x18>
 800b02a:	4b3e      	ldr	r3, [pc, #248]	@ (800b124 <ff_wtoupper+0x110>)
 800b02c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	1c9a      	adds	r2, r3, #2
 800b032:	617a      	str	r2, [r7, #20]
 800b034:	881b      	ldrh	r3, [r3, #0]
 800b036:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b038:	8a7b      	ldrh	r3, [r7, #18]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d068      	beq.n	800b110 <ff_wtoupper+0xfc>
 800b03e:	88fa      	ldrh	r2, [r7, #6]
 800b040:	8a7b      	ldrh	r3, [r7, #18]
 800b042:	429a      	cmp	r2, r3
 800b044:	d364      	bcc.n	800b110 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	1c9a      	adds	r2, r3, #2
 800b04a:	617a      	str	r2, [r7, #20]
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	823b      	strh	r3, [r7, #16]
 800b050:	8a3b      	ldrh	r3, [r7, #16]
 800b052:	0a1b      	lsrs	r3, r3, #8
 800b054:	81fb      	strh	r3, [r7, #14]
 800b056:	8a3b      	ldrh	r3, [r7, #16]
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b05c:	88fa      	ldrh	r2, [r7, #6]
 800b05e:	8a79      	ldrh	r1, [r7, #18]
 800b060:	8a3b      	ldrh	r3, [r7, #16]
 800b062:	440b      	add	r3, r1
 800b064:	429a      	cmp	r2, r3
 800b066:	da49      	bge.n	800b0fc <ff_wtoupper+0xe8>
			switch (cmd) {
 800b068:	89fb      	ldrh	r3, [r7, #14]
 800b06a:	2b08      	cmp	r3, #8
 800b06c:	d84f      	bhi.n	800b10e <ff_wtoupper+0xfa>
 800b06e:	a201      	add	r2, pc, #4	@ (adr r2, 800b074 <ff_wtoupper+0x60>)
 800b070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b074:	0800b099 	.word	0x0800b099
 800b078:	0800b0ab 	.word	0x0800b0ab
 800b07c:	0800b0c1 	.word	0x0800b0c1
 800b080:	0800b0c9 	.word	0x0800b0c9
 800b084:	0800b0d1 	.word	0x0800b0d1
 800b088:	0800b0d9 	.word	0x0800b0d9
 800b08c:	0800b0e1 	.word	0x0800b0e1
 800b090:	0800b0e9 	.word	0x0800b0e9
 800b094:	0800b0f1 	.word	0x0800b0f1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b098:	88fa      	ldrh	r2, [r7, #6]
 800b09a:	8a7b      	ldrh	r3, [r7, #18]
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	005b      	lsls	r3, r3, #1
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	881b      	ldrh	r3, [r3, #0]
 800b0a6:	80fb      	strh	r3, [r7, #6]
 800b0a8:	e027      	b.n	800b0fa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b0aa:	88fa      	ldrh	r2, [r7, #6]
 800b0ac:	8a7b      	ldrh	r3, [r7, #18]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	88fa      	ldrh	r2, [r7, #6]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	80fb      	strh	r3, [r7, #6]
 800b0be:	e01c      	b.n	800b0fa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b0c0:	88fb      	ldrh	r3, [r7, #6]
 800b0c2:	3b10      	subs	r3, #16
 800b0c4:	80fb      	strh	r3, [r7, #6]
 800b0c6:	e018      	b.n	800b0fa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b0c8:	88fb      	ldrh	r3, [r7, #6]
 800b0ca:	3b20      	subs	r3, #32
 800b0cc:	80fb      	strh	r3, [r7, #6]
 800b0ce:	e014      	b.n	800b0fa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b0d0:	88fb      	ldrh	r3, [r7, #6]
 800b0d2:	3b30      	subs	r3, #48	@ 0x30
 800b0d4:	80fb      	strh	r3, [r7, #6]
 800b0d6:	e010      	b.n	800b0fa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b0d8:	88fb      	ldrh	r3, [r7, #6]
 800b0da:	3b1a      	subs	r3, #26
 800b0dc:	80fb      	strh	r3, [r7, #6]
 800b0de:	e00c      	b.n	800b0fa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b0e0:	88fb      	ldrh	r3, [r7, #6]
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	80fb      	strh	r3, [r7, #6]
 800b0e6:	e008      	b.n	800b0fa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b0e8:	88fb      	ldrh	r3, [r7, #6]
 800b0ea:	3b50      	subs	r3, #80	@ 0x50
 800b0ec:	80fb      	strh	r3, [r7, #6]
 800b0ee:	e004      	b.n	800b0fa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b0f0:	88fb      	ldrh	r3, [r7, #6]
 800b0f2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800b0f6:	80fb      	strh	r3, [r7, #6]
 800b0f8:	bf00      	nop
			}
			break;
 800b0fa:	e008      	b.n	800b10e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b0fc:	89fb      	ldrh	r3, [r7, #14]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d195      	bne.n	800b02e <ff_wtoupper+0x1a>
 800b102:	8a3b      	ldrh	r3, [r7, #16]
 800b104:	005b      	lsls	r3, r3, #1
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	4413      	add	r3, r2
 800b10a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b10c:	e78f      	b.n	800b02e <ff_wtoupper+0x1a>
			break;
 800b10e:	bf00      	nop
	}

	return chr;
 800b110:	88fb      	ldrh	r3, [r7, #6]
}
 800b112:	4618      	mov	r0, r3
 800b114:	371c      	adds	r7, #28
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	0800fb40 	.word	0x0800fb40
 800b124:	0800fd34 	.word	0x0800fd34

0800b128 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	4603      	mov	r3, r0
 800b130:	6039      	str	r1, [r7, #0]
 800b132:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800b134:	2200      	movs	r2, #0
 800b136:	2101      	movs	r1, #1
 800b138:	2001      	movs	r0, #1
 800b13a:	f000 f9b5 	bl	800b4a8 <osSemaphoreNew>
 800b13e:	4602      	mov	r2, r0
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	bf14      	ite	ne
 800b14c:	2301      	movne	r3, #1
 800b14e:	2300      	moveq	r3, #0
 800b150:	b2db      	uxtb	r3, r3
 800b152:	60fb      	str	r3, [r7, #12]

    return ret;
 800b154:	68fb      	ldr	r3, [r7, #12]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b082      	sub	sp, #8
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fabe 	bl	800b6e8 <osSemaphoreDelete>
#endif
    return 1;
 800b16c:	2301      	movs	r3, #1
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3708      	adds	r7, #8
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b084      	sub	sp, #16
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800b182:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fa18 	bl	800b5bc <osSemaphoreAcquire>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800b192:	2301      	movs	r3, #1
 800b194:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b196:	68fb      	ldr	r3, [r7, #12]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fa59 	bl	800b660 <osSemaphoreRelease>
#endif
}
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b082      	sub	sp, #8
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f003 faf4 	bl	800e7ac <pvPortMalloc>
 800b1c4:	4603      	mov	r3, r0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b082      	sub	sp, #8
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f003 fbb6 	bl	800e948 <vPortFree>
}
 800b1dc:	bf00      	nop
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <__NVIC_SetPriority>:
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	6039      	str	r1, [r7, #0]
 800b1ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b1f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	db0a      	blt.n	800b20e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	490c      	ldr	r1, [pc, #48]	@ (800b230 <__NVIC_SetPriority+0x4c>)
 800b1fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b202:	0112      	lsls	r2, r2, #4
 800b204:	b2d2      	uxtb	r2, r2
 800b206:	440b      	add	r3, r1
 800b208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b20c:	e00a      	b.n	800b224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	b2da      	uxtb	r2, r3
 800b212:	4908      	ldr	r1, [pc, #32]	@ (800b234 <__NVIC_SetPriority+0x50>)
 800b214:	79fb      	ldrb	r3, [r7, #7]
 800b216:	f003 030f 	and.w	r3, r3, #15
 800b21a:	3b04      	subs	r3, #4
 800b21c:	0112      	lsls	r2, r2, #4
 800b21e:	b2d2      	uxtb	r2, r2
 800b220:	440b      	add	r3, r1
 800b222:	761a      	strb	r2, [r3, #24]
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	e000e100 	.word	0xe000e100
 800b234:	e000ed00 	.word	0xe000ed00

0800b238 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b238:	b580      	push	{r7, lr}
 800b23a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b23c:	2100      	movs	r1, #0
 800b23e:	f06f 0004 	mvn.w	r0, #4
 800b242:	f7ff ffcf 	bl	800b1e4 <__NVIC_SetPriority>
#endif
}
 800b246:	bf00      	nop
 800b248:	bd80      	pop	{r7, pc}
	...

0800b24c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b252:	f3ef 8305 	mrs	r3, IPSR
 800b256:	603b      	str	r3, [r7, #0]
  return(result);
 800b258:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b25e:	f06f 0305 	mvn.w	r3, #5
 800b262:	607b      	str	r3, [r7, #4]
 800b264:	e00c      	b.n	800b280 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b266:	4b0a      	ldr	r3, [pc, #40]	@ (800b290 <osKernelInitialize+0x44>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d105      	bne.n	800b27a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b26e:	4b08      	ldr	r3, [pc, #32]	@ (800b290 <osKernelInitialize+0x44>)
 800b270:	2201      	movs	r2, #1
 800b272:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b274:	2300      	movs	r3, #0
 800b276:	607b      	str	r3, [r7, #4]
 800b278:	e002      	b.n	800b280 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b27a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b27e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b280:	687b      	ldr	r3, [r7, #4]
}
 800b282:	4618      	mov	r0, r3
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	20000780 	.word	0x20000780

0800b294 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800b29a:	f002 faf9 	bl	800d890 <xTaskGetSchedulerState>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d004      	beq.n	800b2ae <osKernelGetState+0x1a>
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d105      	bne.n	800b2b4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800b2a8:	2302      	movs	r3, #2
 800b2aa:	607b      	str	r3, [r7, #4]
      break;
 800b2ac:	e00c      	b.n	800b2c8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	607b      	str	r3, [r7, #4]
      break;
 800b2b2:	e009      	b.n	800b2c8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800b2b4:	4b07      	ldr	r3, [pc, #28]	@ (800b2d4 <osKernelGetState+0x40>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d102      	bne.n	800b2c2 <osKernelGetState+0x2e>
        state = osKernelReady;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800b2c0:	e001      	b.n	800b2c6 <osKernelGetState+0x32>
        state = osKernelInactive;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	607b      	str	r3, [r7, #4]
      break;
 800b2c6:	bf00      	nop
  }

  return (state);
 800b2c8:	687b      	ldr	r3, [r7, #4]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	20000780 	.word	0x20000780

0800b2d8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2de:	f3ef 8305 	mrs	r3, IPSR
 800b2e2:	603b      	str	r3, [r7, #0]
  return(result);
 800b2e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d003      	beq.n	800b2f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b2ea:	f06f 0305 	mvn.w	r3, #5
 800b2ee:	607b      	str	r3, [r7, #4]
 800b2f0:	e010      	b.n	800b314 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b2f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b320 <osKernelStart+0x48>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d109      	bne.n	800b30e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b2fa:	f7ff ff9d 	bl	800b238 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b2fe:	4b08      	ldr	r3, [pc, #32]	@ (800b320 <osKernelStart+0x48>)
 800b300:	2202      	movs	r2, #2
 800b302:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b304:	f001 fe4e 	bl	800cfa4 <vTaskStartScheduler>
      stat = osOK;
 800b308:	2300      	movs	r3, #0
 800b30a:	607b      	str	r3, [r7, #4]
 800b30c:	e002      	b.n	800b314 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b30e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b312:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b314:	687b      	ldr	r3, [r7, #4]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20000780 	.word	0x20000780

0800b324 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b32a:	f3ef 8305 	mrs	r3, IPSR
 800b32e:	603b      	str	r3, [r7, #0]
  return(result);
 800b330:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b336:	f001 ff61 	bl	800d1fc <xTaskGetTickCountFromISR>
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	e002      	b.n	800b344 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b33e:	f001 ff4d 	bl	800d1dc <xTaskGetTickCount>
 800b342:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b344:	687b      	ldr	r3, [r7, #4]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b34e:	b580      	push	{r7, lr}
 800b350:	b08e      	sub	sp, #56	@ 0x38
 800b352:	af04      	add	r7, sp, #16
 800b354:	60f8      	str	r0, [r7, #12]
 800b356:	60b9      	str	r1, [r7, #8]
 800b358:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b35a:	2300      	movs	r3, #0
 800b35c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b35e:	f3ef 8305 	mrs	r3, IPSR
 800b362:	617b      	str	r3, [r7, #20]
  return(result);
 800b364:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b366:	2b00      	cmp	r3, #0
 800b368:	d17e      	bne.n	800b468 <osThreadNew+0x11a>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d07b      	beq.n	800b468 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b370:	2380      	movs	r3, #128	@ 0x80
 800b372:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b374:	2318      	movs	r3, #24
 800b376:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b378:	2300      	movs	r3, #0
 800b37a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b37c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b380:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d045      	beq.n	800b414 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <osThreadNew+0x48>
        name = attr->name;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	699b      	ldr	r3, [r3, #24]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d002      	beq.n	800b3a4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d008      	beq.n	800b3bc <osThreadNew+0x6e>
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	2b38      	cmp	r3, #56	@ 0x38
 800b3ae:	d805      	bhi.n	800b3bc <osThreadNew+0x6e>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	f003 0301 	and.w	r3, r3, #1
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <osThreadNew+0x72>
        return (NULL);
 800b3bc:	2300      	movs	r3, #0
 800b3be:	e054      	b.n	800b46a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	695b      	ldr	r3, [r3, #20]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d003      	beq.n	800b3d0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	695b      	ldr	r3, [r3, #20]
 800b3cc:	089b      	lsrs	r3, r3, #2
 800b3ce:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00e      	beq.n	800b3f6 <osThreadNew+0xa8>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	2ba7      	cmp	r3, #167	@ 0xa7
 800b3de:	d90a      	bls.n	800b3f6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d006      	beq.n	800b3f6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	695b      	ldr	r3, [r3, #20]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <osThreadNew+0xa8>
        mem = 1;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	61bb      	str	r3, [r7, #24]
 800b3f4:	e010      	b.n	800b418 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10c      	bne.n	800b418 <osThreadNew+0xca>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d108      	bne.n	800b418 <osThreadNew+0xca>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d104      	bne.n	800b418 <osThreadNew+0xca>
          mem = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	61bb      	str	r3, [r7, #24]
 800b412:	e001      	b.n	800b418 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b414:	2300      	movs	r3, #0
 800b416:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d110      	bne.n	800b440 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b426:	9202      	str	r2, [sp, #8]
 800b428:	9301      	str	r3, [sp, #4]
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	6a3a      	ldr	r2, [r7, #32]
 800b432:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f001 fbc1 	bl	800cbbc <xTaskCreateStatic>
 800b43a:	4603      	mov	r3, r0
 800b43c:	613b      	str	r3, [r7, #16]
 800b43e:	e013      	b.n	800b468 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d110      	bne.n	800b468 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	b29a      	uxth	r2, r3
 800b44a:	f107 0310 	add.w	r3, r7, #16
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f001 fc0f 	bl	800cc7c <xTaskCreate>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b01      	cmp	r3, #1
 800b462:	d001      	beq.n	800b468 <osThreadNew+0x11a>
            hTask = NULL;
 800b464:	2300      	movs	r3, #0
 800b466:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b468:	693b      	ldr	r3, [r7, #16]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3728      	adds	r7, #40	@ 0x28
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b472:	b580      	push	{r7, lr}
 800b474:	b084      	sub	sp, #16
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b47a:	f3ef 8305 	mrs	r3, IPSR
 800b47e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b480:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <osDelay+0x1c>
    stat = osErrorISR;
 800b486:	f06f 0305 	mvn.w	r3, #5
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	e007      	b.n	800b49e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b48e:	2300      	movs	r3, #0
 800b490:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <osDelay+0x2c>
      vTaskDelay(ticks);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f001 fd4d 	bl	800cf38 <vTaskDelay>
    }
  }

  return (stat);
 800b49e:	68fb      	ldr	r3, [r7, #12]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08a      	sub	sp, #40	@ 0x28
 800b4ac:	af02      	add	r7, sp, #8
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4b8:	f3ef 8305 	mrs	r3, IPSR
 800b4bc:	613b      	str	r3, [r7, #16]
  return(result);
 800b4be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d175      	bne.n	800b5b0 <osSemaphoreNew+0x108>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d072      	beq.n	800b5b0 <osSemaphoreNew+0x108>
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d86e      	bhi.n	800b5b0 <osSemaphoreNew+0x108>
    mem = -1;
 800b4d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b4d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d015      	beq.n	800b50a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d006      	beq.n	800b4f4 <osSemaphoreNew+0x4c>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	2b4f      	cmp	r3, #79	@ 0x4f
 800b4ec:	d902      	bls.n	800b4f4 <osSemaphoreNew+0x4c>
        mem = 1;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	61bb      	str	r3, [r7, #24]
 800b4f2:	e00c      	b.n	800b50e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d108      	bne.n	800b50e <osSemaphoreNew+0x66>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d104      	bne.n	800b50e <osSemaphoreNew+0x66>
          mem = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	61bb      	str	r3, [r7, #24]
 800b508:	e001      	b.n	800b50e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b50a:	2300      	movs	r3, #0
 800b50c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b514:	d04c      	beq.n	800b5b0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d128      	bne.n	800b56e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d10a      	bne.n	800b538 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	2203      	movs	r2, #3
 800b528:	9200      	str	r2, [sp, #0]
 800b52a:	2200      	movs	r2, #0
 800b52c:	2100      	movs	r1, #0
 800b52e:	2001      	movs	r0, #1
 800b530:	f000 fb82 	bl	800bc38 <xQueueGenericCreateStatic>
 800b534:	61f8      	str	r0, [r7, #28]
 800b536:	e005      	b.n	800b544 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b538:	2203      	movs	r2, #3
 800b53a:	2100      	movs	r1, #0
 800b53c:	2001      	movs	r0, #1
 800b53e:	f000 fbf8 	bl	800bd32 <xQueueGenericCreate>
 800b542:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d022      	beq.n	800b590 <osSemaphoreNew+0xe8>
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d01f      	beq.n	800b590 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b550:	2300      	movs	r3, #0
 800b552:	2200      	movs	r2, #0
 800b554:	2100      	movs	r1, #0
 800b556:	69f8      	ldr	r0, [r7, #28]
 800b558:	f000 fcb8 	bl	800becc <xQueueGenericSend>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d016      	beq.n	800b590 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b562:	69f8      	ldr	r0, [r7, #28]
 800b564:	f001 f956 	bl	800c814 <vQueueDelete>
            hSemaphore = NULL;
 800b568:	2300      	movs	r3, #0
 800b56a:	61fb      	str	r3, [r7, #28]
 800b56c:	e010      	b.n	800b590 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d108      	bne.n	800b586 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	461a      	mov	r2, r3
 800b57a:	68b9      	ldr	r1, [r7, #8]
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f000 fc36 	bl	800bdee <xQueueCreateCountingSemaphoreStatic>
 800b582:	61f8      	str	r0, [r7, #28]
 800b584:	e004      	b.n	800b590 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b586:	68b9      	ldr	r1, [r7, #8]
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 fc69 	bl	800be60 <xQueueCreateCountingSemaphore>
 800b58e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00c      	beq.n	800b5b0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d003      	beq.n	800b5a4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	617b      	str	r3, [r7, #20]
 800b5a2:	e001      	b.n	800b5a8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b5a8:	6979      	ldr	r1, [r7, #20]
 800b5aa:	69f8      	ldr	r0, [r7, #28]
 800b5ac:	f001 fa7e 	bl	800caac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b5b0:	69fb      	ldr	r3, [r7, #28]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3720      	adds	r7, #32
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
	...

0800b5bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d103      	bne.n	800b5dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b5d4:	f06f 0303 	mvn.w	r3, #3
 800b5d8:	617b      	str	r3, [r7, #20]
 800b5da:	e039      	b.n	800b650 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5dc:	f3ef 8305 	mrs	r3, IPSR
 800b5e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d022      	beq.n	800b62e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d003      	beq.n	800b5f6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b5ee:	f06f 0303 	mvn.w	r3, #3
 800b5f2:	617b      	str	r3, [r7, #20]
 800b5f4:	e02c      	b.n	800b650 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b5fa:	f107 0308 	add.w	r3, r7, #8
 800b5fe:	461a      	mov	r2, r3
 800b600:	2100      	movs	r1, #0
 800b602:	6938      	ldr	r0, [r7, #16]
 800b604:	f001 f884 	bl	800c710 <xQueueReceiveFromISR>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d003      	beq.n	800b616 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b60e:	f06f 0302 	mvn.w	r3, #2
 800b612:	617b      	str	r3, [r7, #20]
 800b614:	e01c      	b.n	800b650 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d019      	beq.n	800b650 <osSemaphoreAcquire+0x94>
 800b61c:	4b0f      	ldr	r3, [pc, #60]	@ (800b65c <osSemaphoreAcquire+0xa0>)
 800b61e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b622:	601a      	str	r2, [r3, #0]
 800b624:	f3bf 8f4f 	dsb	sy
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	e010      	b.n	800b650 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6938      	ldr	r0, [r7, #16]
 800b632:	f000 ff5d 	bl	800c4f0 <xQueueSemaphoreTake>
 800b636:	4603      	mov	r3, r0
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d009      	beq.n	800b650 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d003      	beq.n	800b64a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b642:	f06f 0301 	mvn.w	r3, #1
 800b646:	617b      	str	r3, [r7, #20]
 800b648:	e002      	b.n	800b650 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b64a:	f06f 0302 	mvn.w	r3, #2
 800b64e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b650:	697b      	ldr	r3, [r7, #20]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3718      	adds	r7, #24
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	e000ed04 	.word	0xe000ed04

0800b660 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d103      	bne.n	800b67e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b676:	f06f 0303 	mvn.w	r3, #3
 800b67a:	617b      	str	r3, [r7, #20]
 800b67c:	e02c      	b.n	800b6d8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b67e:	f3ef 8305 	mrs	r3, IPSR
 800b682:	60fb      	str	r3, [r7, #12]
  return(result);
 800b684:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b686:	2b00      	cmp	r3, #0
 800b688:	d01a      	beq.n	800b6c0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b68a:	2300      	movs	r3, #0
 800b68c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b68e:	f107 0308 	add.w	r3, r7, #8
 800b692:	4619      	mov	r1, r3
 800b694:	6938      	ldr	r0, [r7, #16]
 800b696:	f000 fdb9 	bl	800c20c <xQueueGiveFromISR>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d003      	beq.n	800b6a8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b6a0:	f06f 0302 	mvn.w	r3, #2
 800b6a4:	617b      	str	r3, [r7, #20]
 800b6a6:	e017      	b.n	800b6d8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d014      	beq.n	800b6d8 <osSemaphoreRelease+0x78>
 800b6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e4 <osSemaphoreRelease+0x84>)
 800b6b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	e00b      	b.n	800b6d8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	6938      	ldr	r0, [r7, #16]
 800b6c8:	f000 fc00 	bl	800becc <xQueueGenericSend>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d002      	beq.n	800b6d8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b6d2:	f06f 0302 	mvn.w	r3, #2
 800b6d6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b6d8:	697b      	ldr	r3, [r7, #20]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3718      	adds	r7, #24
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	e000ed04 	.word	0xe000ed04

0800b6e8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6f4:	f3ef 8305 	mrs	r3, IPSR
 800b6f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d003      	beq.n	800b708 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b700:	f06f 0305 	mvn.w	r3, #5
 800b704:	617b      	str	r3, [r7, #20]
 800b706:	e00e      	b.n	800b726 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d103      	bne.n	800b716 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b70e:	f06f 0303 	mvn.w	r3, #3
 800b712:	617b      	str	r3, [r7, #20]
 800b714:	e007      	b.n	800b726 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b716:	6938      	ldr	r0, [r7, #16]
 800b718:	f001 f9f2 	bl	800cb00 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b720:	6938      	ldr	r0, [r7, #16]
 800b722:	f001 f877 	bl	800c814 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b726:	697b      	ldr	r3, [r7, #20]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3718      	adds	r7, #24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b730:	b580      	push	{r7, lr}
 800b732:	b08a      	sub	sp, #40	@ 0x28
 800b734:	af02      	add	r7, sp, #8
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b73c:	2300      	movs	r3, #0
 800b73e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b740:	f3ef 8305 	mrs	r3, IPSR
 800b744:	613b      	str	r3, [r7, #16]
  return(result);
 800b746:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d15f      	bne.n	800b80c <osMessageQueueNew+0xdc>
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d05c      	beq.n	800b80c <osMessageQueueNew+0xdc>
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d059      	beq.n	800b80c <osMessageQueueNew+0xdc>
    mem = -1;
 800b758:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b75c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d029      	beq.n	800b7b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d012      	beq.n	800b792 <osMessageQueueNew+0x62>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	2b4f      	cmp	r3, #79	@ 0x4f
 800b772:	d90e      	bls.n	800b792 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00a      	beq.n	800b792 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	695a      	ldr	r2, [r3, #20]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	68b9      	ldr	r1, [r7, #8]
 800b784:	fb01 f303 	mul.w	r3, r1, r3
 800b788:	429a      	cmp	r2, r3
 800b78a:	d302      	bcc.n	800b792 <osMessageQueueNew+0x62>
        mem = 1;
 800b78c:	2301      	movs	r3, #1
 800b78e:	61bb      	str	r3, [r7, #24]
 800b790:	e014      	b.n	800b7bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d110      	bne.n	800b7bc <osMessageQueueNew+0x8c>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10c      	bne.n	800b7bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d108      	bne.n	800b7bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	695b      	ldr	r3, [r3, #20]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d104      	bne.n	800b7bc <osMessageQueueNew+0x8c>
          mem = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	61bb      	str	r3, [r7, #24]
 800b7b6:	e001      	b.n	800b7bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d10b      	bne.n	800b7da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	691a      	ldr	r2, [r3, #16]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	9100      	str	r1, [sp, #0]
 800b7ce:	68b9      	ldr	r1, [r7, #8]
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f000 fa31 	bl	800bc38 <xQueueGenericCreateStatic>
 800b7d6:	61f8      	str	r0, [r7, #28]
 800b7d8:	e008      	b.n	800b7ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d105      	bne.n	800b7ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	68b9      	ldr	r1, [r7, #8]
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f000 faa4 	bl	800bd32 <xQueueGenericCreate>
 800b7ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00c      	beq.n	800b80c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d003      	beq.n	800b800 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	617b      	str	r3, [r7, #20]
 800b7fe:	e001      	b.n	800b804 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b800:	2300      	movs	r3, #0
 800b802:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b804:	6979      	ldr	r1, [r7, #20]
 800b806:	69f8      	ldr	r0, [r7, #28]
 800b808:	f001 f950 	bl	800caac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b80c:	69fb      	ldr	r3, [r7, #28]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3720      	adds	r7, #32
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
	...

0800b818 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b818:	b580      	push	{r7, lr}
 800b81a:	b088      	sub	sp, #32
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	4613      	mov	r3, r2
 800b826:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b830:	f3ef 8305 	mrs	r3, IPSR
 800b834:	617b      	str	r3, [r7, #20]
  return(result);
 800b836:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d028      	beq.n	800b88e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d005      	beq.n	800b84e <osMessageQueuePut+0x36>
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d002      	beq.n	800b84e <osMessageQueuePut+0x36>
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b84e:	f06f 0303 	mvn.w	r3, #3
 800b852:	61fb      	str	r3, [r7, #28]
 800b854:	e038      	b.n	800b8c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b856:	2300      	movs	r3, #0
 800b858:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b85a:	f107 0210 	add.w	r2, r7, #16
 800b85e:	2300      	movs	r3, #0
 800b860:	68b9      	ldr	r1, [r7, #8]
 800b862:	69b8      	ldr	r0, [r7, #24]
 800b864:	f000 fc34 	bl	800c0d0 <xQueueGenericSendFromISR>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d003      	beq.n	800b876 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b86e:	f06f 0302 	mvn.w	r3, #2
 800b872:	61fb      	str	r3, [r7, #28]
 800b874:	e028      	b.n	800b8c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d025      	beq.n	800b8c8 <osMessageQueuePut+0xb0>
 800b87c:	4b15      	ldr	r3, [pc, #84]	@ (800b8d4 <osMessageQueuePut+0xbc>)
 800b87e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b882:	601a      	str	r2, [r3, #0]
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	e01c      	b.n	800b8c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d002      	beq.n	800b89a <osMessageQueuePut+0x82>
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d103      	bne.n	800b8a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b89a:	f06f 0303 	mvn.w	r3, #3
 800b89e:	61fb      	str	r3, [r7, #28]
 800b8a0:	e012      	b.n	800b8c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	683a      	ldr	r2, [r7, #0]
 800b8a6:	68b9      	ldr	r1, [r7, #8]
 800b8a8:	69b8      	ldr	r0, [r7, #24]
 800b8aa:	f000 fb0f 	bl	800becc <xQueueGenericSend>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d009      	beq.n	800b8c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b8ba:	f06f 0301 	mvn.w	r3, #1
 800b8be:	61fb      	str	r3, [r7, #28]
 800b8c0:	e002      	b.n	800b8c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b8c2:	f06f 0302 	mvn.w	r3, #2
 800b8c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b8c8:	69fb      	ldr	r3, [r7, #28]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3720      	adds	r7, #32
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	e000ed04 	.word	0xe000ed04

0800b8d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
 800b8e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8ee:	f3ef 8305 	mrs	r3, IPSR
 800b8f2:	617b      	str	r3, [r7, #20]
  return(result);
 800b8f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d028      	beq.n	800b94c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d005      	beq.n	800b90c <osMessageQueueGet+0x34>
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <osMessageQueueGet+0x34>
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d003      	beq.n	800b914 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b90c:	f06f 0303 	mvn.w	r3, #3
 800b910:	61fb      	str	r3, [r7, #28]
 800b912:	e037      	b.n	800b984 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b914:	2300      	movs	r3, #0
 800b916:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b918:	f107 0310 	add.w	r3, r7, #16
 800b91c:	461a      	mov	r2, r3
 800b91e:	68b9      	ldr	r1, [r7, #8]
 800b920:	69b8      	ldr	r0, [r7, #24]
 800b922:	f000 fef5 	bl	800c710 <xQueueReceiveFromISR>
 800b926:	4603      	mov	r3, r0
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d003      	beq.n	800b934 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b92c:	f06f 0302 	mvn.w	r3, #2
 800b930:	61fb      	str	r3, [r7, #28]
 800b932:	e027      	b.n	800b984 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d024      	beq.n	800b984 <osMessageQueueGet+0xac>
 800b93a:	4b15      	ldr	r3, [pc, #84]	@ (800b990 <osMessageQueueGet+0xb8>)
 800b93c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b940:	601a      	str	r2, [r3, #0]
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	e01b      	b.n	800b984 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d002      	beq.n	800b958 <osMessageQueueGet+0x80>
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d103      	bne.n	800b960 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b958:	f06f 0303 	mvn.w	r3, #3
 800b95c:	61fb      	str	r3, [r7, #28]
 800b95e:	e011      	b.n	800b984 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	68b9      	ldr	r1, [r7, #8]
 800b964:	69b8      	ldr	r0, [r7, #24]
 800b966:	f000 fce1 	bl	800c32c <xQueueReceive>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d009      	beq.n	800b984 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d003      	beq.n	800b97e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b976:	f06f 0301 	mvn.w	r3, #1
 800b97a:	61fb      	str	r3, [r7, #28]
 800b97c:	e002      	b.n	800b984 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b97e:	f06f 0302 	mvn.w	r3, #2
 800b982:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b984:	69fb      	ldr	r3, [r7, #28]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3720      	adds	r7, #32
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	e000ed04 	.word	0xe000ed04

0800b994 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	4a07      	ldr	r2, [pc, #28]	@ (800b9c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b9a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	4a06      	ldr	r2, [pc, #24]	@ (800b9c4 <vApplicationGetIdleTaskMemory+0x30>)
 800b9aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2280      	movs	r2, #128	@ 0x80
 800b9b0:	601a      	str	r2, [r3, #0]
}
 800b9b2:	bf00      	nop
 800b9b4:	3714      	adds	r7, #20
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	20000784 	.word	0x20000784
 800b9c4:	2000082c 	.word	0x2000082c

0800b9c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	4a07      	ldr	r2, [pc, #28]	@ (800b9f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b9d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	4a06      	ldr	r2, [pc, #24]	@ (800b9f8 <vApplicationGetTimerTaskMemory+0x30>)
 800b9de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b9e6:	601a      	str	r2, [r3, #0]
}
 800b9e8:	bf00      	nop
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	20000a2c 	.word	0x20000a2c
 800b9f8:	20000ad4 	.word	0x20000ad4

0800b9fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f103 0208 	add.w	r2, r3, #8
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f103 0208 	add.w	r2, r3, #8
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f103 0208 	add.w	r2, r3, #8
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba4a:	bf00      	nop
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba56:	b480      	push	{r7}
 800ba58:	b085      	sub	sp, #20
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	689a      	ldr	r2, [r3, #8]
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	683a      	ldr	r2, [r7, #0]
 800ba80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	1c5a      	adds	r2, r3, #1
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	601a      	str	r2, [r3, #0]
}
 800ba92:	bf00      	nop
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b085      	sub	sp, #20
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bab4:	d103      	bne.n	800babe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	60fb      	str	r3, [r7, #12]
 800babc:	e00c      	b.n	800bad8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	3308      	adds	r3, #8
 800bac2:	60fb      	str	r3, [r7, #12]
 800bac4:	e002      	b.n	800bacc <vListInsert+0x2e>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	60fb      	str	r3, [r7, #12]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d2f6      	bcs.n	800bac6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	685a      	ldr	r2, [r3, #4]
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	683a      	ldr	r2, [r7, #0]
 800bae6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	683a      	ldr	r2, [r7, #0]
 800baf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	1c5a      	adds	r2, r3, #1
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	601a      	str	r2, [r3, #0]
}
 800bb04:	bf00      	nop
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	6892      	ldr	r2, [r2, #8]
 800bb26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	6852      	ldr	r2, [r2, #4]
 800bb30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d103      	bne.n	800bb44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	689a      	ldr	r2, [r3, #8]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	1e5a      	subs	r2, r3, #1
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10b      	bne.n	800bb90 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bb8a:	bf00      	nop
 800bb8c:	bf00      	nop
 800bb8e:	e7fd      	b.n	800bb8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bb90:	f002 fcea 	bl	800e568 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb9c:	68f9      	ldr	r1, [r7, #12]
 800bb9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bba0:	fb01 f303 	mul.w	r3, r1, r3
 800bba4:	441a      	add	r2, r3
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	68f9      	ldr	r1, [r7, #12]
 800bbc4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bbc6:	fb01 f303 	mul.w	r3, r1, r3
 800bbca:	441a      	add	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	22ff      	movs	r2, #255	@ 0xff
 800bbd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	22ff      	movs	r2, #255	@ 0xff
 800bbdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d114      	bne.n	800bc10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d01a      	beq.n	800bc24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	3310      	adds	r3, #16
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f001 fc86 	bl	800d504 <xTaskRemoveFromEventList>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d012      	beq.n	800bc24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bbfe:	4b0d      	ldr	r3, [pc, #52]	@ (800bc34 <xQueueGenericReset+0xd0>)
 800bc00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc04:	601a      	str	r2, [r3, #0]
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	f3bf 8f6f 	isb	sy
 800bc0e:	e009      	b.n	800bc24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	3310      	adds	r3, #16
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7ff fef1 	bl	800b9fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	3324      	adds	r3, #36	@ 0x24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff feec 	bl	800b9fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc24:	f002 fcd2 	bl	800e5cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc28:	2301      	movs	r3, #1
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	e000ed04 	.word	0xe000ed04

0800bc38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b08e      	sub	sp, #56	@ 0x38
 800bc3c:	af02      	add	r7, sp, #8
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
 800bc44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10b      	bne.n	800bc64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bc4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bc5e:	bf00      	nop
 800bc60:	bf00      	nop
 800bc62:	e7fd      	b.n	800bc60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d10b      	bne.n	800bc82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bc7c:	bf00      	nop
 800bc7e:	bf00      	nop
 800bc80:	e7fd      	b.n	800bc7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d002      	beq.n	800bc8e <xQueueGenericCreateStatic+0x56>
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <xQueueGenericCreateStatic+0x5a>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e000      	b.n	800bc94 <xQueueGenericCreateStatic+0x5c>
 800bc92:	2300      	movs	r3, #0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10b      	bne.n	800bcb0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bc98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9c:	f383 8811 	msr	BASEPRI, r3
 800bca0:	f3bf 8f6f 	isb	sy
 800bca4:	f3bf 8f4f 	dsb	sy
 800bca8:	623b      	str	r3, [r7, #32]
}
 800bcaa:	bf00      	nop
 800bcac:	bf00      	nop
 800bcae:	e7fd      	b.n	800bcac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d102      	bne.n	800bcbc <xQueueGenericCreateStatic+0x84>
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d101      	bne.n	800bcc0 <xQueueGenericCreateStatic+0x88>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e000      	b.n	800bcc2 <xQueueGenericCreateStatic+0x8a>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d10b      	bne.n	800bcde <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bcc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcca:	f383 8811 	msr	BASEPRI, r3
 800bcce:	f3bf 8f6f 	isb	sy
 800bcd2:	f3bf 8f4f 	dsb	sy
 800bcd6:	61fb      	str	r3, [r7, #28]
}
 800bcd8:	bf00      	nop
 800bcda:	bf00      	nop
 800bcdc:	e7fd      	b.n	800bcda <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bcde:	2350      	movs	r3, #80	@ 0x50
 800bce0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	2b50      	cmp	r3, #80	@ 0x50
 800bce6:	d00b      	beq.n	800bd00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	61bb      	str	r3, [r7, #24]
}
 800bcfa:	bf00      	nop
 800bcfc:	bf00      	nop
 800bcfe:	e7fd      	b.n	800bcfc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bd06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00d      	beq.n	800bd28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	68b9      	ldr	r1, [r7, #8]
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f000 f840 	bl	800bda8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3730      	adds	r7, #48	@ 0x30
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b08a      	sub	sp, #40	@ 0x28
 800bd36:	af02      	add	r7, sp, #8
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10b      	bne.n	800bd5e <xQueueGenericCreate+0x2c>
	__asm volatile
 800bd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd4a:	f383 8811 	msr	BASEPRI, r3
 800bd4e:	f3bf 8f6f 	isb	sy
 800bd52:	f3bf 8f4f 	dsb	sy
 800bd56:	613b      	str	r3, [r7, #16]
}
 800bd58:	bf00      	nop
 800bd5a:	bf00      	nop
 800bd5c:	e7fd      	b.n	800bd5a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	fb02 f303 	mul.w	r3, r2, r3
 800bd66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	3350      	adds	r3, #80	@ 0x50
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f002 fd1d 	bl	800e7ac <pvPortMalloc>
 800bd72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d011      	beq.n	800bd9e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	3350      	adds	r3, #80	@ 0x50
 800bd82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd8c:	79fa      	ldrb	r2, [r7, #7]
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	4613      	mov	r3, r2
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	68b9      	ldr	r1, [r7, #8]
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 f805 	bl	800bda8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd9e:	69bb      	ldr	r3, [r7, #24]
	}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3720      	adds	r7, #32
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d103      	bne.n	800bdc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	69ba      	ldr	r2, [r7, #24]
 800bdc0:	601a      	str	r2, [r3, #0]
 800bdc2:	e002      	b.n	800bdca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdd6:	2101      	movs	r1, #1
 800bdd8:	69b8      	ldr	r0, [r7, #24]
 800bdda:	f7ff fec3 	bl	800bb64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	78fa      	ldrb	r2, [r7, #3]
 800bde2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bde6:	bf00      	nop
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b08a      	sub	sp, #40	@ 0x28
 800bdf2:	af02      	add	r7, sp, #8
 800bdf4:	60f8      	str	r0, [r7, #12]
 800bdf6:	60b9      	str	r1, [r7, #8]
 800bdf8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10b      	bne.n	800be18 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800be00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	61bb      	str	r3, [r7, #24]
}
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	e7fd      	b.n	800be14 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d90b      	bls.n	800be38 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	617b      	str	r3, [r7, #20]
}
 800be32:	bf00      	nop
 800be34:	bf00      	nop
 800be36:	e7fd      	b.n	800be34 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800be38:	2302      	movs	r3, #2
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	2100      	movs	r1, #0
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7ff fef8 	bl	800bc38 <xQueueGenericCreateStatic>
 800be48:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800be56:	69fb      	ldr	r3, [r7, #28]
	}
 800be58:	4618      	mov	r0, r3
 800be5a:	3720      	adds	r7, #32
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10b      	bne.n	800be88 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800be70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	613b      	str	r3, [r7, #16]
}
 800be82:	bf00      	nop
 800be84:	bf00      	nop
 800be86:	e7fd      	b.n	800be84 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800be88:	683a      	ldr	r2, [r7, #0]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d90b      	bls.n	800bea8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	60fb      	str	r3, [r7, #12]
}
 800bea2:	bf00      	nop
 800bea4:	bf00      	nop
 800bea6:	e7fd      	b.n	800bea4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bea8:	2202      	movs	r2, #2
 800beaa:	2100      	movs	r1, #0
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7ff ff40 	bl	800bd32 <xQueueGenericCreate>
 800beb2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d002      	beq.n	800bec0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	683a      	ldr	r2, [r7, #0]
 800bebe:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bec0:	697b      	ldr	r3, [r7, #20]
	}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3718      	adds	r7, #24
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
	...

0800becc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b08e      	sub	sp, #56	@ 0x38
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800beda:	2300      	movs	r3, #0
 800bedc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10b      	bne.n	800bf00 <xQueueGenericSend+0x34>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800befa:	bf00      	nop
 800befc:	bf00      	nop
 800befe:	e7fd      	b.n	800befc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d103      	bne.n	800bf0e <xQueueGenericSend+0x42>
 800bf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d101      	bne.n	800bf12 <xQueueGenericSend+0x46>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e000      	b.n	800bf14 <xQueueGenericSend+0x48>
 800bf12:	2300      	movs	r3, #0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10b      	bne.n	800bf30 <xQueueGenericSend+0x64>
	__asm volatile
 800bf18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1c:	f383 8811 	msr	BASEPRI, r3
 800bf20:	f3bf 8f6f 	isb	sy
 800bf24:	f3bf 8f4f 	dsb	sy
 800bf28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bf2a:	bf00      	nop
 800bf2c:	bf00      	nop
 800bf2e:	e7fd      	b.n	800bf2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	2b02      	cmp	r3, #2
 800bf34:	d103      	bne.n	800bf3e <xQueueGenericSend+0x72>
 800bf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d101      	bne.n	800bf42 <xQueueGenericSend+0x76>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e000      	b.n	800bf44 <xQueueGenericSend+0x78>
 800bf42:	2300      	movs	r3, #0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10b      	bne.n	800bf60 <xQueueGenericSend+0x94>
	__asm volatile
 800bf48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4c:	f383 8811 	msr	BASEPRI, r3
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	623b      	str	r3, [r7, #32]
}
 800bf5a:	bf00      	nop
 800bf5c:	bf00      	nop
 800bf5e:	e7fd      	b.n	800bf5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf60:	f001 fc96 	bl	800d890 <xTaskGetSchedulerState>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d102      	bne.n	800bf70 <xQueueGenericSend+0xa4>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d101      	bne.n	800bf74 <xQueueGenericSend+0xa8>
 800bf70:	2301      	movs	r3, #1
 800bf72:	e000      	b.n	800bf76 <xQueueGenericSend+0xaa>
 800bf74:	2300      	movs	r3, #0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10b      	bne.n	800bf92 <xQueueGenericSend+0xc6>
	__asm volatile
 800bf7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf7e:	f383 8811 	msr	BASEPRI, r3
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	61fb      	str	r3, [r7, #28]
}
 800bf8c:	bf00      	nop
 800bf8e:	bf00      	nop
 800bf90:	e7fd      	b.n	800bf8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf92:	f002 fae9 	bl	800e568 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d302      	bcc.n	800bfa8 <xQueueGenericSend+0xdc>
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d129      	bne.n	800bffc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	68b9      	ldr	r1, [r7, #8]
 800bfac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bfae:	f000 fc6d 	bl	800c88c <prvCopyDataToQueue>
 800bfb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d010      	beq.n	800bfde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfbe:	3324      	adds	r3, #36	@ 0x24
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f001 fa9f 	bl	800d504 <xTaskRemoveFromEventList>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d013      	beq.n	800bff4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bfcc:	4b3f      	ldr	r3, [pc, #252]	@ (800c0cc <xQueueGenericSend+0x200>)
 800bfce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	f3bf 8f4f 	dsb	sy
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	e00a      	b.n	800bff4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d007      	beq.n	800bff4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bfe4:	4b39      	ldr	r3, [pc, #228]	@ (800c0cc <xQueueGenericSend+0x200>)
 800bfe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfea:	601a      	str	r2, [r3, #0]
 800bfec:	f3bf 8f4f 	dsb	sy
 800bff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bff4:	f002 faea 	bl	800e5cc <vPortExitCritical>
				return pdPASS;
 800bff8:	2301      	movs	r3, #1
 800bffa:	e063      	b.n	800c0c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d103      	bne.n	800c00a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c002:	f002 fae3 	bl	800e5cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c006:	2300      	movs	r3, #0
 800c008:	e05c      	b.n	800c0c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c00a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d106      	bne.n	800c01e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c010:	f107 0314 	add.w	r3, r7, #20
 800c014:	4618      	mov	r0, r3
 800c016:	f001 fad9 	bl	800d5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c01a:	2301      	movs	r3, #1
 800c01c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c01e:	f002 fad5 	bl	800e5cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c022:	f001 f82f 	bl	800d084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c026:	f002 fa9f 	bl	800e568 <vPortEnterCritical>
 800c02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c02c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c030:	b25b      	sxtb	r3, r3
 800c032:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c036:	d103      	bne.n	800c040 <xQueueGenericSend+0x174>
 800c038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c042:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c046:	b25b      	sxtb	r3, r3
 800c048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c04c:	d103      	bne.n	800c056 <xQueueGenericSend+0x18a>
 800c04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c050:	2200      	movs	r2, #0
 800c052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c056:	f002 fab9 	bl	800e5cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c05a:	1d3a      	adds	r2, r7, #4
 800c05c:	f107 0314 	add.w	r3, r7, #20
 800c060:	4611      	mov	r1, r2
 800c062:	4618      	mov	r0, r3
 800c064:	f001 fac8 	bl	800d5f8 <xTaskCheckForTimeOut>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d124      	bne.n	800c0b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c06e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c070:	f000 fd04 	bl	800ca7c <prvIsQueueFull>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d018      	beq.n	800c0ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07c:	3310      	adds	r3, #16
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	4611      	mov	r1, r2
 800c082:	4618      	mov	r0, r3
 800c084:	f001 f9ec 	bl	800d460 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c08a:	f000 fc8f 	bl	800c9ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c08e:	f001 f807 	bl	800d0a0 <xTaskResumeAll>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	f47f af7c 	bne.w	800bf92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c09a:	4b0c      	ldr	r3, [pc, #48]	@ (800c0cc <xQueueGenericSend+0x200>)
 800c09c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0a0:	601a      	str	r2, [r3, #0]
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	e772      	b.n	800bf92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c0ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0ae:	f000 fc7d 	bl	800c9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0b2:	f000 fff5 	bl	800d0a0 <xTaskResumeAll>
 800c0b6:	e76c      	b.n	800bf92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c0b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0ba:	f000 fc77 	bl	800c9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0be:	f000 ffef 	bl	800d0a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c0c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3738      	adds	r7, #56	@ 0x38
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	e000ed04 	.word	0xe000ed04

0800c0d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b090      	sub	sp, #64	@ 0x40
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
 800c0dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10b      	bne.n	800c100 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ec:	f383 8811 	msr	BASEPRI, r3
 800c0f0:	f3bf 8f6f 	isb	sy
 800c0f4:	f3bf 8f4f 	dsb	sy
 800c0f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c0fa:	bf00      	nop
 800c0fc:	bf00      	nop
 800c0fe:	e7fd      	b.n	800c0fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d103      	bne.n	800c10e <xQueueGenericSendFromISR+0x3e>
 800c106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d101      	bne.n	800c112 <xQueueGenericSendFromISR+0x42>
 800c10e:	2301      	movs	r3, #1
 800c110:	e000      	b.n	800c114 <xQueueGenericSendFromISR+0x44>
 800c112:	2300      	movs	r3, #0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10b      	bne.n	800c130 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11c:	f383 8811 	msr	BASEPRI, r3
 800c120:	f3bf 8f6f 	isb	sy
 800c124:	f3bf 8f4f 	dsb	sy
 800c128:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c12a:	bf00      	nop
 800c12c:	bf00      	nop
 800c12e:	e7fd      	b.n	800c12c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	2b02      	cmp	r3, #2
 800c134:	d103      	bne.n	800c13e <xQueueGenericSendFromISR+0x6e>
 800c136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d101      	bne.n	800c142 <xQueueGenericSendFromISR+0x72>
 800c13e:	2301      	movs	r3, #1
 800c140:	e000      	b.n	800c144 <xQueueGenericSendFromISR+0x74>
 800c142:	2300      	movs	r3, #0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10b      	bne.n	800c160 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	623b      	str	r3, [r7, #32]
}
 800c15a:	bf00      	nop
 800c15c:	bf00      	nop
 800c15e:	e7fd      	b.n	800c15c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c160:	f002 fae2 	bl	800e728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c164:	f3ef 8211 	mrs	r2, BASEPRI
 800c168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	61fa      	str	r2, [r7, #28]
 800c17a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c17c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c17e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c182:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c188:	429a      	cmp	r2, r3
 800c18a:	d302      	bcc.n	800c192 <xQueueGenericSendFromISR+0xc2>
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	2b02      	cmp	r3, #2
 800c190:	d12f      	bne.n	800c1f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c194:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c198:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1a2:	683a      	ldr	r2, [r7, #0]
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c1a8:	f000 fb70 	bl	800c88c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c1ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c1b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1b4:	d112      	bne.n	800c1dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d016      	beq.n	800c1ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c0:	3324      	adds	r3, #36	@ 0x24
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f001 f99e 	bl	800d504 <xTaskRemoveFromEventList>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00e      	beq.n	800c1ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00b      	beq.n	800c1ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	601a      	str	r2, [r3, #0]
 800c1da:	e007      	b.n	800c1ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c1dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	b25a      	sxtb	r2, r3
 800c1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c1f0:	e001      	b.n	800c1f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c200:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c204:	4618      	mov	r0, r3
 800c206:	3740      	adds	r7, #64	@ 0x40
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b08e      	sub	sp, #56	@ 0x38
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10b      	bne.n	800c238 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	623b      	str	r3, [r7, #32]
}
 800c232:	bf00      	nop
 800c234:	bf00      	nop
 800c236:	e7fd      	b.n	800c234 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00b      	beq.n	800c258 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	61fb      	str	r3, [r7, #28]
}
 800c252:	bf00      	nop
 800c254:	bf00      	nop
 800c256:	e7fd      	b.n	800c254 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d103      	bne.n	800c268 <xQueueGiveFromISR+0x5c>
 800c260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <xQueueGiveFromISR+0x60>
 800c268:	2301      	movs	r3, #1
 800c26a:	e000      	b.n	800c26e <xQueueGiveFromISR+0x62>
 800c26c:	2300      	movs	r3, #0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d10b      	bne.n	800c28a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	61bb      	str	r3, [r7, #24]
}
 800c284:	bf00      	nop
 800c286:	bf00      	nop
 800c288:	e7fd      	b.n	800c286 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c28a:	f002 fa4d 	bl	800e728 <vPortValidateInterruptPriority>
	__asm volatile
 800c28e:	f3ef 8211 	mrs	r2, BASEPRI
 800c292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c296:	f383 8811 	msr	BASEPRI, r3
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	617a      	str	r2, [r7, #20]
 800c2a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c2a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d22b      	bcs.n	800c312 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c6:	1c5a      	adds	r2, r3, #1
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c2d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2d4:	d112      	bne.n	800c2fc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d016      	beq.n	800c30c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e0:	3324      	adds	r3, #36	@ 0x24
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f001 f90e 	bl	800d504 <xTaskRemoveFromEventList>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00e      	beq.n	800c30c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00b      	beq.n	800c30c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	601a      	str	r2, [r3, #0]
 800c2fa:	e007      	b.n	800c30c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c300:	3301      	adds	r3, #1
 800c302:	b2db      	uxtb	r3, r3
 800c304:	b25a      	sxtb	r2, r3
 800c306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c30c:	2301      	movs	r3, #1
 800c30e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c310:	e001      	b.n	800c316 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c312:	2300      	movs	r3, #0
 800c314:	637b      	str	r3, [r7, #52]	@ 0x34
 800c316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c318:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f383 8811 	msr	BASEPRI, r3
}
 800c320:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c324:	4618      	mov	r0, r3
 800c326:	3738      	adds	r7, #56	@ 0x38
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b08c      	sub	sp, #48	@ 0x30
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c338:	2300      	movs	r3, #0
 800c33a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10b      	bne.n	800c35e <xQueueReceive+0x32>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	623b      	str	r3, [r7, #32]
}
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	e7fd      	b.n	800c35a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d103      	bne.n	800c36c <xQueueReceive+0x40>
 800c364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d101      	bne.n	800c370 <xQueueReceive+0x44>
 800c36c:	2301      	movs	r3, #1
 800c36e:	e000      	b.n	800c372 <xQueueReceive+0x46>
 800c370:	2300      	movs	r3, #0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10b      	bne.n	800c38e <xQueueReceive+0x62>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	61fb      	str	r3, [r7, #28]
}
 800c388:	bf00      	nop
 800c38a:	bf00      	nop
 800c38c:	e7fd      	b.n	800c38a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c38e:	f001 fa7f 	bl	800d890 <xTaskGetSchedulerState>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d102      	bne.n	800c39e <xQueueReceive+0x72>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d101      	bne.n	800c3a2 <xQueueReceive+0x76>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e000      	b.n	800c3a4 <xQueueReceive+0x78>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d10b      	bne.n	800c3c0 <xQueueReceive+0x94>
	__asm volatile
 800c3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	61bb      	str	r3, [r7, #24]
}
 800c3ba:	bf00      	nop
 800c3bc:	bf00      	nop
 800c3be:	e7fd      	b.n	800c3bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3c0:	f002 f8d2 	bl	800e568 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d01f      	beq.n	800c410 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3d0:	68b9      	ldr	r1, [r7, #8]
 800c3d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3d4:	f000 fac4 	bl	800c960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3da:	1e5a      	subs	r2, r3, #1
 800c3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00f      	beq.n	800c408 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ea:	3310      	adds	r3, #16
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f001 f889 	bl	800d504 <xTaskRemoveFromEventList>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d007      	beq.n	800c408 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3f8:	4b3c      	ldr	r3, [pc, #240]	@ (800c4ec <xQueueReceive+0x1c0>)
 800c3fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3fe:	601a      	str	r2, [r3, #0]
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c408:	f002 f8e0 	bl	800e5cc <vPortExitCritical>
				return pdPASS;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e069      	b.n	800c4e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d103      	bne.n	800c41e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c416:	f002 f8d9 	bl	800e5cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c41a:	2300      	movs	r3, #0
 800c41c:	e062      	b.n	800c4e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c420:	2b00      	cmp	r3, #0
 800c422:	d106      	bne.n	800c432 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c424:	f107 0310 	add.w	r3, r7, #16
 800c428:	4618      	mov	r0, r3
 800c42a:	f001 f8cf 	bl	800d5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c42e:	2301      	movs	r3, #1
 800c430:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c432:	f002 f8cb 	bl	800e5cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c436:	f000 fe25 	bl	800d084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c43a:	f002 f895 	bl	800e568 <vPortEnterCritical>
 800c43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c444:	b25b      	sxtb	r3, r3
 800c446:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c44a:	d103      	bne.n	800c454 <xQueueReceive+0x128>
 800c44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c456:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c45a:	b25b      	sxtb	r3, r3
 800c45c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c460:	d103      	bne.n	800c46a <xQueueReceive+0x13e>
 800c462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c464:	2200      	movs	r2, #0
 800c466:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c46a:	f002 f8af 	bl	800e5cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c46e:	1d3a      	adds	r2, r7, #4
 800c470:	f107 0310 	add.w	r3, r7, #16
 800c474:	4611      	mov	r1, r2
 800c476:	4618      	mov	r0, r3
 800c478:	f001 f8be 	bl	800d5f8 <xTaskCheckForTimeOut>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d123      	bne.n	800c4ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c484:	f000 fae4 	bl	800ca50 <prvIsQueueEmpty>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d017      	beq.n	800c4be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c490:	3324      	adds	r3, #36	@ 0x24
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	4611      	mov	r1, r2
 800c496:	4618      	mov	r0, r3
 800c498:	f000 ffe2 	bl	800d460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c49c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c49e:	f000 fa85 	bl	800c9ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4a2:	f000 fdfd 	bl	800d0a0 <xTaskResumeAll>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d189      	bne.n	800c3c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c4ac:	4b0f      	ldr	r3, [pc, #60]	@ (800c4ec <xQueueReceive+0x1c0>)
 800c4ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	e780      	b.n	800c3c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4c0:	f000 fa74 	bl	800c9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4c4:	f000 fdec 	bl	800d0a0 <xTaskResumeAll>
 800c4c8:	e77a      	b.n	800c3c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4cc:	f000 fa6e 	bl	800c9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4d0:	f000 fde6 	bl	800d0a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4d6:	f000 fabb 	bl	800ca50 <prvIsQueueEmpty>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f43f af6f 	beq.w	800c3c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3730      	adds	r7, #48	@ 0x30
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	e000ed04 	.word	0xe000ed04

0800c4f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08e      	sub	sp, #56	@ 0x38
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c502:	2300      	movs	r3, #0
 800c504:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10b      	bne.n	800c524 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c510:	f383 8811 	msr	BASEPRI, r3
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	f3bf 8f4f 	dsb	sy
 800c51c:	623b      	str	r3, [r7, #32]
}
 800c51e:	bf00      	nop
 800c520:	bf00      	nop
 800c522:	e7fd      	b.n	800c520 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00b      	beq.n	800c544 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	61fb      	str	r3, [r7, #28]
}
 800c53e:	bf00      	nop
 800c540:	bf00      	nop
 800c542:	e7fd      	b.n	800c540 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c544:	f001 f9a4 	bl	800d890 <xTaskGetSchedulerState>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d102      	bne.n	800c554 <xQueueSemaphoreTake+0x64>
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d101      	bne.n	800c558 <xQueueSemaphoreTake+0x68>
 800c554:	2301      	movs	r3, #1
 800c556:	e000      	b.n	800c55a <xQueueSemaphoreTake+0x6a>
 800c558:	2300      	movs	r3, #0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10b      	bne.n	800c576 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	61bb      	str	r3, [r7, #24]
}
 800c570:	bf00      	nop
 800c572:	bf00      	nop
 800c574:	e7fd      	b.n	800c572 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c576:	f001 fff7 	bl	800e568 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c57c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c57e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c582:	2b00      	cmp	r3, #0
 800c584:	d024      	beq.n	800c5d0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c588:	1e5a      	subs	r2, r3, #1
 800c58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c58c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d104      	bne.n	800c5a0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c596:	f001 faf5 	bl	800db84 <pvTaskIncrementMutexHeldCount>
 800c59a:	4602      	mov	r2, r0
 800c59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c59e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00f      	beq.n	800c5c8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5aa:	3310      	adds	r3, #16
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f000 ffa9 	bl	800d504 <xTaskRemoveFromEventList>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d007      	beq.n	800c5c8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5b8:	4b54      	ldr	r3, [pc, #336]	@ (800c70c <xQueueSemaphoreTake+0x21c>)
 800c5ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5be:	601a      	str	r2, [r3, #0]
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5c8:	f002 f800 	bl	800e5cc <vPortExitCritical>
				return pdPASS;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	e098      	b.n	800c702 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d112      	bne.n	800c5fc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00b      	beq.n	800c5f4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	617b      	str	r3, [r7, #20]
}
 800c5ee:	bf00      	nop
 800c5f0:	bf00      	nop
 800c5f2:	e7fd      	b.n	800c5f0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c5f4:	f001 ffea 	bl	800e5cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	e082      	b.n	800c702 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d106      	bne.n	800c610 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c602:	f107 030c 	add.w	r3, r7, #12
 800c606:	4618      	mov	r0, r3
 800c608:	f000 ffe0 	bl	800d5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c60c:	2301      	movs	r3, #1
 800c60e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c610:	f001 ffdc 	bl	800e5cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c614:	f000 fd36 	bl	800d084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c618:	f001 ffa6 	bl	800e568 <vPortEnterCritical>
 800c61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c61e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c622:	b25b      	sxtb	r3, r3
 800c624:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c628:	d103      	bne.n	800c632 <xQueueSemaphoreTake+0x142>
 800c62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c62c:	2200      	movs	r2, #0
 800c62e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c634:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c638:	b25b      	sxtb	r3, r3
 800c63a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c63e:	d103      	bne.n	800c648 <xQueueSemaphoreTake+0x158>
 800c640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c642:	2200      	movs	r2, #0
 800c644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c648:	f001 ffc0 	bl	800e5cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c64c:	463a      	mov	r2, r7
 800c64e:	f107 030c 	add.w	r3, r7, #12
 800c652:	4611      	mov	r1, r2
 800c654:	4618      	mov	r0, r3
 800c656:	f000 ffcf 	bl	800d5f8 <xTaskCheckForTimeOut>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d132      	bne.n	800c6c6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c660:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c662:	f000 f9f5 	bl	800ca50 <prvIsQueueEmpty>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d026      	beq.n	800c6ba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d109      	bne.n	800c688 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c674:	f001 ff78 	bl	800e568 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	4618      	mov	r0, r3
 800c67e:	f001 f925 	bl	800d8cc <xTaskPriorityInherit>
 800c682:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c684:	f001 ffa2 	bl	800e5cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c68a:	3324      	adds	r3, #36	@ 0x24
 800c68c:	683a      	ldr	r2, [r7, #0]
 800c68e:	4611      	mov	r1, r2
 800c690:	4618      	mov	r0, r3
 800c692:	f000 fee5 	bl	800d460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c696:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c698:	f000 f988 	bl	800c9ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c69c:	f000 fd00 	bl	800d0a0 <xTaskResumeAll>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f47f af67 	bne.w	800c576 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c6a8:	4b18      	ldr	r3, [pc, #96]	@ (800c70c <xQueueSemaphoreTake+0x21c>)
 800c6aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	e75d      	b.n	800c576 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c6ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6bc:	f000 f976 	bl	800c9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6c0:	f000 fcee 	bl	800d0a0 <xTaskResumeAll>
 800c6c4:	e757      	b.n	800c576 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c6c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6c8:	f000 f970 	bl	800c9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6cc:	f000 fce8 	bl	800d0a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6d2:	f000 f9bd 	bl	800ca50 <prvIsQueueEmpty>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f43f af4c 	beq.w	800c576 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00d      	beq.n	800c700 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c6e4:	f001 ff40 	bl	800e568 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c6e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6ea:	f000 f8b7 	bl	800c85c <prvGetDisinheritPriorityAfterTimeout>
 800c6ee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f001 f9c0 	bl	800da7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c6fc:	f001 ff66 	bl	800e5cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c700:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c702:	4618      	mov	r0, r3
 800c704:	3738      	adds	r7, #56	@ 0x38
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	e000ed04 	.word	0xe000ed04

0800c710 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b08e      	sub	sp, #56	@ 0x38
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10b      	bne.n	800c73e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	623b      	str	r3, [r7, #32]
}
 800c738:	bf00      	nop
 800c73a:	bf00      	nop
 800c73c:	e7fd      	b.n	800c73a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d103      	bne.n	800c74c <xQueueReceiveFromISR+0x3c>
 800c744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d101      	bne.n	800c750 <xQueueReceiveFromISR+0x40>
 800c74c:	2301      	movs	r3, #1
 800c74e:	e000      	b.n	800c752 <xQueueReceiveFromISR+0x42>
 800c750:	2300      	movs	r3, #0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d10b      	bne.n	800c76e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	61fb      	str	r3, [r7, #28]
}
 800c768:	bf00      	nop
 800c76a:	bf00      	nop
 800c76c:	e7fd      	b.n	800c76a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c76e:	f001 ffdb 	bl	800e728 <vPortValidateInterruptPriority>
	__asm volatile
 800c772:	f3ef 8211 	mrs	r2, BASEPRI
 800c776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	61ba      	str	r2, [r7, #24]
 800c788:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c78a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c78c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c792:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c796:	2b00      	cmp	r3, #0
 800c798:	d02f      	beq.n	800c7fa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c79c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c7a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7a4:	68b9      	ldr	r1, [r7, #8]
 800c7a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7a8:	f000 f8da 	bl	800c960 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ae:	1e5a      	subs	r2, r3, #1
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c7b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c7b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c7bc:	d112      	bne.n	800c7e4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d016      	beq.n	800c7f4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c8:	3310      	adds	r3, #16
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 fe9a 	bl	800d504 <xTaskRemoveFromEventList>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00e      	beq.n	800c7f4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00b      	beq.n	800c7f4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	601a      	str	r2, [r3, #0]
 800c7e2:	e007      	b.n	800c7f4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	b25a      	sxtb	r2, r3
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7f8:	e001      	b.n	800c7fe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c800:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	f383 8811 	msr	BASEPRI, r3
}
 800c808:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3738      	adds	r7, #56	@ 0x38
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10b      	bne.n	800c83e <vQueueDelete+0x2a>
	__asm volatile
 800c826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c82a:	f383 8811 	msr	BASEPRI, r3
 800c82e:	f3bf 8f6f 	isb	sy
 800c832:	f3bf 8f4f 	dsb	sy
 800c836:	60bb      	str	r3, [r7, #8]
}
 800c838:	bf00      	nop
 800c83a:	bf00      	nop
 800c83c:	e7fd      	b.n	800c83a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c83e:	68f8      	ldr	r0, [r7, #12]
 800c840:	f000 f95e 	bl	800cb00 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d102      	bne.n	800c854 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800c84e:	68f8      	ldr	r0, [r7, #12]
 800c850:	f002 f87a 	bl	800e948 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c854:	bf00      	nop
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d006      	beq.n	800c87a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c876:	60fb      	str	r3, [r7, #12]
 800c878:	e001      	b.n	800c87e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c87a:	2300      	movs	r3, #0
 800c87c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c87e:	68fb      	ldr	r3, [r7, #12]
	}
 800c880:	4618      	mov	r0, r3
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c898:	2300      	movs	r3, #0
 800c89a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10d      	bne.n	800c8c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d14d      	bne.n	800c94e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f001 f870 	bl	800d99c <xTaskPriorityDisinherit>
 800c8bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	609a      	str	r2, [r3, #8]
 800c8c4:	e043      	b.n	800c94e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d119      	bne.n	800c900 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6858      	ldr	r0, [r3, #4]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	68b9      	ldr	r1, [r7, #8]
 800c8d8:	f002 fa00 	bl	800ecdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	685a      	ldr	r2, [r3, #4]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8e4:	441a      	add	r2, r3
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d32b      	bcc.n	800c94e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	605a      	str	r2, [r3, #4]
 800c8fe:	e026      	b.n	800c94e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	68d8      	ldr	r0, [r3, #12]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c908:	461a      	mov	r2, r3
 800c90a:	68b9      	ldr	r1, [r7, #8]
 800c90c:	f002 f9e6 	bl	800ecdc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68da      	ldr	r2, [r3, #12]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c918:	425b      	negs	r3, r3
 800c91a:	441a      	add	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	68da      	ldr	r2, [r3, #12]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d207      	bcs.n	800c93c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	689a      	ldr	r2, [r3, #8]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c934:	425b      	negs	r3, r3
 800c936:	441a      	add	r2, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d105      	bne.n	800c94e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d002      	beq.n	800c94e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	3b01      	subs	r3, #1
 800c94c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	1c5a      	adds	r2, r3, #1
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c956:	697b      	ldr	r3, [r7, #20]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3718      	adds	r7, #24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d018      	beq.n	800c9a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68da      	ldr	r2, [r3, #12]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c97a:	441a      	add	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	68da      	ldr	r2, [r3, #12]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d303      	bcc.n	800c994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68d9      	ldr	r1, [r3, #12]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c99c:	461a      	mov	r2, r3
 800c99e:	6838      	ldr	r0, [r7, #0]
 800c9a0:	f002 f99c 	bl	800ecdc <memcpy>
	}
}
 800c9a4:	bf00      	nop
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9b4:	f001 fdd8 	bl	800e568 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9c0:	e011      	b.n	800c9e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d012      	beq.n	800c9f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	3324      	adds	r3, #36	@ 0x24
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 fd98 	bl	800d504 <xTaskRemoveFromEventList>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c9da:	f000 fe71 	bl	800d6c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	dce9      	bgt.n	800c9c2 <prvUnlockQueue+0x16>
 800c9ee:	e000      	b.n	800c9f2 <prvUnlockQueue+0x46>
					break;
 800c9f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	22ff      	movs	r2, #255	@ 0xff
 800c9f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c9fa:	f001 fde7 	bl	800e5cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c9fe:	f001 fdb3 	bl	800e568 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca0a:	e011      	b.n	800ca30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d012      	beq.n	800ca3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	3310      	adds	r3, #16
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f000 fd73 	bl	800d504 <xTaskRemoveFromEventList>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d001      	beq.n	800ca28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca24:	f000 fe4c 	bl	800d6c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca28:	7bbb      	ldrb	r3, [r7, #14]
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	dce9      	bgt.n	800ca0c <prvUnlockQueue+0x60>
 800ca38:	e000      	b.n	800ca3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	22ff      	movs	r2, #255	@ 0xff
 800ca40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ca44:	f001 fdc2 	bl	800e5cc <vPortExitCritical>
}
 800ca48:	bf00      	nop
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca58:	f001 fd86 	bl	800e568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d102      	bne.n	800ca6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca64:	2301      	movs	r3, #1
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	e001      	b.n	800ca6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca6e:	f001 fdad 	bl	800e5cc <vPortExitCritical>

	return xReturn;
 800ca72:	68fb      	ldr	r3, [r7, #12]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca84:	f001 fd70 	bl	800e568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d102      	bne.n	800ca9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca94:	2301      	movs	r3, #1
 800ca96:	60fb      	str	r3, [r7, #12]
 800ca98:	e001      	b.n	800ca9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca9e:	f001 fd95 	bl	800e5cc <vPortExitCritical>

	return xReturn;
 800caa2:	68fb      	ldr	r3, [r7, #12]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cab6:	2300      	movs	r3, #0
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	e014      	b.n	800cae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cabc:	4a0f      	ldr	r2, [pc, #60]	@ (800cafc <vQueueAddToRegistry+0x50>)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10b      	bne.n	800cae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cac8:	490c      	ldr	r1, [pc, #48]	@ (800cafc <vQueueAddToRegistry+0x50>)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	683a      	ldr	r2, [r7, #0]
 800cace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cad2:	4a0a      	ldr	r2, [pc, #40]	@ (800cafc <vQueueAddToRegistry+0x50>)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	00db      	lsls	r3, r3, #3
 800cad8:	4413      	add	r3, r2
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cade:	e006      	b.n	800caee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	3301      	adds	r3, #1
 800cae4:	60fb      	str	r3, [r7, #12]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2b07      	cmp	r3, #7
 800caea:	d9e7      	bls.n	800cabc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800caec:	bf00      	nop
 800caee:	bf00      	nop
 800caf0:	3714      	adds	r7, #20
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop
 800cafc:	20000ed4 	.word	0x20000ed4

0800cb00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60fb      	str	r3, [r7, #12]
 800cb0c:	e016      	b.n	800cb3c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cb0e:	4a10      	ldr	r2, [pc, #64]	@ (800cb50 <vQueueUnregisterQueue+0x50>)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	00db      	lsls	r3, r3, #3
 800cb14:	4413      	add	r3, r2
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d10b      	bne.n	800cb36 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cb1e:	4a0c      	ldr	r2, [pc, #48]	@ (800cb50 <vQueueUnregisterQueue+0x50>)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2100      	movs	r1, #0
 800cb24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cb28:	4a09      	ldr	r2, [pc, #36]	@ (800cb50 <vQueueUnregisterQueue+0x50>)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	00db      	lsls	r3, r3, #3
 800cb2e:	4413      	add	r3, r2
 800cb30:	2200      	movs	r2, #0
 800cb32:	605a      	str	r2, [r3, #4]
				break;
 800cb34:	e006      	b.n	800cb44 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	60fb      	str	r3, [r7, #12]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b07      	cmp	r3, #7
 800cb40:	d9e5      	bls.n	800cb0e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cb42:	bf00      	nop
 800cb44:	bf00      	nop
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	20000ed4 	.word	0x20000ed4

0800cb54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb64:	f001 fd00 	bl	800e568 <vPortEnterCritical>
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb6e:	b25b      	sxtb	r3, r3
 800cb70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb74:	d103      	bne.n	800cb7e <vQueueWaitForMessageRestricted+0x2a>
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb84:	b25b      	sxtb	r3, r3
 800cb86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb8a:	d103      	bne.n	800cb94 <vQueueWaitForMessageRestricted+0x40>
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cb94:	f001 fd1a 	bl	800e5cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d106      	bne.n	800cbae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	3324      	adds	r3, #36	@ 0x24
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	68b9      	ldr	r1, [r7, #8]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f000 fc7f 	bl	800d4ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cbae:	6978      	ldr	r0, [r7, #20]
 800cbb0:	f7ff fefc 	bl	800c9ac <prvUnlockQueue>
	}
 800cbb4:	bf00      	nop
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b08e      	sub	sp, #56	@ 0x38
 800cbc0:	af04      	add	r7, sp, #16
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cbca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10b      	bne.n	800cbe8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	623b      	str	r3, [r7, #32]
}
 800cbe2:	bf00      	nop
 800cbe4:	bf00      	nop
 800cbe6:	e7fd      	b.n	800cbe4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10b      	bne.n	800cc06 <xTaskCreateStatic+0x4a>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	61fb      	str	r3, [r7, #28]
}
 800cc00:	bf00      	nop
 800cc02:	bf00      	nop
 800cc04:	e7fd      	b.n	800cc02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc06:	23a8      	movs	r3, #168	@ 0xa8
 800cc08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	2ba8      	cmp	r3, #168	@ 0xa8
 800cc0e:	d00b      	beq.n	800cc28 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	61bb      	str	r3, [r7, #24]
}
 800cc22:	bf00      	nop
 800cc24:	bf00      	nop
 800cc26:	e7fd      	b.n	800cc24 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d01e      	beq.n	800cc6e <xTaskCreateStatic+0xb2>
 800cc30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d01b      	beq.n	800cc6e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc38:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc3e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc42:	2202      	movs	r2, #2
 800cc44:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc48:	2300      	movs	r3, #0
 800cc4a:	9303      	str	r3, [sp, #12]
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4e:	9302      	str	r3, [sp, #8]
 800cc50:	f107 0314 	add.w	r3, r7, #20
 800cc54:	9301      	str	r3, [sp, #4]
 800cc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	68b9      	ldr	r1, [r7, #8]
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f000 f851 	bl	800cd08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cc68:	f000 f8f6 	bl	800ce58 <prvAddNewTaskToReadyList>
 800cc6c:	e001      	b.n	800cc72 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc72:	697b      	ldr	r3, [r7, #20]
	}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3728      	adds	r7, #40	@ 0x28
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b08c      	sub	sp, #48	@ 0x30
 800cc80:	af04      	add	r7, sp, #16
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	603b      	str	r3, [r7, #0]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc8c:	88fb      	ldrh	r3, [r7, #6]
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	4618      	mov	r0, r3
 800cc92:	f001 fd8b 	bl	800e7ac <pvPortMalloc>
 800cc96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00e      	beq.n	800ccbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc9e:	20a8      	movs	r0, #168	@ 0xa8
 800cca0:	f001 fd84 	bl	800e7ac <pvPortMalloc>
 800cca4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cca6:	69fb      	ldr	r3, [r7, #28]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d003      	beq.n	800ccb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	697a      	ldr	r2, [r7, #20]
 800ccb0:	631a      	str	r2, [r3, #48]	@ 0x30
 800ccb2:	e005      	b.n	800ccc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ccb4:	6978      	ldr	r0, [r7, #20]
 800ccb6:	f001 fe47 	bl	800e948 <vPortFree>
 800ccba:	e001      	b.n	800ccc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d017      	beq.n	800ccf6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ccce:	88fa      	ldrh	r2, [r7, #6]
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	9303      	str	r3, [sp, #12]
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	9302      	str	r3, [sp, #8]
 800ccd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccda:	9301      	str	r3, [sp, #4]
 800ccdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccde:	9300      	str	r3, [sp, #0]
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	68b9      	ldr	r1, [r7, #8]
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f000 f80f 	bl	800cd08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccea:	69f8      	ldr	r0, [r7, #28]
 800ccec:	f000 f8b4 	bl	800ce58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	61bb      	str	r3, [r7, #24]
 800ccf4:	e002      	b.n	800ccfc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ccf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ccfa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ccfc:	69bb      	ldr	r3, [r7, #24]
	}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3720      	adds	r7, #32
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
	...

0800cd08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b088      	sub	sp, #32
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
 800cd14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd18:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	461a      	mov	r2, r3
 800cd20:	21a5      	movs	r1, #165	@ 0xa5
 800cd22:	f001 ff51 	bl	800ebc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd30:	3b01      	subs	r3, #1
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	4413      	add	r3, r2
 800cd36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd38:	69bb      	ldr	r3, [r7, #24]
 800cd3a:	f023 0307 	bic.w	r3, r3, #7
 800cd3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	f003 0307 	and.w	r3, r3, #7
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00b      	beq.n	800cd62 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	617b      	str	r3, [r7, #20]
}
 800cd5c:	bf00      	nop
 800cd5e:	bf00      	nop
 800cd60:	e7fd      	b.n	800cd5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d01f      	beq.n	800cda8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd68:	2300      	movs	r3, #0
 800cd6a:	61fb      	str	r3, [r7, #28]
 800cd6c:	e012      	b.n	800cd94 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd6e:	68ba      	ldr	r2, [r7, #8]
 800cd70:	69fb      	ldr	r3, [r7, #28]
 800cd72:	4413      	add	r3, r2
 800cd74:	7819      	ldrb	r1, [r3, #0]
 800cd76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	3334      	adds	r3, #52	@ 0x34
 800cd7e:	460a      	mov	r2, r1
 800cd80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd82:	68ba      	ldr	r2, [r7, #8]
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	4413      	add	r3, r2
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d006      	beq.n	800cd9c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	3301      	adds	r3, #1
 800cd92:	61fb      	str	r3, [r7, #28]
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	2b0f      	cmp	r3, #15
 800cd98:	d9e9      	bls.n	800cd6e <prvInitialiseNewTask+0x66>
 800cd9a:	e000      	b.n	800cd9e <prvInitialiseNewTask+0x96>
			{
				break;
 800cd9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cda6:	e003      	b.n	800cdb0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb2:	2b37      	cmp	r3, #55	@ 0x37
 800cdb4:	d901      	bls.n	800cdba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cdb6:	2337      	movs	r3, #55	@ 0x37
 800cdb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cdba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdc4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cdc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc8:	2200      	movs	r2, #0
 800cdca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdce:	3304      	adds	r3, #4
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fe fe33 	bl	800ba3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd8:	3318      	adds	r3, #24
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fe fe2e 	bl	800ba3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cde4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdf4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce00:	2200      	movs	r2, #0
 800ce02:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ce06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce08:	3354      	adds	r3, #84	@ 0x54
 800ce0a:	224c      	movs	r2, #76	@ 0x4c
 800ce0c:	2100      	movs	r1, #0
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f001 feda 	bl	800ebc8 <memset>
 800ce14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce16:	4a0d      	ldr	r2, [pc, #52]	@ (800ce4c <prvInitialiseNewTask+0x144>)
 800ce18:	659a      	str	r2, [r3, #88]	@ 0x58
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1c:	4a0c      	ldr	r2, [pc, #48]	@ (800ce50 <prvInitialiseNewTask+0x148>)
 800ce1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ce20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce22:	4a0c      	ldr	r2, [pc, #48]	@ (800ce54 <prvInitialiseNewTask+0x14c>)
 800ce24:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce26:	683a      	ldr	r2, [r7, #0]
 800ce28:	68f9      	ldr	r1, [r7, #12]
 800ce2a:	69b8      	ldr	r0, [r7, #24]
 800ce2c:	f001 fa6c 	bl	800e308 <pxPortInitialiseStack>
 800ce30:	4602      	mov	r2, r0
 800ce32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce42:	bf00      	nop
 800ce44:	3720      	adds	r7, #32
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	20005168 	.word	0x20005168
 800ce50:	200051d0 	.word	0x200051d0
 800ce54:	20005238 	.word	0x20005238

0800ce58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce60:	f001 fb82 	bl	800e568 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce64:	4b2d      	ldr	r3, [pc, #180]	@ (800cf1c <prvAddNewTaskToReadyList+0xc4>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	4a2c      	ldr	r2, [pc, #176]	@ (800cf1c <prvAddNewTaskToReadyList+0xc4>)
 800ce6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce6e:	4b2c      	ldr	r3, [pc, #176]	@ (800cf20 <prvAddNewTaskToReadyList+0xc8>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d109      	bne.n	800ce8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce76:	4a2a      	ldr	r2, [pc, #168]	@ (800cf20 <prvAddNewTaskToReadyList+0xc8>)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce7c:	4b27      	ldr	r3, [pc, #156]	@ (800cf1c <prvAddNewTaskToReadyList+0xc4>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d110      	bne.n	800cea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce84:	f000 fc40 	bl	800d708 <prvInitialiseTaskLists>
 800ce88:	e00d      	b.n	800cea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce8a:	4b26      	ldr	r3, [pc, #152]	@ (800cf24 <prvAddNewTaskToReadyList+0xcc>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d109      	bne.n	800cea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce92:	4b23      	ldr	r3, [pc, #140]	@ (800cf20 <prvAddNewTaskToReadyList+0xc8>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d802      	bhi.n	800cea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cea0:	4a1f      	ldr	r2, [pc, #124]	@ (800cf20 <prvAddNewTaskToReadyList+0xc8>)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cea6:	4b20      	ldr	r3, [pc, #128]	@ (800cf28 <prvAddNewTaskToReadyList+0xd0>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	4a1e      	ldr	r2, [pc, #120]	@ (800cf28 <prvAddNewTaskToReadyList+0xd0>)
 800ceae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ceb0:	4b1d      	ldr	r3, [pc, #116]	@ (800cf28 <prvAddNewTaskToReadyList+0xd0>)
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cebc:	4b1b      	ldr	r3, [pc, #108]	@ (800cf2c <prvAddNewTaskToReadyList+0xd4>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d903      	bls.n	800cecc <prvAddNewTaskToReadyList+0x74>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec8:	4a18      	ldr	r2, [pc, #96]	@ (800cf2c <prvAddNewTaskToReadyList+0xd4>)
 800ceca:	6013      	str	r3, [r2, #0]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ced0:	4613      	mov	r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	4413      	add	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4a15      	ldr	r2, [pc, #84]	@ (800cf30 <prvAddNewTaskToReadyList+0xd8>)
 800ceda:	441a      	add	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	3304      	adds	r3, #4
 800cee0:	4619      	mov	r1, r3
 800cee2:	4610      	mov	r0, r2
 800cee4:	f7fe fdb7 	bl	800ba56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cee8:	f001 fb70 	bl	800e5cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ceec:	4b0d      	ldr	r3, [pc, #52]	@ (800cf24 <prvAddNewTaskToReadyList+0xcc>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00e      	beq.n	800cf12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cef4:	4b0a      	ldr	r3, [pc, #40]	@ (800cf20 <prvAddNewTaskToReadyList+0xc8>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d207      	bcs.n	800cf12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cf02:	4b0c      	ldr	r3, [pc, #48]	@ (800cf34 <prvAddNewTaskToReadyList+0xdc>)
 800cf04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf08:	601a      	str	r2, [r3, #0]
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf12:	bf00      	nop
 800cf14:	3708      	adds	r7, #8
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	200013e8 	.word	0x200013e8
 800cf20:	20000f14 	.word	0x20000f14
 800cf24:	200013f4 	.word	0x200013f4
 800cf28:	20001404 	.word	0x20001404
 800cf2c:	200013f0 	.word	0x200013f0
 800cf30:	20000f18 	.word	0x20000f18
 800cf34:	e000ed04 	.word	0xe000ed04

0800cf38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf40:	2300      	movs	r3, #0
 800cf42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d018      	beq.n	800cf7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf4a:	4b14      	ldr	r3, [pc, #80]	@ (800cf9c <vTaskDelay+0x64>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00b      	beq.n	800cf6a <vTaskDelay+0x32>
	__asm volatile
 800cf52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	60bb      	str	r3, [r7, #8]
}
 800cf64:	bf00      	nop
 800cf66:	bf00      	nop
 800cf68:	e7fd      	b.n	800cf66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf6a:	f000 f88b 	bl	800d084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf6e:	2100      	movs	r1, #0
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fe1b 	bl	800dbac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf76:	f000 f893 	bl	800d0a0 <xTaskResumeAll>
 800cf7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d107      	bne.n	800cf92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cf82:	4b07      	ldr	r3, [pc, #28]	@ (800cfa0 <vTaskDelay+0x68>)
 800cf84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf92:	bf00      	nop
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	20001410 	.word	0x20001410
 800cfa0:	e000ed04 	.word	0xe000ed04

0800cfa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b08a      	sub	sp, #40	@ 0x28
 800cfa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfb2:	463a      	mov	r2, r7
 800cfb4:	1d39      	adds	r1, r7, #4
 800cfb6:	f107 0308 	add.w	r3, r7, #8
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fe fcea 	bl	800b994 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfc0:	6839      	ldr	r1, [r7, #0]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	68ba      	ldr	r2, [r7, #8]
 800cfc6:	9202      	str	r2, [sp, #8]
 800cfc8:	9301      	str	r3, [sp, #4]
 800cfca:	2300      	movs	r3, #0
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	2300      	movs	r3, #0
 800cfd0:	460a      	mov	r2, r1
 800cfd2:	4924      	ldr	r1, [pc, #144]	@ (800d064 <vTaskStartScheduler+0xc0>)
 800cfd4:	4824      	ldr	r0, [pc, #144]	@ (800d068 <vTaskStartScheduler+0xc4>)
 800cfd6:	f7ff fdf1 	bl	800cbbc <xTaskCreateStatic>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	4a23      	ldr	r2, [pc, #140]	@ (800d06c <vTaskStartScheduler+0xc8>)
 800cfde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cfe0:	4b22      	ldr	r3, [pc, #136]	@ (800d06c <vTaskStartScheduler+0xc8>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	617b      	str	r3, [r7, #20]
 800cfec:	e001      	b.n	800cff2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cfee:	2300      	movs	r3, #0
 800cff0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d102      	bne.n	800cffe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cff8:	f000 fe2c 	bl	800dc54 <xTimerCreateTimerTask>
 800cffc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d11b      	bne.n	800d03c <vTaskStartScheduler+0x98>
	__asm volatile
 800d004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	613b      	str	r3, [r7, #16]
}
 800d016:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d018:	4b15      	ldr	r3, [pc, #84]	@ (800d070 <vTaskStartScheduler+0xcc>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3354      	adds	r3, #84	@ 0x54
 800d01e:	4a15      	ldr	r2, [pc, #84]	@ (800d074 <vTaskStartScheduler+0xd0>)
 800d020:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d022:	4b15      	ldr	r3, [pc, #84]	@ (800d078 <vTaskStartScheduler+0xd4>)
 800d024:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d028:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d02a:	4b14      	ldr	r3, [pc, #80]	@ (800d07c <vTaskStartScheduler+0xd8>)
 800d02c:	2201      	movs	r2, #1
 800d02e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d030:	4b13      	ldr	r3, [pc, #76]	@ (800d080 <vTaskStartScheduler+0xdc>)
 800d032:	2200      	movs	r2, #0
 800d034:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d036:	f001 f9f3 	bl	800e420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d03a:	e00f      	b.n	800d05c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d042:	d10b      	bne.n	800d05c <vTaskStartScheduler+0xb8>
	__asm volatile
 800d044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d048:	f383 8811 	msr	BASEPRI, r3
 800d04c:	f3bf 8f6f 	isb	sy
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	60fb      	str	r3, [r7, #12]
}
 800d056:	bf00      	nop
 800d058:	bf00      	nop
 800d05a:	e7fd      	b.n	800d058 <vTaskStartScheduler+0xb4>
}
 800d05c:	bf00      	nop
 800d05e:	3718      	adds	r7, #24
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	0800f940 	.word	0x0800f940
 800d068:	0800d6d9 	.word	0x0800d6d9
 800d06c:	2000140c 	.word	0x2000140c
 800d070:	20000f14 	.word	0x20000f14
 800d074:	20000010 	.word	0x20000010
 800d078:	20001408 	.word	0x20001408
 800d07c:	200013f4 	.word	0x200013f4
 800d080:	200013ec 	.word	0x200013ec

0800d084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d084:	b480      	push	{r7}
 800d086:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d088:	4b04      	ldr	r3, [pc, #16]	@ (800d09c <vTaskSuspendAll+0x18>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	3301      	adds	r3, #1
 800d08e:	4a03      	ldr	r2, [pc, #12]	@ (800d09c <vTaskSuspendAll+0x18>)
 800d090:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d092:	bf00      	nop
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr
 800d09c:	20001410 	.word	0x20001410

0800d0a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0ae:	4b42      	ldr	r3, [pc, #264]	@ (800d1b8 <xTaskResumeAll+0x118>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10b      	bne.n	800d0ce <xTaskResumeAll+0x2e>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	603b      	str	r3, [r7, #0]
}
 800d0c8:	bf00      	nop
 800d0ca:	bf00      	nop
 800d0cc:	e7fd      	b.n	800d0ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0ce:	f001 fa4b 	bl	800e568 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0d2:	4b39      	ldr	r3, [pc, #228]	@ (800d1b8 <xTaskResumeAll+0x118>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	4a37      	ldr	r2, [pc, #220]	@ (800d1b8 <xTaskResumeAll+0x118>)
 800d0da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0dc:	4b36      	ldr	r3, [pc, #216]	@ (800d1b8 <xTaskResumeAll+0x118>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d162      	bne.n	800d1aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0e4:	4b35      	ldr	r3, [pc, #212]	@ (800d1bc <xTaskResumeAll+0x11c>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d05e      	beq.n	800d1aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0ec:	e02f      	b.n	800d14e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0ee:	4b34      	ldr	r3, [pc, #208]	@ (800d1c0 <xTaskResumeAll+0x120>)
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	3318      	adds	r3, #24
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fe fd08 	bl	800bb10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	3304      	adds	r3, #4
 800d104:	4618      	mov	r0, r3
 800d106:	f7fe fd03 	bl	800bb10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d10e:	4b2d      	ldr	r3, [pc, #180]	@ (800d1c4 <xTaskResumeAll+0x124>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	429a      	cmp	r2, r3
 800d114:	d903      	bls.n	800d11e <xTaskResumeAll+0x7e>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d11a:	4a2a      	ldr	r2, [pc, #168]	@ (800d1c4 <xTaskResumeAll+0x124>)
 800d11c:	6013      	str	r3, [r2, #0]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d122:	4613      	mov	r3, r2
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	4413      	add	r3, r2
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	4a27      	ldr	r2, [pc, #156]	@ (800d1c8 <xTaskResumeAll+0x128>)
 800d12c:	441a      	add	r2, r3
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	3304      	adds	r3, #4
 800d132:	4619      	mov	r1, r3
 800d134:	4610      	mov	r0, r2
 800d136:	f7fe fc8e 	bl	800ba56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d13e:	4b23      	ldr	r3, [pc, #140]	@ (800d1cc <xTaskResumeAll+0x12c>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d144:	429a      	cmp	r2, r3
 800d146:	d302      	bcc.n	800d14e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d148:	4b21      	ldr	r3, [pc, #132]	@ (800d1d0 <xTaskResumeAll+0x130>)
 800d14a:	2201      	movs	r2, #1
 800d14c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d14e:	4b1c      	ldr	r3, [pc, #112]	@ (800d1c0 <xTaskResumeAll+0x120>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d1cb      	bne.n	800d0ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d001      	beq.n	800d160 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d15c:	f000 fb78 	bl	800d850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d160:	4b1c      	ldr	r3, [pc, #112]	@ (800d1d4 <xTaskResumeAll+0x134>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d010      	beq.n	800d18e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d16c:	f000 f858 	bl	800d220 <xTaskIncrementTick>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d002      	beq.n	800d17c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d176:	4b16      	ldr	r3, [pc, #88]	@ (800d1d0 <xTaskResumeAll+0x130>)
 800d178:	2201      	movs	r2, #1
 800d17a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	3b01      	subs	r3, #1
 800d180:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1f1      	bne.n	800d16c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d188:	4b12      	ldr	r3, [pc, #72]	@ (800d1d4 <xTaskResumeAll+0x134>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d18e:	4b10      	ldr	r3, [pc, #64]	@ (800d1d0 <xTaskResumeAll+0x130>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d009      	beq.n	800d1aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d196:	2301      	movs	r3, #1
 800d198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d19a:	4b0f      	ldr	r3, [pc, #60]	@ (800d1d8 <xTaskResumeAll+0x138>)
 800d19c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1aa:	f001 fa0f 	bl	800e5cc <vPortExitCritical>

	return xAlreadyYielded;
 800d1ae:	68bb      	ldr	r3, [r7, #8]
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	20001410 	.word	0x20001410
 800d1bc:	200013e8 	.word	0x200013e8
 800d1c0:	200013a8 	.word	0x200013a8
 800d1c4:	200013f0 	.word	0x200013f0
 800d1c8:	20000f18 	.word	0x20000f18
 800d1cc:	20000f14 	.word	0x20000f14
 800d1d0:	200013fc 	.word	0x200013fc
 800d1d4:	200013f8 	.word	0x200013f8
 800d1d8:	e000ed04 	.word	0xe000ed04

0800d1dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d1e2:	4b05      	ldr	r3, [pc, #20]	@ (800d1f8 <xTaskGetTickCount+0x1c>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d1e8:	687b      	ldr	r3, [r7, #4]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	370c      	adds	r7, #12
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	200013ec 	.word	0x200013ec

0800d1fc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d202:	f001 fa91 	bl	800e728 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d206:	2300      	movs	r3, #0
 800d208:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d20a:	4b04      	ldr	r3, [pc, #16]	@ (800d21c <xTaskGetTickCountFromISR+0x20>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d210:	683b      	ldr	r3, [r7, #0]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	200013ec 	.word	0x200013ec

0800d220 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d226:	2300      	movs	r3, #0
 800d228:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d22a:	4b4f      	ldr	r3, [pc, #316]	@ (800d368 <xTaskIncrementTick+0x148>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f040 8090 	bne.w	800d354 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d234:	4b4d      	ldr	r3, [pc, #308]	@ (800d36c <xTaskIncrementTick+0x14c>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	3301      	adds	r3, #1
 800d23a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d23c:	4a4b      	ldr	r2, [pc, #300]	@ (800d36c <xTaskIncrementTick+0x14c>)
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d121      	bne.n	800d28c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d248:	4b49      	ldr	r3, [pc, #292]	@ (800d370 <xTaskIncrementTick+0x150>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00b      	beq.n	800d26a <xTaskIncrementTick+0x4a>
	__asm volatile
 800d252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d256:	f383 8811 	msr	BASEPRI, r3
 800d25a:	f3bf 8f6f 	isb	sy
 800d25e:	f3bf 8f4f 	dsb	sy
 800d262:	603b      	str	r3, [r7, #0]
}
 800d264:	bf00      	nop
 800d266:	bf00      	nop
 800d268:	e7fd      	b.n	800d266 <xTaskIncrementTick+0x46>
 800d26a:	4b41      	ldr	r3, [pc, #260]	@ (800d370 <xTaskIncrementTick+0x150>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	60fb      	str	r3, [r7, #12]
 800d270:	4b40      	ldr	r3, [pc, #256]	@ (800d374 <xTaskIncrementTick+0x154>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a3e      	ldr	r2, [pc, #248]	@ (800d370 <xTaskIncrementTick+0x150>)
 800d276:	6013      	str	r3, [r2, #0]
 800d278:	4a3e      	ldr	r2, [pc, #248]	@ (800d374 <xTaskIncrementTick+0x154>)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6013      	str	r3, [r2, #0]
 800d27e:	4b3e      	ldr	r3, [pc, #248]	@ (800d378 <xTaskIncrementTick+0x158>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	3301      	adds	r3, #1
 800d284:	4a3c      	ldr	r2, [pc, #240]	@ (800d378 <xTaskIncrementTick+0x158>)
 800d286:	6013      	str	r3, [r2, #0]
 800d288:	f000 fae2 	bl	800d850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d28c:	4b3b      	ldr	r3, [pc, #236]	@ (800d37c <xTaskIncrementTick+0x15c>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	693a      	ldr	r2, [r7, #16]
 800d292:	429a      	cmp	r2, r3
 800d294:	d349      	bcc.n	800d32a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d296:	4b36      	ldr	r3, [pc, #216]	@ (800d370 <xTaskIncrementTick+0x150>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d104      	bne.n	800d2aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2a0:	4b36      	ldr	r3, [pc, #216]	@ (800d37c <xTaskIncrementTick+0x15c>)
 800d2a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d2a6:	601a      	str	r2, [r3, #0]
					break;
 800d2a8:	e03f      	b.n	800d32a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2aa:	4b31      	ldr	r3, [pc, #196]	@ (800d370 <xTaskIncrementTick+0x150>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d2ba:	693a      	ldr	r2, [r7, #16]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d203      	bcs.n	800d2ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d2c2:	4a2e      	ldr	r2, [pc, #184]	@ (800d37c <xTaskIncrementTick+0x15c>)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2c8:	e02f      	b.n	800d32a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	3304      	adds	r3, #4
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fe fc1e 	bl	800bb10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d004      	beq.n	800d2e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	3318      	adds	r3, #24
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7fe fc15 	bl	800bb10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2ea:	4b25      	ldr	r3, [pc, #148]	@ (800d380 <xTaskIncrementTick+0x160>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d903      	bls.n	800d2fa <xTaskIncrementTick+0xda>
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2f6:	4a22      	ldr	r2, [pc, #136]	@ (800d380 <xTaskIncrementTick+0x160>)
 800d2f8:	6013      	str	r3, [r2, #0]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2fe:	4613      	mov	r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	4413      	add	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	4a1f      	ldr	r2, [pc, #124]	@ (800d384 <xTaskIncrementTick+0x164>)
 800d308:	441a      	add	r2, r3
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	3304      	adds	r3, #4
 800d30e:	4619      	mov	r1, r3
 800d310:	4610      	mov	r0, r2
 800d312:	f7fe fba0 	bl	800ba56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d31a:	4b1b      	ldr	r3, [pc, #108]	@ (800d388 <xTaskIncrementTick+0x168>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d320:	429a      	cmp	r2, r3
 800d322:	d3b8      	bcc.n	800d296 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d324:	2301      	movs	r3, #1
 800d326:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d328:	e7b5      	b.n	800d296 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d32a:	4b17      	ldr	r3, [pc, #92]	@ (800d388 <xTaskIncrementTick+0x168>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d330:	4914      	ldr	r1, [pc, #80]	@ (800d384 <xTaskIncrementTick+0x164>)
 800d332:	4613      	mov	r3, r2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	4413      	add	r3, r2
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	440b      	add	r3, r1
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d901      	bls.n	800d346 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d342:	2301      	movs	r3, #1
 800d344:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d346:	4b11      	ldr	r3, [pc, #68]	@ (800d38c <xTaskIncrementTick+0x16c>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d007      	beq.n	800d35e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d34e:	2301      	movs	r3, #1
 800d350:	617b      	str	r3, [r7, #20]
 800d352:	e004      	b.n	800d35e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d354:	4b0e      	ldr	r3, [pc, #56]	@ (800d390 <xTaskIncrementTick+0x170>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	3301      	adds	r3, #1
 800d35a:	4a0d      	ldr	r2, [pc, #52]	@ (800d390 <xTaskIncrementTick+0x170>)
 800d35c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d35e:	697b      	ldr	r3, [r7, #20]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3718      	adds	r7, #24
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	20001410 	.word	0x20001410
 800d36c:	200013ec 	.word	0x200013ec
 800d370:	200013a0 	.word	0x200013a0
 800d374:	200013a4 	.word	0x200013a4
 800d378:	20001400 	.word	0x20001400
 800d37c:	20001408 	.word	0x20001408
 800d380:	200013f0 	.word	0x200013f0
 800d384:	20000f18 	.word	0x20000f18
 800d388:	20000f14 	.word	0x20000f14
 800d38c:	200013fc 	.word	0x200013fc
 800d390:	200013f8 	.word	0x200013f8

0800d394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d394:	b480      	push	{r7}
 800d396:	b085      	sub	sp, #20
 800d398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d39a:	4b2b      	ldr	r3, [pc, #172]	@ (800d448 <vTaskSwitchContext+0xb4>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d003      	beq.n	800d3aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d3a2:	4b2a      	ldr	r3, [pc, #168]	@ (800d44c <vTaskSwitchContext+0xb8>)
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d3a8:	e047      	b.n	800d43a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d3aa:	4b28      	ldr	r3, [pc, #160]	@ (800d44c <vTaskSwitchContext+0xb8>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3b0:	4b27      	ldr	r3, [pc, #156]	@ (800d450 <vTaskSwitchContext+0xbc>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	60fb      	str	r3, [r7, #12]
 800d3b6:	e011      	b.n	800d3dc <vTaskSwitchContext+0x48>
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10b      	bne.n	800d3d6 <vTaskSwitchContext+0x42>
	__asm volatile
 800d3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	607b      	str	r3, [r7, #4]
}
 800d3d0:	bf00      	nop
 800d3d2:	bf00      	nop
 800d3d4:	e7fd      	b.n	800d3d2 <vTaskSwitchContext+0x3e>
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	60fb      	str	r3, [r7, #12]
 800d3dc:	491d      	ldr	r1, [pc, #116]	@ (800d454 <vTaskSwitchContext+0xc0>)
 800d3de:	68fa      	ldr	r2, [r7, #12]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	440b      	add	r3, r1
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d0e3      	beq.n	800d3b8 <vTaskSwitchContext+0x24>
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4413      	add	r3, r2
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	4a16      	ldr	r2, [pc, #88]	@ (800d454 <vTaskSwitchContext+0xc0>)
 800d3fc:	4413      	add	r3, r2
 800d3fe:	60bb      	str	r3, [r7, #8]
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	685a      	ldr	r2, [r3, #4]
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	605a      	str	r2, [r3, #4]
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	685a      	ldr	r2, [r3, #4]
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	3308      	adds	r3, #8
 800d412:	429a      	cmp	r2, r3
 800d414:	d104      	bne.n	800d420 <vTaskSwitchContext+0x8c>
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	605a      	str	r2, [r3, #4]
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	4a0c      	ldr	r2, [pc, #48]	@ (800d458 <vTaskSwitchContext+0xc4>)
 800d428:	6013      	str	r3, [r2, #0]
 800d42a:	4a09      	ldr	r2, [pc, #36]	@ (800d450 <vTaskSwitchContext+0xbc>)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d430:	4b09      	ldr	r3, [pc, #36]	@ (800d458 <vTaskSwitchContext+0xc4>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	3354      	adds	r3, #84	@ 0x54
 800d436:	4a09      	ldr	r2, [pc, #36]	@ (800d45c <vTaskSwitchContext+0xc8>)
 800d438:	6013      	str	r3, [r2, #0]
}
 800d43a:	bf00      	nop
 800d43c:	3714      	adds	r7, #20
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	20001410 	.word	0x20001410
 800d44c:	200013fc 	.word	0x200013fc
 800d450:	200013f0 	.word	0x200013f0
 800d454:	20000f18 	.word	0x20000f18
 800d458:	20000f14 	.word	0x20000f14
 800d45c:	20000010 	.word	0x20000010

0800d460 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10b      	bne.n	800d488 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	60fb      	str	r3, [r7, #12]
}
 800d482:	bf00      	nop
 800d484:	bf00      	nop
 800d486:	e7fd      	b.n	800d484 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d488:	4b07      	ldr	r3, [pc, #28]	@ (800d4a8 <vTaskPlaceOnEventList+0x48>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	3318      	adds	r3, #24
 800d48e:	4619      	mov	r1, r3
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7fe fb04 	bl	800ba9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d496:	2101      	movs	r1, #1
 800d498:	6838      	ldr	r0, [r7, #0]
 800d49a:	f000 fb87 	bl	800dbac <prvAddCurrentTaskToDelayedList>
}
 800d49e:	bf00      	nop
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20000f14 	.word	0x20000f14

0800d4ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d10b      	bne.n	800d4d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	617b      	str	r3, [r7, #20]
}
 800d4d0:	bf00      	nop
 800d4d2:	bf00      	nop
 800d4d4:	e7fd      	b.n	800d4d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d500 <vTaskPlaceOnEventListRestricted+0x54>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3318      	adds	r3, #24
 800d4dc:	4619      	mov	r1, r3
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f7fe fab9 	bl	800ba56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d002      	beq.n	800d4f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d4ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d4ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d4f0:	6879      	ldr	r1, [r7, #4]
 800d4f2:	68b8      	ldr	r0, [r7, #8]
 800d4f4:	f000 fb5a 	bl	800dbac <prvAddCurrentTaskToDelayedList>
	}
 800d4f8:	bf00      	nop
 800d4fa:	3718      	adds	r7, #24
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	20000f14 	.word	0x20000f14

0800d504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10b      	bne.n	800d532 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	60fb      	str	r3, [r7, #12]
}
 800d52c:	bf00      	nop
 800d52e:	bf00      	nop
 800d530:	e7fd      	b.n	800d52e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	3318      	adds	r3, #24
 800d536:	4618      	mov	r0, r3
 800d538:	f7fe faea 	bl	800bb10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d53c:	4b1d      	ldr	r3, [pc, #116]	@ (800d5b4 <xTaskRemoveFromEventList+0xb0>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d11d      	bne.n	800d580 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	3304      	adds	r3, #4
 800d548:	4618      	mov	r0, r3
 800d54a:	f7fe fae1 	bl	800bb10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d552:	4b19      	ldr	r3, [pc, #100]	@ (800d5b8 <xTaskRemoveFromEventList+0xb4>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	429a      	cmp	r2, r3
 800d558:	d903      	bls.n	800d562 <xTaskRemoveFromEventList+0x5e>
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d55e:	4a16      	ldr	r2, [pc, #88]	@ (800d5b8 <xTaskRemoveFromEventList+0xb4>)
 800d560:	6013      	str	r3, [r2, #0]
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d566:	4613      	mov	r3, r2
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	4413      	add	r3, r2
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	4a13      	ldr	r2, [pc, #76]	@ (800d5bc <xTaskRemoveFromEventList+0xb8>)
 800d570:	441a      	add	r2, r3
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	3304      	adds	r3, #4
 800d576:	4619      	mov	r1, r3
 800d578:	4610      	mov	r0, r2
 800d57a:	f7fe fa6c 	bl	800ba56 <vListInsertEnd>
 800d57e:	e005      	b.n	800d58c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	3318      	adds	r3, #24
 800d584:	4619      	mov	r1, r3
 800d586:	480e      	ldr	r0, [pc, #56]	@ (800d5c0 <xTaskRemoveFromEventList+0xbc>)
 800d588:	f7fe fa65 	bl	800ba56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d590:	4b0c      	ldr	r3, [pc, #48]	@ (800d5c4 <xTaskRemoveFromEventList+0xc0>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d596:	429a      	cmp	r2, r3
 800d598:	d905      	bls.n	800d5a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d59a:	2301      	movs	r3, #1
 800d59c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d59e:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c8 <xTaskRemoveFromEventList+0xc4>)
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	e001      	b.n	800d5aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d5aa:	697b      	ldr	r3, [r7, #20]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3718      	adds	r7, #24
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	20001410 	.word	0x20001410
 800d5b8:	200013f0 	.word	0x200013f0
 800d5bc:	20000f18 	.word	0x20000f18
 800d5c0:	200013a8 	.word	0x200013a8
 800d5c4:	20000f14 	.word	0x20000f14
 800d5c8:	200013fc 	.word	0x200013fc

0800d5cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5d4:	4b06      	ldr	r3, [pc, #24]	@ (800d5f0 <vTaskInternalSetTimeOutState+0x24>)
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d5dc:	4b05      	ldr	r3, [pc, #20]	@ (800d5f4 <vTaskInternalSetTimeOutState+0x28>)
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	605a      	str	r2, [r3, #4]
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	20001400 	.word	0x20001400
 800d5f4:	200013ec 	.word	0x200013ec

0800d5f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b088      	sub	sp, #32
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10b      	bne.n	800d620 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d60c:	f383 8811 	msr	BASEPRI, r3
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	f3bf 8f4f 	dsb	sy
 800d618:	613b      	str	r3, [r7, #16]
}
 800d61a:	bf00      	nop
 800d61c:	bf00      	nop
 800d61e:	e7fd      	b.n	800d61c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10b      	bne.n	800d63e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62a:	f383 8811 	msr	BASEPRI, r3
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	60fb      	str	r3, [r7, #12]
}
 800d638:	bf00      	nop
 800d63a:	bf00      	nop
 800d63c:	e7fd      	b.n	800d63a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d63e:	f000 ff93 	bl	800e568 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d642:	4b1d      	ldr	r3, [pc, #116]	@ (800d6b8 <xTaskCheckForTimeOut+0xc0>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	69ba      	ldr	r2, [r7, #24]
 800d64e:	1ad3      	subs	r3, r2, r3
 800d650:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d65a:	d102      	bne.n	800d662 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d65c:	2300      	movs	r3, #0
 800d65e:	61fb      	str	r3, [r7, #28]
 800d660:	e023      	b.n	800d6aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	4b15      	ldr	r3, [pc, #84]	@ (800d6bc <xTaskCheckForTimeOut+0xc4>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d007      	beq.n	800d67e <xTaskCheckForTimeOut+0x86>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	69ba      	ldr	r2, [r7, #24]
 800d674:	429a      	cmp	r2, r3
 800d676:	d302      	bcc.n	800d67e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d678:	2301      	movs	r3, #1
 800d67a:	61fb      	str	r3, [r7, #28]
 800d67c:	e015      	b.n	800d6aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	697a      	ldr	r2, [r7, #20]
 800d684:	429a      	cmp	r2, r3
 800d686:	d20b      	bcs.n	800d6a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	1ad2      	subs	r2, r2, r3
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff ff99 	bl	800d5cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d69a:	2300      	movs	r3, #0
 800d69c:	61fb      	str	r3, [r7, #28]
 800d69e:	e004      	b.n	800d6aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d6aa:	f000 ff8f 	bl	800e5cc <vPortExitCritical>

	return xReturn;
 800d6ae:	69fb      	ldr	r3, [r7, #28]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3720      	adds	r7, #32
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	200013ec 	.word	0x200013ec
 800d6bc:	20001400 	.word	0x20001400

0800d6c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d6c4:	4b03      	ldr	r3, [pc, #12]	@ (800d6d4 <vTaskMissedYield+0x14>)
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	601a      	str	r2, [r3, #0]
}
 800d6ca:	bf00      	nop
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr
 800d6d4:	200013fc 	.word	0x200013fc

0800d6d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d6e0:	f000 f852 	bl	800d788 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d6e4:	4b06      	ldr	r3, [pc, #24]	@ (800d700 <prvIdleTask+0x28>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d9f9      	bls.n	800d6e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d6ec:	4b05      	ldr	r3, [pc, #20]	@ (800d704 <prvIdleTask+0x2c>)
 800d6ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d6fc:	e7f0      	b.n	800d6e0 <prvIdleTask+0x8>
 800d6fe:	bf00      	nop
 800d700:	20000f18 	.word	0x20000f18
 800d704:	e000ed04 	.word	0xe000ed04

0800d708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d70e:	2300      	movs	r3, #0
 800d710:	607b      	str	r3, [r7, #4]
 800d712:	e00c      	b.n	800d72e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	4613      	mov	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	4a12      	ldr	r2, [pc, #72]	@ (800d768 <prvInitialiseTaskLists+0x60>)
 800d720:	4413      	add	r3, r2
 800d722:	4618      	mov	r0, r3
 800d724:	f7fe f96a 	bl	800b9fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	3301      	adds	r3, #1
 800d72c:	607b      	str	r3, [r7, #4]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2b37      	cmp	r3, #55	@ 0x37
 800d732:	d9ef      	bls.n	800d714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d734:	480d      	ldr	r0, [pc, #52]	@ (800d76c <prvInitialiseTaskLists+0x64>)
 800d736:	f7fe f961 	bl	800b9fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d73a:	480d      	ldr	r0, [pc, #52]	@ (800d770 <prvInitialiseTaskLists+0x68>)
 800d73c:	f7fe f95e 	bl	800b9fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d740:	480c      	ldr	r0, [pc, #48]	@ (800d774 <prvInitialiseTaskLists+0x6c>)
 800d742:	f7fe f95b 	bl	800b9fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d746:	480c      	ldr	r0, [pc, #48]	@ (800d778 <prvInitialiseTaskLists+0x70>)
 800d748:	f7fe f958 	bl	800b9fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d74c:	480b      	ldr	r0, [pc, #44]	@ (800d77c <prvInitialiseTaskLists+0x74>)
 800d74e:	f7fe f955 	bl	800b9fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d752:	4b0b      	ldr	r3, [pc, #44]	@ (800d780 <prvInitialiseTaskLists+0x78>)
 800d754:	4a05      	ldr	r2, [pc, #20]	@ (800d76c <prvInitialiseTaskLists+0x64>)
 800d756:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d758:	4b0a      	ldr	r3, [pc, #40]	@ (800d784 <prvInitialiseTaskLists+0x7c>)
 800d75a:	4a05      	ldr	r2, [pc, #20]	@ (800d770 <prvInitialiseTaskLists+0x68>)
 800d75c:	601a      	str	r2, [r3, #0]
}
 800d75e:	bf00      	nop
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	20000f18 	.word	0x20000f18
 800d76c:	20001378 	.word	0x20001378
 800d770:	2000138c 	.word	0x2000138c
 800d774:	200013a8 	.word	0x200013a8
 800d778:	200013bc 	.word	0x200013bc
 800d77c:	200013d4 	.word	0x200013d4
 800d780:	200013a0 	.word	0x200013a0
 800d784:	200013a4 	.word	0x200013a4

0800d788 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d78e:	e019      	b.n	800d7c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d790:	f000 feea 	bl	800e568 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d794:	4b10      	ldr	r3, [pc, #64]	@ (800d7d8 <prvCheckTasksWaitingTermination+0x50>)
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	3304      	adds	r3, #4
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fe f9b5 	bl	800bb10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d7dc <prvCheckTasksWaitingTermination+0x54>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	3b01      	subs	r3, #1
 800d7ac:	4a0b      	ldr	r2, [pc, #44]	@ (800d7dc <prvCheckTasksWaitingTermination+0x54>)
 800d7ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d7b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d7e0 <prvCheckTasksWaitingTermination+0x58>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	4a0a      	ldr	r2, [pc, #40]	@ (800d7e0 <prvCheckTasksWaitingTermination+0x58>)
 800d7b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d7ba:	f000 ff07 	bl	800e5cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 f810 	bl	800d7e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7c4:	4b06      	ldr	r3, [pc, #24]	@ (800d7e0 <prvCheckTasksWaitingTermination+0x58>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1e1      	bne.n	800d790 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d7cc:	bf00      	nop
 800d7ce:	bf00      	nop
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	200013bc 	.word	0x200013bc
 800d7dc:	200013e8 	.word	0x200013e8
 800d7e0:	200013d0 	.word	0x200013d0

0800d7e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	3354      	adds	r3, #84	@ 0x54
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f001 f9f1 	bl	800ebd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d108      	bne.n	800d812 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d804:	4618      	mov	r0, r3
 800d806:	f001 f89f 	bl	800e948 <vPortFree>
				vPortFree( pxTCB );
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f001 f89c 	bl	800e948 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d810:	e019      	b.n	800d846 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d103      	bne.n	800d824 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f001 f893 	bl	800e948 <vPortFree>
	}
 800d822:	e010      	b.n	800d846 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	d00b      	beq.n	800d846 <prvDeleteTCB+0x62>
	__asm volatile
 800d82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d832:	f383 8811 	msr	BASEPRI, r3
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	60fb      	str	r3, [r7, #12]
}
 800d840:	bf00      	nop
 800d842:	bf00      	nop
 800d844:	e7fd      	b.n	800d842 <prvDeleteTCB+0x5e>
	}
 800d846:	bf00      	nop
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
	...

0800d850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d856:	4b0c      	ldr	r3, [pc, #48]	@ (800d888 <prvResetNextTaskUnblockTime+0x38>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d104      	bne.n	800d86a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d860:	4b0a      	ldr	r3, [pc, #40]	@ (800d88c <prvResetNextTaskUnblockTime+0x3c>)
 800d862:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d868:	e008      	b.n	800d87c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d86a:	4b07      	ldr	r3, [pc, #28]	@ (800d888 <prvResetNextTaskUnblockTime+0x38>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	4a04      	ldr	r2, [pc, #16]	@ (800d88c <prvResetNextTaskUnblockTime+0x3c>)
 800d87a:	6013      	str	r3, [r2, #0]
}
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	200013a0 	.word	0x200013a0
 800d88c:	20001408 	.word	0x20001408

0800d890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d896:	4b0b      	ldr	r3, [pc, #44]	@ (800d8c4 <xTaskGetSchedulerState+0x34>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d102      	bne.n	800d8a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	607b      	str	r3, [r7, #4]
 800d8a2:	e008      	b.n	800d8b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8a4:	4b08      	ldr	r3, [pc, #32]	@ (800d8c8 <xTaskGetSchedulerState+0x38>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d102      	bne.n	800d8b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d8ac:	2302      	movs	r3, #2
 800d8ae:	607b      	str	r3, [r7, #4]
 800d8b0:	e001      	b.n	800d8b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d8b6:	687b      	ldr	r3, [r7, #4]
	}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr
 800d8c4:	200013f4 	.word	0x200013f4
 800d8c8:	20001410 	.word	0x20001410

0800d8cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d051      	beq.n	800d986 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8e6:	4b2a      	ldr	r3, [pc, #168]	@ (800d990 <xTaskPriorityInherit+0xc4>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d241      	bcs.n	800d974 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	699b      	ldr	r3, [r3, #24]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	db06      	blt.n	800d906 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8f8:	4b25      	ldr	r3, [pc, #148]	@ (800d990 <xTaskPriorityInherit+0xc4>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	6959      	ldr	r1, [r3, #20]
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d90e:	4613      	mov	r3, r2
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	4413      	add	r3, r2
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4a1f      	ldr	r2, [pc, #124]	@ (800d994 <xTaskPriorityInherit+0xc8>)
 800d918:	4413      	add	r3, r2
 800d91a:	4299      	cmp	r1, r3
 800d91c:	d122      	bne.n	800d964 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	3304      	adds	r3, #4
 800d922:	4618      	mov	r0, r3
 800d924:	f7fe f8f4 	bl	800bb10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d928:	4b19      	ldr	r3, [pc, #100]	@ (800d990 <xTaskPriorityInherit+0xc4>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d936:	4b18      	ldr	r3, [pc, #96]	@ (800d998 <xTaskPriorityInherit+0xcc>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d903      	bls.n	800d946 <xTaskPriorityInherit+0x7a>
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d942:	4a15      	ldr	r2, [pc, #84]	@ (800d998 <xTaskPriorityInherit+0xcc>)
 800d944:	6013      	str	r3, [r2, #0]
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d94a:	4613      	mov	r3, r2
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	4413      	add	r3, r2
 800d950:	009b      	lsls	r3, r3, #2
 800d952:	4a10      	ldr	r2, [pc, #64]	@ (800d994 <xTaskPriorityInherit+0xc8>)
 800d954:	441a      	add	r2, r3
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	3304      	adds	r3, #4
 800d95a:	4619      	mov	r1, r3
 800d95c:	4610      	mov	r0, r2
 800d95e:	f7fe f87a 	bl	800ba56 <vListInsertEnd>
 800d962:	e004      	b.n	800d96e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d964:	4b0a      	ldr	r3, [pc, #40]	@ (800d990 <xTaskPriorityInherit+0xc4>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d96e:	2301      	movs	r3, #1
 800d970:	60fb      	str	r3, [r7, #12]
 800d972:	e008      	b.n	800d986 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d978:	4b05      	ldr	r3, [pc, #20]	@ (800d990 <xTaskPriorityInherit+0xc4>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d97e:	429a      	cmp	r2, r3
 800d980:	d201      	bcs.n	800d986 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d982:	2301      	movs	r3, #1
 800d984:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d986:	68fb      	ldr	r3, [r7, #12]
	}
 800d988:	4618      	mov	r0, r3
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	20000f14 	.word	0x20000f14
 800d994:	20000f18 	.word	0x20000f18
 800d998:	200013f0 	.word	0x200013f0

0800d99c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b086      	sub	sp, #24
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d058      	beq.n	800da64 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d9b2:	4b2f      	ldr	r3, [pc, #188]	@ (800da70 <xTaskPriorityDisinherit+0xd4>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	693a      	ldr	r2, [r7, #16]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d00b      	beq.n	800d9d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c0:	f383 8811 	msr	BASEPRI, r3
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	f3bf 8f4f 	dsb	sy
 800d9cc:	60fb      	str	r3, [r7, #12]
}
 800d9ce:	bf00      	nop
 800d9d0:	bf00      	nop
 800d9d2:	e7fd      	b.n	800d9d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d10b      	bne.n	800d9f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e0:	f383 8811 	msr	BASEPRI, r3
 800d9e4:	f3bf 8f6f 	isb	sy
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	60bb      	str	r3, [r7, #8]
}
 800d9ee:	bf00      	nop
 800d9f0:	bf00      	nop
 800d9f2:	e7fd      	b.n	800d9f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9f8:	1e5a      	subs	r2, r3, #1
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da06:	429a      	cmp	r2, r3
 800da08:	d02c      	beq.n	800da64 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d128      	bne.n	800da64 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	3304      	adds	r3, #4
 800da16:	4618      	mov	r0, r3
 800da18:	f7fe f87a 	bl	800bb10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da34:	4b0f      	ldr	r3, [pc, #60]	@ (800da74 <xTaskPriorityDisinherit+0xd8>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d903      	bls.n	800da44 <xTaskPriorityDisinherit+0xa8>
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da40:	4a0c      	ldr	r2, [pc, #48]	@ (800da74 <xTaskPriorityDisinherit+0xd8>)
 800da42:	6013      	str	r3, [r2, #0]
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da48:	4613      	mov	r3, r2
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4413      	add	r3, r2
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	4a09      	ldr	r2, [pc, #36]	@ (800da78 <xTaskPriorityDisinherit+0xdc>)
 800da52:	441a      	add	r2, r3
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	3304      	adds	r3, #4
 800da58:	4619      	mov	r1, r3
 800da5a:	4610      	mov	r0, r2
 800da5c:	f7fd fffb 	bl	800ba56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da60:	2301      	movs	r3, #1
 800da62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da64:	697b      	ldr	r3, [r7, #20]
	}
 800da66:	4618      	mov	r0, r3
 800da68:	3718      	adds	r7, #24
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	20000f14 	.word	0x20000f14
 800da74:	200013f0 	.word	0x200013f0
 800da78:	20000f18 	.word	0x20000f18

0800da7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b088      	sub	sp, #32
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da8a:	2301      	movs	r3, #1
 800da8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d06c      	beq.n	800db6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10b      	bne.n	800dab4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800da9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	60fb      	str	r3, [r7, #12]
}
 800daae:	bf00      	nop
 800dab0:	bf00      	nop
 800dab2:	e7fd      	b.n	800dab0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dab8:	683a      	ldr	r2, [r7, #0]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d902      	bls.n	800dac4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	61fb      	str	r3, [r7, #28]
 800dac2:	e002      	b.n	800daca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dac8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dace:	69fa      	ldr	r2, [r7, #28]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d04c      	beq.n	800db6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dad8:	697a      	ldr	r2, [r7, #20]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d147      	bne.n	800db6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dade:	4b26      	ldr	r3, [pc, #152]	@ (800db78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	69ba      	ldr	r2, [r7, #24]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d10b      	bne.n	800db00 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800dae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daec:	f383 8811 	msr	BASEPRI, r3
 800daf0:	f3bf 8f6f 	isb	sy
 800daf4:	f3bf 8f4f 	dsb	sy
 800daf8:	60bb      	str	r3, [r7, #8]
}
 800dafa:	bf00      	nop
 800dafc:	bf00      	nop
 800dafe:	e7fd      	b.n	800dafc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	69fa      	ldr	r2, [r7, #28]
 800db0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	699b      	ldr	r3, [r3, #24]
 800db10:	2b00      	cmp	r3, #0
 800db12:	db04      	blt.n	800db1e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	6959      	ldr	r1, [r3, #20]
 800db22:	693a      	ldr	r2, [r7, #16]
 800db24:	4613      	mov	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4413      	add	r3, r2
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4a13      	ldr	r2, [pc, #76]	@ (800db7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800db2e:	4413      	add	r3, r2
 800db30:	4299      	cmp	r1, r3
 800db32:	d11c      	bne.n	800db6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	3304      	adds	r3, #4
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fd ffe9 	bl	800bb10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db42:	4b0f      	ldr	r3, [pc, #60]	@ (800db80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	429a      	cmp	r2, r3
 800db48:	d903      	bls.n	800db52 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db4e:	4a0c      	ldr	r2, [pc, #48]	@ (800db80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800db50:	6013      	str	r3, [r2, #0]
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db56:	4613      	mov	r3, r2
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	4413      	add	r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4a07      	ldr	r2, [pc, #28]	@ (800db7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800db60:	441a      	add	r2, r3
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	3304      	adds	r3, #4
 800db66:	4619      	mov	r1, r3
 800db68:	4610      	mov	r0, r2
 800db6a:	f7fd ff74 	bl	800ba56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db6e:	bf00      	nop
 800db70:	3720      	adds	r7, #32
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	20000f14 	.word	0x20000f14
 800db7c:	20000f18 	.word	0x20000f18
 800db80:	200013f0 	.word	0x200013f0

0800db84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db84:	b480      	push	{r7}
 800db86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db88:	4b07      	ldr	r3, [pc, #28]	@ (800dba8 <pvTaskIncrementMutexHeldCount+0x24>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d004      	beq.n	800db9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db90:	4b05      	ldr	r3, [pc, #20]	@ (800dba8 <pvTaskIncrementMutexHeldCount+0x24>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800db96:	3201      	adds	r2, #1
 800db98:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800db9a:	4b03      	ldr	r3, [pc, #12]	@ (800dba8 <pvTaskIncrementMutexHeldCount+0x24>)
 800db9c:	681b      	ldr	r3, [r3, #0]
	}
 800db9e:	4618      	mov	r0, r3
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr
 800dba8:	20000f14 	.word	0x20000f14

0800dbac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dbb6:	4b21      	ldr	r3, [pc, #132]	@ (800dc3c <prvAddCurrentTaskToDelayedList+0x90>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbbc:	4b20      	ldr	r3, [pc, #128]	@ (800dc40 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fd ffa4 	bl	800bb10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dbce:	d10a      	bne.n	800dbe6 <prvAddCurrentTaskToDelayedList+0x3a>
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d007      	beq.n	800dbe6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbd6:	4b1a      	ldr	r3, [pc, #104]	@ (800dc40 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	3304      	adds	r3, #4
 800dbdc:	4619      	mov	r1, r3
 800dbde:	4819      	ldr	r0, [pc, #100]	@ (800dc44 <prvAddCurrentTaskToDelayedList+0x98>)
 800dbe0:	f7fd ff39 	bl	800ba56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dbe4:	e026      	b.n	800dc34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4413      	add	r3, r2
 800dbec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbee:	4b14      	ldr	r3, [pc, #80]	@ (800dc40 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbf6:	68ba      	ldr	r2, [r7, #8]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d209      	bcs.n	800dc12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbfe:	4b12      	ldr	r3, [pc, #72]	@ (800dc48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dc00:	681a      	ldr	r2, [r3, #0]
 800dc02:	4b0f      	ldr	r3, [pc, #60]	@ (800dc40 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	3304      	adds	r3, #4
 800dc08:	4619      	mov	r1, r3
 800dc0a:	4610      	mov	r0, r2
 800dc0c:	f7fd ff47 	bl	800ba9e <vListInsert>
}
 800dc10:	e010      	b.n	800dc34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc12:	4b0e      	ldr	r3, [pc, #56]	@ (800dc4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	4b0a      	ldr	r3, [pc, #40]	@ (800dc40 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	3304      	adds	r3, #4
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	4610      	mov	r0, r2
 800dc20:	f7fd ff3d 	bl	800ba9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc24:	4b0a      	ldr	r3, [pc, #40]	@ (800dc50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d202      	bcs.n	800dc34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dc2e:	4a08      	ldr	r2, [pc, #32]	@ (800dc50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	6013      	str	r3, [r2, #0]
}
 800dc34:	bf00      	nop
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	200013ec 	.word	0x200013ec
 800dc40:	20000f14 	.word	0x20000f14
 800dc44:	200013d4 	.word	0x200013d4
 800dc48:	200013a4 	.word	0x200013a4
 800dc4c:	200013a0 	.word	0x200013a0
 800dc50:	20001408 	.word	0x20001408

0800dc54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b08a      	sub	sp, #40	@ 0x28
 800dc58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dc5e:	f000 fb13 	bl	800e288 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dc62:	4b1d      	ldr	r3, [pc, #116]	@ (800dcd8 <xTimerCreateTimerTask+0x84>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d021      	beq.n	800dcae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc72:	1d3a      	adds	r2, r7, #4
 800dc74:	f107 0108 	add.w	r1, r7, #8
 800dc78:	f107 030c 	add.w	r3, r7, #12
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7fd fea3 	bl	800b9c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc82:	6879      	ldr	r1, [r7, #4]
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	9202      	str	r2, [sp, #8]
 800dc8a:	9301      	str	r3, [sp, #4]
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	9300      	str	r3, [sp, #0]
 800dc90:	2300      	movs	r3, #0
 800dc92:	460a      	mov	r2, r1
 800dc94:	4911      	ldr	r1, [pc, #68]	@ (800dcdc <xTimerCreateTimerTask+0x88>)
 800dc96:	4812      	ldr	r0, [pc, #72]	@ (800dce0 <xTimerCreateTimerTask+0x8c>)
 800dc98:	f7fe ff90 	bl	800cbbc <xTaskCreateStatic>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	4a11      	ldr	r2, [pc, #68]	@ (800dce4 <xTimerCreateTimerTask+0x90>)
 800dca0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dca2:	4b10      	ldr	r3, [pc, #64]	@ (800dce4 <xTimerCreateTimerTask+0x90>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d001      	beq.n	800dcae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d10b      	bne.n	800dccc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dcb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb8:	f383 8811 	msr	BASEPRI, r3
 800dcbc:	f3bf 8f6f 	isb	sy
 800dcc0:	f3bf 8f4f 	dsb	sy
 800dcc4:	613b      	str	r3, [r7, #16]
}
 800dcc6:	bf00      	nop
 800dcc8:	bf00      	nop
 800dcca:	e7fd      	b.n	800dcc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dccc:	697b      	ldr	r3, [r7, #20]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3718      	adds	r7, #24
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	20001444 	.word	0x20001444
 800dcdc:	0800f948 	.word	0x0800f948
 800dce0:	0800de21 	.word	0x0800de21
 800dce4:	20001448 	.word	0x20001448

0800dce8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b08a      	sub	sp, #40	@ 0x28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
 800dcf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10b      	bne.n	800dd18 <xTimerGenericCommand+0x30>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	623b      	str	r3, [r7, #32]
}
 800dd12:	bf00      	nop
 800dd14:	bf00      	nop
 800dd16:	e7fd      	b.n	800dd14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd18:	4b19      	ldr	r3, [pc, #100]	@ (800dd80 <xTimerGenericCommand+0x98>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d02a      	beq.n	800dd76 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	2b05      	cmp	r3, #5
 800dd30:	dc18      	bgt.n	800dd64 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dd32:	f7ff fdad 	bl	800d890 <xTaskGetSchedulerState>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b02      	cmp	r3, #2
 800dd3a:	d109      	bne.n	800dd50 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dd3c:	4b10      	ldr	r3, [pc, #64]	@ (800dd80 <xTimerGenericCommand+0x98>)
 800dd3e:	6818      	ldr	r0, [r3, #0]
 800dd40:	f107 0110 	add.w	r1, r7, #16
 800dd44:	2300      	movs	r3, #0
 800dd46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd48:	f7fe f8c0 	bl	800becc <xQueueGenericSend>
 800dd4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800dd4e:	e012      	b.n	800dd76 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dd50:	4b0b      	ldr	r3, [pc, #44]	@ (800dd80 <xTimerGenericCommand+0x98>)
 800dd52:	6818      	ldr	r0, [r3, #0]
 800dd54:	f107 0110 	add.w	r1, r7, #16
 800dd58:	2300      	movs	r3, #0
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f7fe f8b6 	bl	800becc <xQueueGenericSend>
 800dd60:	6278      	str	r0, [r7, #36]	@ 0x24
 800dd62:	e008      	b.n	800dd76 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dd64:	4b06      	ldr	r3, [pc, #24]	@ (800dd80 <xTimerGenericCommand+0x98>)
 800dd66:	6818      	ldr	r0, [r3, #0]
 800dd68:	f107 0110 	add.w	r1, r7, #16
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	683a      	ldr	r2, [r7, #0]
 800dd70:	f7fe f9ae 	bl	800c0d0 <xQueueGenericSendFromISR>
 800dd74:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3728      	adds	r7, #40	@ 0x28
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	20001444 	.word	0x20001444

0800dd84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b088      	sub	sp, #32
 800dd88:	af02      	add	r7, sp, #8
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd8e:	4b23      	ldr	r3, [pc, #140]	@ (800de1c <prvProcessExpiredTimer+0x98>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	3304      	adds	r3, #4
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7fd feb7 	bl	800bb10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dda8:	f003 0304 	and.w	r3, r3, #4
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d023      	beq.n	800ddf8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	699a      	ldr	r2, [r3, #24]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	18d1      	adds	r1, r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	683a      	ldr	r2, [r7, #0]
 800ddbc:	6978      	ldr	r0, [r7, #20]
 800ddbe:	f000 f8d5 	bl	800df6c <prvInsertTimerInActiveList>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d020      	beq.n	800de0a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ddc8:	2300      	movs	r3, #0
 800ddca:	9300      	str	r3, [sp, #0]
 800ddcc:	2300      	movs	r3, #0
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	6978      	ldr	r0, [r7, #20]
 800ddd4:	f7ff ff88 	bl	800dce8 <xTimerGenericCommand>
 800ddd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d114      	bne.n	800de0a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	60fb      	str	r3, [r7, #12]
}
 800ddf2:	bf00      	nop
 800ddf4:	bf00      	nop
 800ddf6:	e7fd      	b.n	800ddf4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddfe:	f023 0301 	bic.w	r3, r3, #1
 800de02:	b2da      	uxtb	r2, r3
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	6a1b      	ldr	r3, [r3, #32]
 800de0e:	6978      	ldr	r0, [r7, #20]
 800de10:	4798      	blx	r3
}
 800de12:	bf00      	nop
 800de14:	3718      	adds	r7, #24
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	2000143c 	.word	0x2000143c

0800de20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de28:	f107 0308 	add.w	r3, r7, #8
 800de2c:	4618      	mov	r0, r3
 800de2e:	f000 f859 	bl	800dee4 <prvGetNextExpireTime>
 800de32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	4619      	mov	r1, r3
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f000 f805 	bl	800de48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800de3e:	f000 f8d7 	bl	800dff0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de42:	bf00      	nop
 800de44:	e7f0      	b.n	800de28 <prvTimerTask+0x8>
	...

0800de48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800de52:	f7ff f917 	bl	800d084 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de56:	f107 0308 	add.w	r3, r7, #8
 800de5a:	4618      	mov	r0, r3
 800de5c:	f000 f866 	bl	800df2c <prvSampleTimeNow>
 800de60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d130      	bne.n	800deca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d10a      	bne.n	800de84 <prvProcessTimerOrBlockTask+0x3c>
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	429a      	cmp	r2, r3
 800de74:	d806      	bhi.n	800de84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800de76:	f7ff f913 	bl	800d0a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800de7a:	68f9      	ldr	r1, [r7, #12]
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f7ff ff81 	bl	800dd84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800de82:	e024      	b.n	800dece <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d008      	beq.n	800de9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800de8a:	4b13      	ldr	r3, [pc, #76]	@ (800ded8 <prvProcessTimerOrBlockTask+0x90>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d101      	bne.n	800de98 <prvProcessTimerOrBlockTask+0x50>
 800de94:	2301      	movs	r3, #1
 800de96:	e000      	b.n	800de9a <prvProcessTimerOrBlockTask+0x52>
 800de98:	2300      	movs	r3, #0
 800de9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800de9c:	4b0f      	ldr	r3, [pc, #60]	@ (800dedc <prvProcessTimerOrBlockTask+0x94>)
 800de9e:	6818      	ldr	r0, [r3, #0]
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	683a      	ldr	r2, [r7, #0]
 800dea8:	4619      	mov	r1, r3
 800deaa:	f7fe fe53 	bl	800cb54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800deae:	f7ff f8f7 	bl	800d0a0 <xTaskResumeAll>
 800deb2:	4603      	mov	r3, r0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10a      	bne.n	800dece <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800deb8:	4b09      	ldr	r3, [pc, #36]	@ (800dee0 <prvProcessTimerOrBlockTask+0x98>)
 800deba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800debe:	601a      	str	r2, [r3, #0]
 800dec0:	f3bf 8f4f 	dsb	sy
 800dec4:	f3bf 8f6f 	isb	sy
}
 800dec8:	e001      	b.n	800dece <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800deca:	f7ff f8e9 	bl	800d0a0 <xTaskResumeAll>
}
 800dece:	bf00      	nop
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	20001440 	.word	0x20001440
 800dedc:	20001444 	.word	0x20001444
 800dee0:	e000ed04 	.word	0xe000ed04

0800dee4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dee4:	b480      	push	{r7}
 800dee6:	b085      	sub	sp, #20
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800deec:	4b0e      	ldr	r3, [pc, #56]	@ (800df28 <prvGetNextExpireTime+0x44>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d101      	bne.n	800defa <prvGetNextExpireTime+0x16>
 800def6:	2201      	movs	r2, #1
 800def8:	e000      	b.n	800defc <prvGetNextExpireTime+0x18>
 800defa:	2200      	movs	r2, #0
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d105      	bne.n	800df14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df08:	4b07      	ldr	r3, [pc, #28]	@ (800df28 <prvGetNextExpireTime+0x44>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	68db      	ldr	r3, [r3, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	60fb      	str	r3, [r7, #12]
 800df12:	e001      	b.n	800df18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800df14:	2300      	movs	r3, #0
 800df16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800df18:	68fb      	ldr	r3, [r7, #12]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3714      	adds	r7, #20
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop
 800df28:	2000143c 	.word	0x2000143c

0800df2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800df34:	f7ff f952 	bl	800d1dc <xTaskGetTickCount>
 800df38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800df3a:	4b0b      	ldr	r3, [pc, #44]	@ (800df68 <prvSampleTimeNow+0x3c>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	429a      	cmp	r2, r3
 800df42:	d205      	bcs.n	800df50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800df44:	f000 f93a 	bl	800e1bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2201      	movs	r2, #1
 800df4c:	601a      	str	r2, [r3, #0]
 800df4e:	e002      	b.n	800df56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800df56:	4a04      	ldr	r2, [pc, #16]	@ (800df68 <prvSampleTimeNow+0x3c>)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800df5c:	68fb      	ldr	r3, [r7, #12]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	2000144c 	.word	0x2000144c

0800df6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b086      	sub	sp, #24
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
 800df78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800df7a:	2300      	movs	r3, #0
 800df7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	68ba      	ldr	r2, [r7, #8]
 800df82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800df8a:	68ba      	ldr	r2, [r7, #8]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d812      	bhi.n	800dfb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	1ad2      	subs	r2, r2, r3
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	699b      	ldr	r3, [r3, #24]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d302      	bcc.n	800dfa6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	617b      	str	r3, [r7, #20]
 800dfa4:	e01b      	b.n	800dfde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dfa6:	4b10      	ldr	r3, [pc, #64]	@ (800dfe8 <prvInsertTimerInActiveList+0x7c>)
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	3304      	adds	r3, #4
 800dfae:	4619      	mov	r1, r3
 800dfb0:	4610      	mov	r0, r2
 800dfb2:	f7fd fd74 	bl	800ba9e <vListInsert>
 800dfb6:	e012      	b.n	800dfde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d206      	bcs.n	800dfce <prvInsertTimerInActiveList+0x62>
 800dfc0:	68ba      	ldr	r2, [r7, #8]
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d302      	bcc.n	800dfce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	617b      	str	r3, [r7, #20]
 800dfcc:	e007      	b.n	800dfde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dfce:	4b07      	ldr	r3, [pc, #28]	@ (800dfec <prvInsertTimerInActiveList+0x80>)
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	3304      	adds	r3, #4
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	4610      	mov	r0, r2
 800dfda:	f7fd fd60 	bl	800ba9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dfde:	697b      	ldr	r3, [r7, #20]
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3718      	adds	r7, #24
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	20001440 	.word	0x20001440
 800dfec:	2000143c 	.word	0x2000143c

0800dff0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b08e      	sub	sp, #56	@ 0x38
 800dff4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dff6:	e0ce      	b.n	800e196 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	da19      	bge.n	800e032 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dffe:	1d3b      	adds	r3, r7, #4
 800e000:	3304      	adds	r3, #4
 800e002:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e006:	2b00      	cmp	r3, #0
 800e008:	d10b      	bne.n	800e022 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e00e:	f383 8811 	msr	BASEPRI, r3
 800e012:	f3bf 8f6f 	isb	sy
 800e016:	f3bf 8f4f 	dsb	sy
 800e01a:	61fb      	str	r3, [r7, #28]
}
 800e01c:	bf00      	nop
 800e01e:	bf00      	nop
 800e020:	e7fd      	b.n	800e01e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e028:	6850      	ldr	r0, [r2, #4]
 800e02a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e02c:	6892      	ldr	r2, [r2, #8]
 800e02e:	4611      	mov	r1, r2
 800e030:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2b00      	cmp	r3, #0
 800e036:	f2c0 80ae 	blt.w	800e196 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e040:	695b      	ldr	r3, [r3, #20]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d004      	beq.n	800e050 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e048:	3304      	adds	r3, #4
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7fd fd60 	bl	800bb10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e050:	463b      	mov	r3, r7
 800e052:	4618      	mov	r0, r3
 800e054:	f7ff ff6a 	bl	800df2c <prvSampleTimeNow>
 800e058:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2b09      	cmp	r3, #9
 800e05e:	f200 8097 	bhi.w	800e190 <prvProcessReceivedCommands+0x1a0>
 800e062:	a201      	add	r2, pc, #4	@ (adr r2, 800e068 <prvProcessReceivedCommands+0x78>)
 800e064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e068:	0800e091 	.word	0x0800e091
 800e06c:	0800e091 	.word	0x0800e091
 800e070:	0800e091 	.word	0x0800e091
 800e074:	0800e107 	.word	0x0800e107
 800e078:	0800e11b 	.word	0x0800e11b
 800e07c:	0800e167 	.word	0x0800e167
 800e080:	0800e091 	.word	0x0800e091
 800e084:	0800e091 	.word	0x0800e091
 800e088:	0800e107 	.word	0x0800e107
 800e08c:	0800e11b 	.word	0x0800e11b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e096:	f043 0301 	orr.w	r3, r3, #1
 800e09a:	b2da      	uxtb	r2, r3
 800e09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e09e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e0a2:	68ba      	ldr	r2, [r7, #8]
 800e0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a6:	699b      	ldr	r3, [r3, #24]
 800e0a8:	18d1      	adds	r1, r2, r3
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e0b0:	f7ff ff5c 	bl	800df6c <prvInsertTimerInActiveList>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d06c      	beq.n	800e194 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0bc:	6a1b      	ldr	r3, [r3, #32]
 800e0be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e0c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0c8:	f003 0304 	and.w	r3, r3, #4
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d061      	beq.n	800e194 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e0d0:	68ba      	ldr	r2, [r7, #8]
 800e0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0d4:	699b      	ldr	r3, [r3, #24]
 800e0d6:	441a      	add	r2, r3
 800e0d8:	2300      	movs	r3, #0
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	2300      	movs	r3, #0
 800e0de:	2100      	movs	r1, #0
 800e0e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e0e2:	f7ff fe01 	bl	800dce8 <xTimerGenericCommand>
 800e0e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e0e8:	6a3b      	ldr	r3, [r7, #32]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d152      	bne.n	800e194 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f2:	f383 8811 	msr	BASEPRI, r3
 800e0f6:	f3bf 8f6f 	isb	sy
 800e0fa:	f3bf 8f4f 	dsb	sy
 800e0fe:	61bb      	str	r3, [r7, #24]
}
 800e100:	bf00      	nop
 800e102:	bf00      	nop
 800e104:	e7fd      	b.n	800e102 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e10c:	f023 0301 	bic.w	r3, r3, #1
 800e110:	b2da      	uxtb	r2, r3
 800e112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e114:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e118:	e03d      	b.n	800e196 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e11c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e120:	f043 0301 	orr.w	r3, r3, #1
 800e124:	b2da      	uxtb	r2, r3
 800e126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e128:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e12c:	68ba      	ldr	r2, [r7, #8]
 800e12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e130:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e134:	699b      	ldr	r3, [r3, #24]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d10b      	bne.n	800e152 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e13e:	f383 8811 	msr	BASEPRI, r3
 800e142:	f3bf 8f6f 	isb	sy
 800e146:	f3bf 8f4f 	dsb	sy
 800e14a:	617b      	str	r3, [r7, #20]
}
 800e14c:	bf00      	nop
 800e14e:	bf00      	nop
 800e150:	e7fd      	b.n	800e14e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e154:	699a      	ldr	r2, [r3, #24]
 800e156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e158:	18d1      	adds	r1, r2, r3
 800e15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e15c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e15e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e160:	f7ff ff04 	bl	800df6c <prvInsertTimerInActiveList>
					break;
 800e164:	e017      	b.n	800e196 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e16c:	f003 0302 	and.w	r3, r3, #2
 800e170:	2b00      	cmp	r3, #0
 800e172:	d103      	bne.n	800e17c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e176:	f000 fbe7 	bl	800e948 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e17a:	e00c      	b.n	800e196 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e17e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e182:	f023 0301 	bic.w	r3, r3, #1
 800e186:	b2da      	uxtb	r2, r3
 800e188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e18a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e18e:	e002      	b.n	800e196 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e190:	bf00      	nop
 800e192:	e000      	b.n	800e196 <prvProcessReceivedCommands+0x1a6>
					break;
 800e194:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e196:	4b08      	ldr	r3, [pc, #32]	@ (800e1b8 <prvProcessReceivedCommands+0x1c8>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	1d39      	adds	r1, r7, #4
 800e19c:	2200      	movs	r2, #0
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fe f8c4 	bl	800c32c <xQueueReceive>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	f47f af26 	bne.w	800dff8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e1ac:	bf00      	nop
 800e1ae:	bf00      	nop
 800e1b0:	3730      	adds	r7, #48	@ 0x30
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	20001444 	.word	0x20001444

0800e1bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b088      	sub	sp, #32
 800e1c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e1c2:	e049      	b.n	800e258 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e1c4:	4b2e      	ldr	r3, [pc, #184]	@ (800e280 <prvSwitchTimerLists+0xc4>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	68db      	ldr	r3, [r3, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ce:	4b2c      	ldr	r3, [pc, #176]	@ (800e280 <prvSwitchTimerLists+0xc4>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	3304      	adds	r3, #4
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7fd fc97 	bl	800bb10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	6a1b      	ldr	r3, [r3, #32]
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1f0:	f003 0304 	and.w	r3, r3, #4
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d02f      	beq.n	800e258 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	693a      	ldr	r2, [r7, #16]
 800e1fe:	4413      	add	r3, r2
 800e200:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	429a      	cmp	r2, r3
 800e208:	d90e      	bls.n	800e228 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	68ba      	ldr	r2, [r7, #8]
 800e20e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e216:	4b1a      	ldr	r3, [pc, #104]	@ (800e280 <prvSwitchTimerLists+0xc4>)
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	3304      	adds	r3, #4
 800e21e:	4619      	mov	r1, r3
 800e220:	4610      	mov	r0, r2
 800e222:	f7fd fc3c 	bl	800ba9e <vListInsert>
 800e226:	e017      	b.n	800e258 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e228:	2300      	movs	r3, #0
 800e22a:	9300      	str	r3, [sp, #0]
 800e22c:	2300      	movs	r3, #0
 800e22e:	693a      	ldr	r2, [r7, #16]
 800e230:	2100      	movs	r1, #0
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	f7ff fd58 	bl	800dce8 <xTimerGenericCommand>
 800e238:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10b      	bne.n	800e258 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e244:	f383 8811 	msr	BASEPRI, r3
 800e248:	f3bf 8f6f 	isb	sy
 800e24c:	f3bf 8f4f 	dsb	sy
 800e250:	603b      	str	r3, [r7, #0]
}
 800e252:	bf00      	nop
 800e254:	bf00      	nop
 800e256:	e7fd      	b.n	800e254 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e258:	4b09      	ldr	r3, [pc, #36]	@ (800e280 <prvSwitchTimerLists+0xc4>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d1b0      	bne.n	800e1c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e262:	4b07      	ldr	r3, [pc, #28]	@ (800e280 <prvSwitchTimerLists+0xc4>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e268:	4b06      	ldr	r3, [pc, #24]	@ (800e284 <prvSwitchTimerLists+0xc8>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a04      	ldr	r2, [pc, #16]	@ (800e280 <prvSwitchTimerLists+0xc4>)
 800e26e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e270:	4a04      	ldr	r2, [pc, #16]	@ (800e284 <prvSwitchTimerLists+0xc8>)
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	6013      	str	r3, [r2, #0]
}
 800e276:	bf00      	nop
 800e278:	3718      	adds	r7, #24
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	2000143c 	.word	0x2000143c
 800e284:	20001440 	.word	0x20001440

0800e288 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e28e:	f000 f96b 	bl	800e568 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e292:	4b15      	ldr	r3, [pc, #84]	@ (800e2e8 <prvCheckForValidListAndQueue+0x60>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d120      	bne.n	800e2dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e29a:	4814      	ldr	r0, [pc, #80]	@ (800e2ec <prvCheckForValidListAndQueue+0x64>)
 800e29c:	f7fd fbae 	bl	800b9fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e2a0:	4813      	ldr	r0, [pc, #76]	@ (800e2f0 <prvCheckForValidListAndQueue+0x68>)
 800e2a2:	f7fd fbab 	bl	800b9fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e2a6:	4b13      	ldr	r3, [pc, #76]	@ (800e2f4 <prvCheckForValidListAndQueue+0x6c>)
 800e2a8:	4a10      	ldr	r2, [pc, #64]	@ (800e2ec <prvCheckForValidListAndQueue+0x64>)
 800e2aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e2ac:	4b12      	ldr	r3, [pc, #72]	@ (800e2f8 <prvCheckForValidListAndQueue+0x70>)
 800e2ae:	4a10      	ldr	r2, [pc, #64]	@ (800e2f0 <prvCheckForValidListAndQueue+0x68>)
 800e2b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	4b11      	ldr	r3, [pc, #68]	@ (800e2fc <prvCheckForValidListAndQueue+0x74>)
 800e2b8:	4a11      	ldr	r2, [pc, #68]	@ (800e300 <prvCheckForValidListAndQueue+0x78>)
 800e2ba:	2110      	movs	r1, #16
 800e2bc:	200a      	movs	r0, #10
 800e2be:	f7fd fcbb 	bl	800bc38 <xQueueGenericCreateStatic>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	4a08      	ldr	r2, [pc, #32]	@ (800e2e8 <prvCheckForValidListAndQueue+0x60>)
 800e2c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e2c8:	4b07      	ldr	r3, [pc, #28]	@ (800e2e8 <prvCheckForValidListAndQueue+0x60>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d005      	beq.n	800e2dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e2d0:	4b05      	ldr	r3, [pc, #20]	@ (800e2e8 <prvCheckForValidListAndQueue+0x60>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	490b      	ldr	r1, [pc, #44]	@ (800e304 <prvCheckForValidListAndQueue+0x7c>)
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fe fbe8 	bl	800caac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e2dc:	f000 f976 	bl	800e5cc <vPortExitCritical>
}
 800e2e0:	bf00      	nop
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	20001444 	.word	0x20001444
 800e2ec:	20001414 	.word	0x20001414
 800e2f0:	20001428 	.word	0x20001428
 800e2f4:	2000143c 	.word	0x2000143c
 800e2f8:	20001440 	.word	0x20001440
 800e2fc:	200014f0 	.word	0x200014f0
 800e300:	20001450 	.word	0x20001450
 800e304:	0800f950 	.word	0x0800f950

0800e308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	3b04      	subs	r3, #4
 800e318:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	3b04      	subs	r3, #4
 800e326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	f023 0201 	bic.w	r2, r3, #1
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	3b04      	subs	r3, #4
 800e336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e338:	4a0c      	ldr	r2, [pc, #48]	@ (800e36c <pxPortInitialiseStack+0x64>)
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	3b14      	subs	r3, #20
 800e342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	3b04      	subs	r3, #4
 800e34e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f06f 0202 	mvn.w	r2, #2
 800e356:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	3b20      	subs	r3, #32
 800e35c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e35e:	68fb      	ldr	r3, [r7, #12]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3714      	adds	r7, #20
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr
 800e36c:	0800e371 	.word	0x0800e371

0800e370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e376:	2300      	movs	r3, #0
 800e378:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e37a:	4b13      	ldr	r3, [pc, #76]	@ (800e3c8 <prvTaskExitError+0x58>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e382:	d00b      	beq.n	800e39c <prvTaskExitError+0x2c>
	__asm volatile
 800e384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e388:	f383 8811 	msr	BASEPRI, r3
 800e38c:	f3bf 8f6f 	isb	sy
 800e390:	f3bf 8f4f 	dsb	sy
 800e394:	60fb      	str	r3, [r7, #12]
}
 800e396:	bf00      	nop
 800e398:	bf00      	nop
 800e39a:	e7fd      	b.n	800e398 <prvTaskExitError+0x28>
	__asm volatile
 800e39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a0:	f383 8811 	msr	BASEPRI, r3
 800e3a4:	f3bf 8f6f 	isb	sy
 800e3a8:	f3bf 8f4f 	dsb	sy
 800e3ac:	60bb      	str	r3, [r7, #8]
}
 800e3ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e3b0:	bf00      	nop
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d0fc      	beq.n	800e3b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e3b8:	bf00      	nop
 800e3ba:	bf00      	nop
 800e3bc:	3714      	adds	r7, #20
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop
 800e3c8:	2000000c 	.word	0x2000000c
 800e3cc:	00000000 	.word	0x00000000

0800e3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e3d0:	4b07      	ldr	r3, [pc, #28]	@ (800e3f0 <pxCurrentTCBConst2>)
 800e3d2:	6819      	ldr	r1, [r3, #0]
 800e3d4:	6808      	ldr	r0, [r1, #0]
 800e3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3da:	f380 8809 	msr	PSP, r0
 800e3de:	f3bf 8f6f 	isb	sy
 800e3e2:	f04f 0000 	mov.w	r0, #0
 800e3e6:	f380 8811 	msr	BASEPRI, r0
 800e3ea:	4770      	bx	lr
 800e3ec:	f3af 8000 	nop.w

0800e3f0 <pxCurrentTCBConst2>:
 800e3f0:	20000f14 	.word	0x20000f14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e3f4:	bf00      	nop
 800e3f6:	bf00      	nop

0800e3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e3f8:	4808      	ldr	r0, [pc, #32]	@ (800e41c <prvPortStartFirstTask+0x24>)
 800e3fa:	6800      	ldr	r0, [r0, #0]
 800e3fc:	6800      	ldr	r0, [r0, #0]
 800e3fe:	f380 8808 	msr	MSP, r0
 800e402:	f04f 0000 	mov.w	r0, #0
 800e406:	f380 8814 	msr	CONTROL, r0
 800e40a:	b662      	cpsie	i
 800e40c:	b661      	cpsie	f
 800e40e:	f3bf 8f4f 	dsb	sy
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	df00      	svc	0
 800e418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e41a:	bf00      	nop
 800e41c:	e000ed08 	.word	0xe000ed08

0800e420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b086      	sub	sp, #24
 800e424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e426:	4b47      	ldr	r3, [pc, #284]	@ (800e544 <xPortStartScheduler+0x124>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4a47      	ldr	r2, [pc, #284]	@ (800e548 <xPortStartScheduler+0x128>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d10b      	bne.n	800e448 <xPortStartScheduler+0x28>
	__asm volatile
 800e430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e434:	f383 8811 	msr	BASEPRI, r3
 800e438:	f3bf 8f6f 	isb	sy
 800e43c:	f3bf 8f4f 	dsb	sy
 800e440:	613b      	str	r3, [r7, #16]
}
 800e442:	bf00      	nop
 800e444:	bf00      	nop
 800e446:	e7fd      	b.n	800e444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e448:	4b3e      	ldr	r3, [pc, #248]	@ (800e544 <xPortStartScheduler+0x124>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a3f      	ldr	r2, [pc, #252]	@ (800e54c <xPortStartScheduler+0x12c>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d10b      	bne.n	800e46a <xPortStartScheduler+0x4a>
	__asm volatile
 800e452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	60fb      	str	r3, [r7, #12]
}
 800e464:	bf00      	nop
 800e466:	bf00      	nop
 800e468:	e7fd      	b.n	800e466 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e46a:	4b39      	ldr	r3, [pc, #228]	@ (800e550 <xPortStartScheduler+0x130>)
 800e46c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	b2db      	uxtb	r3, r3
 800e474:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	22ff      	movs	r2, #255	@ 0xff
 800e47a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	b2db      	uxtb	r3, r3
 800e482:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e484:	78fb      	ldrb	r3, [r7, #3]
 800e486:	b2db      	uxtb	r3, r3
 800e488:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e48c:	b2da      	uxtb	r2, r3
 800e48e:	4b31      	ldr	r3, [pc, #196]	@ (800e554 <xPortStartScheduler+0x134>)
 800e490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e492:	4b31      	ldr	r3, [pc, #196]	@ (800e558 <xPortStartScheduler+0x138>)
 800e494:	2207      	movs	r2, #7
 800e496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e498:	e009      	b.n	800e4ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e49a:	4b2f      	ldr	r3, [pc, #188]	@ (800e558 <xPortStartScheduler+0x138>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	4a2d      	ldr	r2, [pc, #180]	@ (800e558 <xPortStartScheduler+0x138>)
 800e4a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e4a4:	78fb      	ldrb	r3, [r7, #3]
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	005b      	lsls	r3, r3, #1
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4ae:	78fb      	ldrb	r3, [r7, #3]
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4b6:	2b80      	cmp	r3, #128	@ 0x80
 800e4b8:	d0ef      	beq.n	800e49a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e4ba:	4b27      	ldr	r3, [pc, #156]	@ (800e558 <xPortStartScheduler+0x138>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f1c3 0307 	rsb	r3, r3, #7
 800e4c2:	2b04      	cmp	r3, #4
 800e4c4:	d00b      	beq.n	800e4de <xPortStartScheduler+0xbe>
	__asm volatile
 800e4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ca:	f383 8811 	msr	BASEPRI, r3
 800e4ce:	f3bf 8f6f 	isb	sy
 800e4d2:	f3bf 8f4f 	dsb	sy
 800e4d6:	60bb      	str	r3, [r7, #8]
}
 800e4d8:	bf00      	nop
 800e4da:	bf00      	nop
 800e4dc:	e7fd      	b.n	800e4da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e4de:	4b1e      	ldr	r3, [pc, #120]	@ (800e558 <xPortStartScheduler+0x138>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	021b      	lsls	r3, r3, #8
 800e4e4:	4a1c      	ldr	r2, [pc, #112]	@ (800e558 <xPortStartScheduler+0x138>)
 800e4e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e4e8:	4b1b      	ldr	r3, [pc, #108]	@ (800e558 <xPortStartScheduler+0x138>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e4f0:	4a19      	ldr	r2, [pc, #100]	@ (800e558 <xPortStartScheduler+0x138>)
 800e4f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	b2da      	uxtb	r2, r3
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e4fc:	4b17      	ldr	r3, [pc, #92]	@ (800e55c <xPortStartScheduler+0x13c>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a16      	ldr	r2, [pc, #88]	@ (800e55c <xPortStartScheduler+0x13c>)
 800e502:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e508:	4b14      	ldr	r3, [pc, #80]	@ (800e55c <xPortStartScheduler+0x13c>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a13      	ldr	r2, [pc, #76]	@ (800e55c <xPortStartScheduler+0x13c>)
 800e50e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e514:	f000 f8da 	bl	800e6cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e518:	4b11      	ldr	r3, [pc, #68]	@ (800e560 <xPortStartScheduler+0x140>)
 800e51a:	2200      	movs	r2, #0
 800e51c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e51e:	f000 f8f9 	bl	800e714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e522:	4b10      	ldr	r3, [pc, #64]	@ (800e564 <xPortStartScheduler+0x144>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4a0f      	ldr	r2, [pc, #60]	@ (800e564 <xPortStartScheduler+0x144>)
 800e528:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e52c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e52e:	f7ff ff63 	bl	800e3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e532:	f7fe ff2f 	bl	800d394 <vTaskSwitchContext>
	prvTaskExitError();
 800e536:	f7ff ff1b 	bl	800e370 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e53a:	2300      	movs	r3, #0
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3718      	adds	r7, #24
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	e000ed00 	.word	0xe000ed00
 800e548:	410fc271 	.word	0x410fc271
 800e54c:	410fc270 	.word	0x410fc270
 800e550:	e000e400 	.word	0xe000e400
 800e554:	20001540 	.word	0x20001540
 800e558:	20001544 	.word	0x20001544
 800e55c:	e000ed20 	.word	0xe000ed20
 800e560:	2000000c 	.word	0x2000000c
 800e564:	e000ef34 	.word	0xe000ef34

0800e568 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
	__asm volatile
 800e56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e572:	f383 8811 	msr	BASEPRI, r3
 800e576:	f3bf 8f6f 	isb	sy
 800e57a:	f3bf 8f4f 	dsb	sy
 800e57e:	607b      	str	r3, [r7, #4]
}
 800e580:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e582:	4b10      	ldr	r3, [pc, #64]	@ (800e5c4 <vPortEnterCritical+0x5c>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	3301      	adds	r3, #1
 800e588:	4a0e      	ldr	r2, [pc, #56]	@ (800e5c4 <vPortEnterCritical+0x5c>)
 800e58a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e58c:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c4 <vPortEnterCritical+0x5c>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2b01      	cmp	r3, #1
 800e592:	d110      	bne.n	800e5b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e594:	4b0c      	ldr	r3, [pc, #48]	@ (800e5c8 <vPortEnterCritical+0x60>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00b      	beq.n	800e5b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	603b      	str	r3, [r7, #0]
}
 800e5b0:	bf00      	nop
 800e5b2:	bf00      	nop
 800e5b4:	e7fd      	b.n	800e5b2 <vPortEnterCritical+0x4a>
	}
}
 800e5b6:	bf00      	nop
 800e5b8:	370c      	adds	r7, #12
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr
 800e5c2:	bf00      	nop
 800e5c4:	2000000c 	.word	0x2000000c
 800e5c8:	e000ed04 	.word	0xe000ed04

0800e5cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e5d2:	4b12      	ldr	r3, [pc, #72]	@ (800e61c <vPortExitCritical+0x50>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d10b      	bne.n	800e5f2 <vPortExitCritical+0x26>
	__asm volatile
 800e5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5de:	f383 8811 	msr	BASEPRI, r3
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	f3bf 8f4f 	dsb	sy
 800e5ea:	607b      	str	r3, [r7, #4]
}
 800e5ec:	bf00      	nop
 800e5ee:	bf00      	nop
 800e5f0:	e7fd      	b.n	800e5ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e61c <vPortExitCritical+0x50>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	4a08      	ldr	r2, [pc, #32]	@ (800e61c <vPortExitCritical+0x50>)
 800e5fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e5fc:	4b07      	ldr	r3, [pc, #28]	@ (800e61c <vPortExitCritical+0x50>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d105      	bne.n	800e610 <vPortExitCritical+0x44>
 800e604:	2300      	movs	r3, #0
 800e606:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	f383 8811 	msr	BASEPRI, r3
}
 800e60e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e610:	bf00      	nop
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr
 800e61c:	2000000c 	.word	0x2000000c

0800e620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e620:	f3ef 8009 	mrs	r0, PSP
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	4b15      	ldr	r3, [pc, #84]	@ (800e680 <pxCurrentTCBConst>)
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	f01e 0f10 	tst.w	lr, #16
 800e630:	bf08      	it	eq
 800e632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63a:	6010      	str	r0, [r2, #0]
 800e63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e640:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e644:	f380 8811 	msr	BASEPRI, r0
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	f3bf 8f6f 	isb	sy
 800e650:	f7fe fea0 	bl	800d394 <vTaskSwitchContext>
 800e654:	f04f 0000 	mov.w	r0, #0
 800e658:	f380 8811 	msr	BASEPRI, r0
 800e65c:	bc09      	pop	{r0, r3}
 800e65e:	6819      	ldr	r1, [r3, #0]
 800e660:	6808      	ldr	r0, [r1, #0]
 800e662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e666:	f01e 0f10 	tst.w	lr, #16
 800e66a:	bf08      	it	eq
 800e66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e670:	f380 8809 	msr	PSP, r0
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop
 800e67c:	f3af 8000 	nop.w

0800e680 <pxCurrentTCBConst>:
 800e680:	20000f14 	.word	0x20000f14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e684:	bf00      	nop
 800e686:	bf00      	nop

0800e688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
	__asm volatile
 800e68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	607b      	str	r3, [r7, #4]
}
 800e6a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e6a2:	f7fe fdbd 	bl	800d220 <xTaskIncrementTick>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d003      	beq.n	800e6b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e6ac:	4b06      	ldr	r3, [pc, #24]	@ (800e6c8 <xPortSysTickHandler+0x40>)
 800e6ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6b2:	601a      	str	r2, [r3, #0]
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	f383 8811 	msr	BASEPRI, r3
}
 800e6be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e6c0:	bf00      	nop
 800e6c2:	3708      	adds	r7, #8
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	e000ed04 	.word	0xe000ed04

0800e6cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e6d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e700 <vPortSetupTimerInterrupt+0x34>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e6d6:	4b0b      	ldr	r3, [pc, #44]	@ (800e704 <vPortSetupTimerInterrupt+0x38>)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e6dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e708 <vPortSetupTimerInterrupt+0x3c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a0a      	ldr	r2, [pc, #40]	@ (800e70c <vPortSetupTimerInterrupt+0x40>)
 800e6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6e6:	099b      	lsrs	r3, r3, #6
 800e6e8:	4a09      	ldr	r2, [pc, #36]	@ (800e710 <vPortSetupTimerInterrupt+0x44>)
 800e6ea:	3b01      	subs	r3, #1
 800e6ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e6ee:	4b04      	ldr	r3, [pc, #16]	@ (800e700 <vPortSetupTimerInterrupt+0x34>)
 800e6f0:	2207      	movs	r2, #7
 800e6f2:	601a      	str	r2, [r3, #0]
}
 800e6f4:	bf00      	nop
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
 800e6fe:	bf00      	nop
 800e700:	e000e010 	.word	0xe000e010
 800e704:	e000e018 	.word	0xe000e018
 800e708:	20000000 	.word	0x20000000
 800e70c:	10624dd3 	.word	0x10624dd3
 800e710:	e000e014 	.word	0xe000e014

0800e714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e714:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e724 <vPortEnableVFP+0x10>
 800e718:	6801      	ldr	r1, [r0, #0]
 800e71a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e71e:	6001      	str	r1, [r0, #0]
 800e720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e722:	bf00      	nop
 800e724:	e000ed88 	.word	0xe000ed88

0800e728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e72e:	f3ef 8305 	mrs	r3, IPSR
 800e732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2b0f      	cmp	r3, #15
 800e738:	d915      	bls.n	800e766 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e73a:	4a18      	ldr	r2, [pc, #96]	@ (800e79c <vPortValidateInterruptPriority+0x74>)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	4413      	add	r3, r2
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e744:	4b16      	ldr	r3, [pc, #88]	@ (800e7a0 <vPortValidateInterruptPriority+0x78>)
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	7afa      	ldrb	r2, [r7, #11]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d20b      	bcs.n	800e766 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	607b      	str	r3, [r7, #4]
}
 800e760:	bf00      	nop
 800e762:	bf00      	nop
 800e764:	e7fd      	b.n	800e762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e766:	4b0f      	ldr	r3, [pc, #60]	@ (800e7a4 <vPortValidateInterruptPriority+0x7c>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e76e:	4b0e      	ldr	r3, [pc, #56]	@ (800e7a8 <vPortValidateInterruptPriority+0x80>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	429a      	cmp	r2, r3
 800e774:	d90b      	bls.n	800e78e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e77a:	f383 8811 	msr	BASEPRI, r3
 800e77e:	f3bf 8f6f 	isb	sy
 800e782:	f3bf 8f4f 	dsb	sy
 800e786:	603b      	str	r3, [r7, #0]
}
 800e788:	bf00      	nop
 800e78a:	bf00      	nop
 800e78c:	e7fd      	b.n	800e78a <vPortValidateInterruptPriority+0x62>
	}
 800e78e:	bf00      	nop
 800e790:	3714      	adds	r7, #20
 800e792:	46bd      	mov	sp, r7
 800e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e798:	4770      	bx	lr
 800e79a:	bf00      	nop
 800e79c:	e000e3f0 	.word	0xe000e3f0
 800e7a0:	20001540 	.word	0x20001540
 800e7a4:	e000ed0c 	.word	0xe000ed0c
 800e7a8:	20001544 	.word	0x20001544

0800e7ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b08a      	sub	sp, #40	@ 0x28
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e7b8:	f7fe fc64 	bl	800d084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e7bc:	4b5c      	ldr	r3, [pc, #368]	@ (800e930 <pvPortMalloc+0x184>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d101      	bne.n	800e7c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e7c4:	f000 f924 	bl	800ea10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e7c8:	4b5a      	ldr	r3, [pc, #360]	@ (800e934 <pvPortMalloc+0x188>)
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	4013      	ands	r3, r2
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	f040 8095 	bne.w	800e900 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d01e      	beq.n	800e81a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e7dc:	2208      	movs	r2, #8
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f003 0307 	and.w	r3, r3, #7
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d015      	beq.n	800e81a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f023 0307 	bic.w	r3, r3, #7
 800e7f4:	3308      	adds	r3, #8
 800e7f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f003 0307 	and.w	r3, r3, #7
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00b      	beq.n	800e81a <pvPortMalloc+0x6e>
	__asm volatile
 800e802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e806:	f383 8811 	msr	BASEPRI, r3
 800e80a:	f3bf 8f6f 	isb	sy
 800e80e:	f3bf 8f4f 	dsb	sy
 800e812:	617b      	str	r3, [r7, #20]
}
 800e814:	bf00      	nop
 800e816:	bf00      	nop
 800e818:	e7fd      	b.n	800e816 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d06f      	beq.n	800e900 <pvPortMalloc+0x154>
 800e820:	4b45      	ldr	r3, [pc, #276]	@ (800e938 <pvPortMalloc+0x18c>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	429a      	cmp	r2, r3
 800e828:	d86a      	bhi.n	800e900 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e82a:	4b44      	ldr	r3, [pc, #272]	@ (800e93c <pvPortMalloc+0x190>)
 800e82c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e82e:	4b43      	ldr	r3, [pc, #268]	@ (800e93c <pvPortMalloc+0x190>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e834:	e004      	b.n	800e840 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e838:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	429a      	cmp	r2, r3
 800e848:	d903      	bls.n	800e852 <pvPortMalloc+0xa6>
 800e84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1f1      	bne.n	800e836 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e852:	4b37      	ldr	r3, [pc, #220]	@ (800e930 <pvPortMalloc+0x184>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e858:	429a      	cmp	r2, r3
 800e85a:	d051      	beq.n	800e900 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e85c:	6a3b      	ldr	r3, [r7, #32]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2208      	movs	r2, #8
 800e862:	4413      	add	r3, r2
 800e864:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	6a3b      	ldr	r3, [r7, #32]
 800e86c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e870:	685a      	ldr	r2, [r3, #4]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	1ad2      	subs	r2, r2, r3
 800e876:	2308      	movs	r3, #8
 800e878:	005b      	lsls	r3, r3, #1
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d920      	bls.n	800e8c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e87e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	4413      	add	r3, r2
 800e884:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	f003 0307 	and.w	r3, r3, #7
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d00b      	beq.n	800e8a8 <pvPortMalloc+0xfc>
	__asm volatile
 800e890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e894:	f383 8811 	msr	BASEPRI, r3
 800e898:	f3bf 8f6f 	isb	sy
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	613b      	str	r3, [r7, #16]
}
 800e8a2:	bf00      	nop
 800e8a4:	bf00      	nop
 800e8a6:	e7fd      	b.n	800e8a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8aa:	685a      	ldr	r2, [r3, #4]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	1ad2      	subs	r2, r2, r3
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e8ba:	69b8      	ldr	r0, [r7, #24]
 800e8bc:	f000 f90a 	bl	800ead4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8c0:	4b1d      	ldr	r3, [pc, #116]	@ (800e938 <pvPortMalloc+0x18c>)
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	1ad3      	subs	r3, r2, r3
 800e8ca:	4a1b      	ldr	r2, [pc, #108]	@ (800e938 <pvPortMalloc+0x18c>)
 800e8cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8ce:	4b1a      	ldr	r3, [pc, #104]	@ (800e938 <pvPortMalloc+0x18c>)
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	4b1b      	ldr	r3, [pc, #108]	@ (800e940 <pvPortMalloc+0x194>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d203      	bcs.n	800e8e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e8da:	4b17      	ldr	r3, [pc, #92]	@ (800e938 <pvPortMalloc+0x18c>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4a18      	ldr	r2, [pc, #96]	@ (800e940 <pvPortMalloc+0x194>)
 800e8e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e4:	685a      	ldr	r2, [r3, #4]
 800e8e6:	4b13      	ldr	r3, [pc, #76]	@ (800e934 <pvPortMalloc+0x188>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	431a      	orrs	r2, r3
 800e8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e8f6:	4b13      	ldr	r3, [pc, #76]	@ (800e944 <pvPortMalloc+0x198>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	4a11      	ldr	r2, [pc, #68]	@ (800e944 <pvPortMalloc+0x198>)
 800e8fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e900:	f7fe fbce 	bl	800d0a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	f003 0307 	and.w	r3, r3, #7
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d00b      	beq.n	800e926 <pvPortMalloc+0x17a>
	__asm volatile
 800e90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	60fb      	str	r3, [r7, #12]
}
 800e920:	bf00      	nop
 800e922:	bf00      	nop
 800e924:	e7fd      	b.n	800e922 <pvPortMalloc+0x176>
	return pvReturn;
 800e926:	69fb      	ldr	r3, [r7, #28]
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3728      	adds	r7, #40	@ 0x28
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	20005150 	.word	0x20005150
 800e934:	20005164 	.word	0x20005164
 800e938:	20005154 	.word	0x20005154
 800e93c:	20005148 	.word	0x20005148
 800e940:	20005158 	.word	0x20005158
 800e944:	2000515c 	.word	0x2000515c

0800e948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d04f      	beq.n	800e9fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e95a:	2308      	movs	r3, #8
 800e95c:	425b      	negs	r3, r3
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	4413      	add	r3, r2
 800e962:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	685a      	ldr	r2, [r3, #4]
 800e96c:	4b25      	ldr	r3, [pc, #148]	@ (800ea04 <vPortFree+0xbc>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4013      	ands	r3, r2
 800e972:	2b00      	cmp	r3, #0
 800e974:	d10b      	bne.n	800e98e <vPortFree+0x46>
	__asm volatile
 800e976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e97a:	f383 8811 	msr	BASEPRI, r3
 800e97e:	f3bf 8f6f 	isb	sy
 800e982:	f3bf 8f4f 	dsb	sy
 800e986:	60fb      	str	r3, [r7, #12]
}
 800e988:	bf00      	nop
 800e98a:	bf00      	nop
 800e98c:	e7fd      	b.n	800e98a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d00b      	beq.n	800e9ae <vPortFree+0x66>
	__asm volatile
 800e996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e99a:	f383 8811 	msr	BASEPRI, r3
 800e99e:	f3bf 8f6f 	isb	sy
 800e9a2:	f3bf 8f4f 	dsb	sy
 800e9a6:	60bb      	str	r3, [r7, #8]
}
 800e9a8:	bf00      	nop
 800e9aa:	bf00      	nop
 800e9ac:	e7fd      	b.n	800e9aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	685a      	ldr	r2, [r3, #4]
 800e9b2:	4b14      	ldr	r3, [pc, #80]	@ (800ea04 <vPortFree+0xbc>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4013      	ands	r3, r2
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d01e      	beq.n	800e9fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d11a      	bne.n	800e9fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	685a      	ldr	r2, [r3, #4]
 800e9c8:	4b0e      	ldr	r3, [pc, #56]	@ (800ea04 <vPortFree+0xbc>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	43db      	mvns	r3, r3
 800e9ce:	401a      	ands	r2, r3
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e9d4:	f7fe fb56 	bl	800d084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	685a      	ldr	r2, [r3, #4]
 800e9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800ea08 <vPortFree+0xc0>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	4a09      	ldr	r2, [pc, #36]	@ (800ea08 <vPortFree+0xc0>)
 800e9e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e9e6:	6938      	ldr	r0, [r7, #16]
 800e9e8:	f000 f874 	bl	800ead4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e9ec:	4b07      	ldr	r3, [pc, #28]	@ (800ea0c <vPortFree+0xc4>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	4a06      	ldr	r2, [pc, #24]	@ (800ea0c <vPortFree+0xc4>)
 800e9f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e9f6:	f7fe fb53 	bl	800d0a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e9fa:	bf00      	nop
 800e9fc:	3718      	adds	r7, #24
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	20005164 	.word	0x20005164
 800ea08:	20005154 	.word	0x20005154
 800ea0c:	20005160 	.word	0x20005160

0800ea10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ea1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea1c:	4b27      	ldr	r3, [pc, #156]	@ (800eabc <prvHeapInit+0xac>)
 800ea1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f003 0307 	and.w	r3, r3, #7
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00c      	beq.n	800ea44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	3307      	adds	r3, #7
 800ea2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f023 0307 	bic.w	r3, r3, #7
 800ea36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea38:	68ba      	ldr	r2, [r7, #8]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	1ad3      	subs	r3, r2, r3
 800ea3e:	4a1f      	ldr	r2, [pc, #124]	@ (800eabc <prvHeapInit+0xac>)
 800ea40:	4413      	add	r3, r2
 800ea42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea48:	4a1d      	ldr	r2, [pc, #116]	@ (800eac0 <prvHeapInit+0xb0>)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea4e:	4b1c      	ldr	r3, [pc, #112]	@ (800eac0 <prvHeapInit+0xb0>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	68ba      	ldr	r2, [r7, #8]
 800ea58:	4413      	add	r3, r2
 800ea5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ea5c:	2208      	movs	r2, #8
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	1a9b      	subs	r3, r3, r2
 800ea62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f023 0307 	bic.w	r3, r3, #7
 800ea6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	4a15      	ldr	r2, [pc, #84]	@ (800eac4 <prvHeapInit+0xb4>)
 800ea70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ea72:	4b14      	ldr	r3, [pc, #80]	@ (800eac4 <prvHeapInit+0xb4>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2200      	movs	r2, #0
 800ea78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ea7a:	4b12      	ldr	r3, [pc, #72]	@ (800eac4 <prvHeapInit+0xb4>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	1ad2      	subs	r2, r2, r3
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ea90:	4b0c      	ldr	r3, [pc, #48]	@ (800eac4 <prvHeapInit+0xb4>)
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	4a0a      	ldr	r2, [pc, #40]	@ (800eac8 <prvHeapInit+0xb8>)
 800ea9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	4a09      	ldr	r2, [pc, #36]	@ (800eacc <prvHeapInit+0xbc>)
 800eaa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eaa8:	4b09      	ldr	r3, [pc, #36]	@ (800ead0 <prvHeapInit+0xc0>)
 800eaaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800eaae:	601a      	str	r2, [r3, #0]
}
 800eab0:	bf00      	nop
 800eab2:	3714      	adds	r7, #20
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr
 800eabc:	20001548 	.word	0x20001548
 800eac0:	20005148 	.word	0x20005148
 800eac4:	20005150 	.word	0x20005150
 800eac8:	20005158 	.word	0x20005158
 800eacc:	20005154 	.word	0x20005154
 800ead0:	20005164 	.word	0x20005164

0800ead4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ead4:	b480      	push	{r7}
 800ead6:	b085      	sub	sp, #20
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eadc:	4b28      	ldr	r3, [pc, #160]	@ (800eb80 <prvInsertBlockIntoFreeList+0xac>)
 800eade:	60fb      	str	r3, [r7, #12]
 800eae0:	e002      	b.n	800eae8 <prvInsertBlockIntoFreeList+0x14>
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	60fb      	str	r3, [r7, #12]
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d8f7      	bhi.n	800eae2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	68ba      	ldr	r2, [r7, #8]
 800eafc:	4413      	add	r3, r2
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d108      	bne.n	800eb16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	685a      	ldr	r2, [r3, #4]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	441a      	add	r2, r3
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	441a      	add	r2, r3
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d118      	bne.n	800eb5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	4b15      	ldr	r3, [pc, #84]	@ (800eb84 <prvInsertBlockIntoFreeList+0xb0>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d00d      	beq.n	800eb52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	685a      	ldr	r2, [r3, #4]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	441a      	add	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	601a      	str	r2, [r3, #0]
 800eb50:	e008      	b.n	800eb64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb52:	4b0c      	ldr	r3, [pc, #48]	@ (800eb84 <prvInsertBlockIntoFreeList+0xb0>)
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	e003      	b.n	800eb64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d002      	beq.n	800eb72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb72:	bf00      	nop
 800eb74:	3714      	adds	r7, #20
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr
 800eb7e:	bf00      	nop
 800eb80:	20005148 	.word	0x20005148
 800eb84:	20005150 	.word	0x20005150

0800eb88 <siprintf>:
 800eb88:	b40e      	push	{r1, r2, r3}
 800eb8a:	b500      	push	{lr}
 800eb8c:	b09c      	sub	sp, #112	@ 0x70
 800eb8e:	ab1d      	add	r3, sp, #116	@ 0x74
 800eb90:	9002      	str	r0, [sp, #8]
 800eb92:	9006      	str	r0, [sp, #24]
 800eb94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eb98:	4809      	ldr	r0, [pc, #36]	@ (800ebc0 <siprintf+0x38>)
 800eb9a:	9107      	str	r1, [sp, #28]
 800eb9c:	9104      	str	r1, [sp, #16]
 800eb9e:	4909      	ldr	r1, [pc, #36]	@ (800ebc4 <siprintf+0x3c>)
 800eba0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eba4:	9105      	str	r1, [sp, #20]
 800eba6:	6800      	ldr	r0, [r0, #0]
 800eba8:	9301      	str	r3, [sp, #4]
 800ebaa:	a902      	add	r1, sp, #8
 800ebac:	f000 f9f8 	bl	800efa0 <_svfiprintf_r>
 800ebb0:	9b02      	ldr	r3, [sp, #8]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	701a      	strb	r2, [r3, #0]
 800ebb6:	b01c      	add	sp, #112	@ 0x70
 800ebb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebbc:	b003      	add	sp, #12
 800ebbe:	4770      	bx	lr
 800ebc0:	20000010 	.word	0x20000010
 800ebc4:	ffff0208 	.word	0xffff0208

0800ebc8 <memset>:
 800ebc8:	4402      	add	r2, r0
 800ebca:	4603      	mov	r3, r0
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d100      	bne.n	800ebd2 <memset+0xa>
 800ebd0:	4770      	bx	lr
 800ebd2:	f803 1b01 	strb.w	r1, [r3], #1
 800ebd6:	e7f9      	b.n	800ebcc <memset+0x4>

0800ebd8 <_reclaim_reent>:
 800ebd8:	4b29      	ldr	r3, [pc, #164]	@ (800ec80 <_reclaim_reent+0xa8>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4283      	cmp	r3, r0
 800ebde:	b570      	push	{r4, r5, r6, lr}
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	d04b      	beq.n	800ec7c <_reclaim_reent+0xa4>
 800ebe4:	69c3      	ldr	r3, [r0, #28]
 800ebe6:	b1ab      	cbz	r3, 800ec14 <_reclaim_reent+0x3c>
 800ebe8:	68db      	ldr	r3, [r3, #12]
 800ebea:	b16b      	cbz	r3, 800ec08 <_reclaim_reent+0x30>
 800ebec:	2500      	movs	r5, #0
 800ebee:	69e3      	ldr	r3, [r4, #28]
 800ebf0:	68db      	ldr	r3, [r3, #12]
 800ebf2:	5959      	ldr	r1, [r3, r5]
 800ebf4:	2900      	cmp	r1, #0
 800ebf6:	d13b      	bne.n	800ec70 <_reclaim_reent+0x98>
 800ebf8:	3504      	adds	r5, #4
 800ebfa:	2d80      	cmp	r5, #128	@ 0x80
 800ebfc:	d1f7      	bne.n	800ebee <_reclaim_reent+0x16>
 800ebfe:	69e3      	ldr	r3, [r4, #28]
 800ec00:	4620      	mov	r0, r4
 800ec02:	68d9      	ldr	r1, [r3, #12]
 800ec04:	f000 f878 	bl	800ecf8 <_free_r>
 800ec08:	69e3      	ldr	r3, [r4, #28]
 800ec0a:	6819      	ldr	r1, [r3, #0]
 800ec0c:	b111      	cbz	r1, 800ec14 <_reclaim_reent+0x3c>
 800ec0e:	4620      	mov	r0, r4
 800ec10:	f000 f872 	bl	800ecf8 <_free_r>
 800ec14:	6961      	ldr	r1, [r4, #20]
 800ec16:	b111      	cbz	r1, 800ec1e <_reclaim_reent+0x46>
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f000 f86d 	bl	800ecf8 <_free_r>
 800ec1e:	69e1      	ldr	r1, [r4, #28]
 800ec20:	b111      	cbz	r1, 800ec28 <_reclaim_reent+0x50>
 800ec22:	4620      	mov	r0, r4
 800ec24:	f000 f868 	bl	800ecf8 <_free_r>
 800ec28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ec2a:	b111      	cbz	r1, 800ec32 <_reclaim_reent+0x5a>
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	f000 f863 	bl	800ecf8 <_free_r>
 800ec32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec34:	b111      	cbz	r1, 800ec3c <_reclaim_reent+0x64>
 800ec36:	4620      	mov	r0, r4
 800ec38:	f000 f85e 	bl	800ecf8 <_free_r>
 800ec3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ec3e:	b111      	cbz	r1, 800ec46 <_reclaim_reent+0x6e>
 800ec40:	4620      	mov	r0, r4
 800ec42:	f000 f859 	bl	800ecf8 <_free_r>
 800ec46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ec48:	b111      	cbz	r1, 800ec50 <_reclaim_reent+0x78>
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f000 f854 	bl	800ecf8 <_free_r>
 800ec50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ec52:	b111      	cbz	r1, 800ec5a <_reclaim_reent+0x82>
 800ec54:	4620      	mov	r0, r4
 800ec56:	f000 f84f 	bl	800ecf8 <_free_r>
 800ec5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ec5c:	b111      	cbz	r1, 800ec64 <_reclaim_reent+0x8c>
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f000 f84a 	bl	800ecf8 <_free_r>
 800ec64:	6a23      	ldr	r3, [r4, #32]
 800ec66:	b14b      	cbz	r3, 800ec7c <_reclaim_reent+0xa4>
 800ec68:	4620      	mov	r0, r4
 800ec6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec6e:	4718      	bx	r3
 800ec70:	680e      	ldr	r6, [r1, #0]
 800ec72:	4620      	mov	r0, r4
 800ec74:	f000 f840 	bl	800ecf8 <_free_r>
 800ec78:	4631      	mov	r1, r6
 800ec7a:	e7bb      	b.n	800ebf4 <_reclaim_reent+0x1c>
 800ec7c:	bd70      	pop	{r4, r5, r6, pc}
 800ec7e:	bf00      	nop
 800ec80:	20000010 	.word	0x20000010

0800ec84 <__errno>:
 800ec84:	4b01      	ldr	r3, [pc, #4]	@ (800ec8c <__errno+0x8>)
 800ec86:	6818      	ldr	r0, [r3, #0]
 800ec88:	4770      	bx	lr
 800ec8a:	bf00      	nop
 800ec8c:	20000010 	.word	0x20000010

0800ec90 <__libc_init_array>:
 800ec90:	b570      	push	{r4, r5, r6, lr}
 800ec92:	4d0d      	ldr	r5, [pc, #52]	@ (800ecc8 <__libc_init_array+0x38>)
 800ec94:	4c0d      	ldr	r4, [pc, #52]	@ (800eccc <__libc_init_array+0x3c>)
 800ec96:	1b64      	subs	r4, r4, r5
 800ec98:	10a4      	asrs	r4, r4, #2
 800ec9a:	2600      	movs	r6, #0
 800ec9c:	42a6      	cmp	r6, r4
 800ec9e:	d109      	bne.n	800ecb4 <__libc_init_array+0x24>
 800eca0:	4d0b      	ldr	r5, [pc, #44]	@ (800ecd0 <__libc_init_array+0x40>)
 800eca2:	4c0c      	ldr	r4, [pc, #48]	@ (800ecd4 <__libc_init_array+0x44>)
 800eca4:	f000 fc66 	bl	800f574 <_init>
 800eca8:	1b64      	subs	r4, r4, r5
 800ecaa:	10a4      	asrs	r4, r4, #2
 800ecac:	2600      	movs	r6, #0
 800ecae:	42a6      	cmp	r6, r4
 800ecb0:	d105      	bne.n	800ecbe <__libc_init_array+0x2e>
 800ecb2:	bd70      	pop	{r4, r5, r6, pc}
 800ecb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecb8:	4798      	blx	r3
 800ecba:	3601      	adds	r6, #1
 800ecbc:	e7ee      	b.n	800ec9c <__libc_init_array+0xc>
 800ecbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecc2:	4798      	blx	r3
 800ecc4:	3601      	adds	r6, #1
 800ecc6:	e7f2      	b.n	800ecae <__libc_init_array+0x1e>
 800ecc8:	0800fe2c 	.word	0x0800fe2c
 800eccc:	0800fe2c 	.word	0x0800fe2c
 800ecd0:	0800fe2c 	.word	0x0800fe2c
 800ecd4:	0800fe30 	.word	0x0800fe30

0800ecd8 <__retarget_lock_acquire_recursive>:
 800ecd8:	4770      	bx	lr

0800ecda <__retarget_lock_release_recursive>:
 800ecda:	4770      	bx	lr

0800ecdc <memcpy>:
 800ecdc:	440a      	add	r2, r1
 800ecde:	4291      	cmp	r1, r2
 800ece0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ece4:	d100      	bne.n	800ece8 <memcpy+0xc>
 800ece6:	4770      	bx	lr
 800ece8:	b510      	push	{r4, lr}
 800ecea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecf2:	4291      	cmp	r1, r2
 800ecf4:	d1f9      	bne.n	800ecea <memcpy+0xe>
 800ecf6:	bd10      	pop	{r4, pc}

0800ecf8 <_free_r>:
 800ecf8:	b538      	push	{r3, r4, r5, lr}
 800ecfa:	4605      	mov	r5, r0
 800ecfc:	2900      	cmp	r1, #0
 800ecfe:	d041      	beq.n	800ed84 <_free_r+0x8c>
 800ed00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed04:	1f0c      	subs	r4, r1, #4
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	bfb8      	it	lt
 800ed0a:	18e4      	addlt	r4, r4, r3
 800ed0c:	f000 f8e0 	bl	800eed0 <__malloc_lock>
 800ed10:	4a1d      	ldr	r2, [pc, #116]	@ (800ed88 <_free_r+0x90>)
 800ed12:	6813      	ldr	r3, [r2, #0]
 800ed14:	b933      	cbnz	r3, 800ed24 <_free_r+0x2c>
 800ed16:	6063      	str	r3, [r4, #4]
 800ed18:	6014      	str	r4, [r2, #0]
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed20:	f000 b8dc 	b.w	800eedc <__malloc_unlock>
 800ed24:	42a3      	cmp	r3, r4
 800ed26:	d908      	bls.n	800ed3a <_free_r+0x42>
 800ed28:	6820      	ldr	r0, [r4, #0]
 800ed2a:	1821      	adds	r1, r4, r0
 800ed2c:	428b      	cmp	r3, r1
 800ed2e:	bf01      	itttt	eq
 800ed30:	6819      	ldreq	r1, [r3, #0]
 800ed32:	685b      	ldreq	r3, [r3, #4]
 800ed34:	1809      	addeq	r1, r1, r0
 800ed36:	6021      	streq	r1, [r4, #0]
 800ed38:	e7ed      	b.n	800ed16 <_free_r+0x1e>
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	b10b      	cbz	r3, 800ed44 <_free_r+0x4c>
 800ed40:	42a3      	cmp	r3, r4
 800ed42:	d9fa      	bls.n	800ed3a <_free_r+0x42>
 800ed44:	6811      	ldr	r1, [r2, #0]
 800ed46:	1850      	adds	r0, r2, r1
 800ed48:	42a0      	cmp	r0, r4
 800ed4a:	d10b      	bne.n	800ed64 <_free_r+0x6c>
 800ed4c:	6820      	ldr	r0, [r4, #0]
 800ed4e:	4401      	add	r1, r0
 800ed50:	1850      	adds	r0, r2, r1
 800ed52:	4283      	cmp	r3, r0
 800ed54:	6011      	str	r1, [r2, #0]
 800ed56:	d1e0      	bne.n	800ed1a <_free_r+0x22>
 800ed58:	6818      	ldr	r0, [r3, #0]
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	6053      	str	r3, [r2, #4]
 800ed5e:	4408      	add	r0, r1
 800ed60:	6010      	str	r0, [r2, #0]
 800ed62:	e7da      	b.n	800ed1a <_free_r+0x22>
 800ed64:	d902      	bls.n	800ed6c <_free_r+0x74>
 800ed66:	230c      	movs	r3, #12
 800ed68:	602b      	str	r3, [r5, #0]
 800ed6a:	e7d6      	b.n	800ed1a <_free_r+0x22>
 800ed6c:	6820      	ldr	r0, [r4, #0]
 800ed6e:	1821      	adds	r1, r4, r0
 800ed70:	428b      	cmp	r3, r1
 800ed72:	bf04      	itt	eq
 800ed74:	6819      	ldreq	r1, [r3, #0]
 800ed76:	685b      	ldreq	r3, [r3, #4]
 800ed78:	6063      	str	r3, [r4, #4]
 800ed7a:	bf04      	itt	eq
 800ed7c:	1809      	addeq	r1, r1, r0
 800ed7e:	6021      	streq	r1, [r4, #0]
 800ed80:	6054      	str	r4, [r2, #4]
 800ed82:	e7ca      	b.n	800ed1a <_free_r+0x22>
 800ed84:	bd38      	pop	{r3, r4, r5, pc}
 800ed86:	bf00      	nop
 800ed88:	200052ac 	.word	0x200052ac

0800ed8c <sbrk_aligned>:
 800ed8c:	b570      	push	{r4, r5, r6, lr}
 800ed8e:	4e0f      	ldr	r6, [pc, #60]	@ (800edcc <sbrk_aligned+0x40>)
 800ed90:	460c      	mov	r4, r1
 800ed92:	6831      	ldr	r1, [r6, #0]
 800ed94:	4605      	mov	r5, r0
 800ed96:	b911      	cbnz	r1, 800ed9e <sbrk_aligned+0x12>
 800ed98:	f000 fba6 	bl	800f4e8 <_sbrk_r>
 800ed9c:	6030      	str	r0, [r6, #0]
 800ed9e:	4621      	mov	r1, r4
 800eda0:	4628      	mov	r0, r5
 800eda2:	f000 fba1 	bl	800f4e8 <_sbrk_r>
 800eda6:	1c43      	adds	r3, r0, #1
 800eda8:	d103      	bne.n	800edb2 <sbrk_aligned+0x26>
 800edaa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800edae:	4620      	mov	r0, r4
 800edb0:	bd70      	pop	{r4, r5, r6, pc}
 800edb2:	1cc4      	adds	r4, r0, #3
 800edb4:	f024 0403 	bic.w	r4, r4, #3
 800edb8:	42a0      	cmp	r0, r4
 800edba:	d0f8      	beq.n	800edae <sbrk_aligned+0x22>
 800edbc:	1a21      	subs	r1, r4, r0
 800edbe:	4628      	mov	r0, r5
 800edc0:	f000 fb92 	bl	800f4e8 <_sbrk_r>
 800edc4:	3001      	adds	r0, #1
 800edc6:	d1f2      	bne.n	800edae <sbrk_aligned+0x22>
 800edc8:	e7ef      	b.n	800edaa <sbrk_aligned+0x1e>
 800edca:	bf00      	nop
 800edcc:	200052a8 	.word	0x200052a8

0800edd0 <_malloc_r>:
 800edd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edd4:	1ccd      	adds	r5, r1, #3
 800edd6:	f025 0503 	bic.w	r5, r5, #3
 800edda:	3508      	adds	r5, #8
 800eddc:	2d0c      	cmp	r5, #12
 800edde:	bf38      	it	cc
 800ede0:	250c      	movcc	r5, #12
 800ede2:	2d00      	cmp	r5, #0
 800ede4:	4606      	mov	r6, r0
 800ede6:	db01      	blt.n	800edec <_malloc_r+0x1c>
 800ede8:	42a9      	cmp	r1, r5
 800edea:	d904      	bls.n	800edf6 <_malloc_r+0x26>
 800edec:	230c      	movs	r3, #12
 800edee:	6033      	str	r3, [r6, #0]
 800edf0:	2000      	movs	r0, #0
 800edf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eecc <_malloc_r+0xfc>
 800edfa:	f000 f869 	bl	800eed0 <__malloc_lock>
 800edfe:	f8d8 3000 	ldr.w	r3, [r8]
 800ee02:	461c      	mov	r4, r3
 800ee04:	bb44      	cbnz	r4, 800ee58 <_malloc_r+0x88>
 800ee06:	4629      	mov	r1, r5
 800ee08:	4630      	mov	r0, r6
 800ee0a:	f7ff ffbf 	bl	800ed8c <sbrk_aligned>
 800ee0e:	1c43      	adds	r3, r0, #1
 800ee10:	4604      	mov	r4, r0
 800ee12:	d158      	bne.n	800eec6 <_malloc_r+0xf6>
 800ee14:	f8d8 4000 	ldr.w	r4, [r8]
 800ee18:	4627      	mov	r7, r4
 800ee1a:	2f00      	cmp	r7, #0
 800ee1c:	d143      	bne.n	800eea6 <_malloc_r+0xd6>
 800ee1e:	2c00      	cmp	r4, #0
 800ee20:	d04b      	beq.n	800eeba <_malloc_r+0xea>
 800ee22:	6823      	ldr	r3, [r4, #0]
 800ee24:	4639      	mov	r1, r7
 800ee26:	4630      	mov	r0, r6
 800ee28:	eb04 0903 	add.w	r9, r4, r3
 800ee2c:	f000 fb5c 	bl	800f4e8 <_sbrk_r>
 800ee30:	4581      	cmp	r9, r0
 800ee32:	d142      	bne.n	800eeba <_malloc_r+0xea>
 800ee34:	6821      	ldr	r1, [r4, #0]
 800ee36:	1a6d      	subs	r5, r5, r1
 800ee38:	4629      	mov	r1, r5
 800ee3a:	4630      	mov	r0, r6
 800ee3c:	f7ff ffa6 	bl	800ed8c <sbrk_aligned>
 800ee40:	3001      	adds	r0, #1
 800ee42:	d03a      	beq.n	800eeba <_malloc_r+0xea>
 800ee44:	6823      	ldr	r3, [r4, #0]
 800ee46:	442b      	add	r3, r5
 800ee48:	6023      	str	r3, [r4, #0]
 800ee4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ee4e:	685a      	ldr	r2, [r3, #4]
 800ee50:	bb62      	cbnz	r2, 800eeac <_malloc_r+0xdc>
 800ee52:	f8c8 7000 	str.w	r7, [r8]
 800ee56:	e00f      	b.n	800ee78 <_malloc_r+0xa8>
 800ee58:	6822      	ldr	r2, [r4, #0]
 800ee5a:	1b52      	subs	r2, r2, r5
 800ee5c:	d420      	bmi.n	800eea0 <_malloc_r+0xd0>
 800ee5e:	2a0b      	cmp	r2, #11
 800ee60:	d917      	bls.n	800ee92 <_malloc_r+0xc2>
 800ee62:	1961      	adds	r1, r4, r5
 800ee64:	42a3      	cmp	r3, r4
 800ee66:	6025      	str	r5, [r4, #0]
 800ee68:	bf18      	it	ne
 800ee6a:	6059      	strne	r1, [r3, #4]
 800ee6c:	6863      	ldr	r3, [r4, #4]
 800ee6e:	bf08      	it	eq
 800ee70:	f8c8 1000 	streq.w	r1, [r8]
 800ee74:	5162      	str	r2, [r4, r5]
 800ee76:	604b      	str	r3, [r1, #4]
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f000 f82f 	bl	800eedc <__malloc_unlock>
 800ee7e:	f104 000b 	add.w	r0, r4, #11
 800ee82:	1d23      	adds	r3, r4, #4
 800ee84:	f020 0007 	bic.w	r0, r0, #7
 800ee88:	1ac2      	subs	r2, r0, r3
 800ee8a:	bf1c      	itt	ne
 800ee8c:	1a1b      	subne	r3, r3, r0
 800ee8e:	50a3      	strne	r3, [r4, r2]
 800ee90:	e7af      	b.n	800edf2 <_malloc_r+0x22>
 800ee92:	6862      	ldr	r2, [r4, #4]
 800ee94:	42a3      	cmp	r3, r4
 800ee96:	bf0c      	ite	eq
 800ee98:	f8c8 2000 	streq.w	r2, [r8]
 800ee9c:	605a      	strne	r2, [r3, #4]
 800ee9e:	e7eb      	b.n	800ee78 <_malloc_r+0xa8>
 800eea0:	4623      	mov	r3, r4
 800eea2:	6864      	ldr	r4, [r4, #4]
 800eea4:	e7ae      	b.n	800ee04 <_malloc_r+0x34>
 800eea6:	463c      	mov	r4, r7
 800eea8:	687f      	ldr	r7, [r7, #4]
 800eeaa:	e7b6      	b.n	800ee1a <_malloc_r+0x4a>
 800eeac:	461a      	mov	r2, r3
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	42a3      	cmp	r3, r4
 800eeb2:	d1fb      	bne.n	800eeac <_malloc_r+0xdc>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	6053      	str	r3, [r2, #4]
 800eeb8:	e7de      	b.n	800ee78 <_malloc_r+0xa8>
 800eeba:	230c      	movs	r3, #12
 800eebc:	6033      	str	r3, [r6, #0]
 800eebe:	4630      	mov	r0, r6
 800eec0:	f000 f80c 	bl	800eedc <__malloc_unlock>
 800eec4:	e794      	b.n	800edf0 <_malloc_r+0x20>
 800eec6:	6005      	str	r5, [r0, #0]
 800eec8:	e7d6      	b.n	800ee78 <_malloc_r+0xa8>
 800eeca:	bf00      	nop
 800eecc:	200052ac 	.word	0x200052ac

0800eed0 <__malloc_lock>:
 800eed0:	4801      	ldr	r0, [pc, #4]	@ (800eed8 <__malloc_lock+0x8>)
 800eed2:	f7ff bf01 	b.w	800ecd8 <__retarget_lock_acquire_recursive>
 800eed6:	bf00      	nop
 800eed8:	200052a4 	.word	0x200052a4

0800eedc <__malloc_unlock>:
 800eedc:	4801      	ldr	r0, [pc, #4]	@ (800eee4 <__malloc_unlock+0x8>)
 800eede:	f7ff befc 	b.w	800ecda <__retarget_lock_release_recursive>
 800eee2:	bf00      	nop
 800eee4:	200052a4 	.word	0x200052a4

0800eee8 <__ssputs_r>:
 800eee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeec:	688e      	ldr	r6, [r1, #8]
 800eeee:	461f      	mov	r7, r3
 800eef0:	42be      	cmp	r6, r7
 800eef2:	680b      	ldr	r3, [r1, #0]
 800eef4:	4682      	mov	sl, r0
 800eef6:	460c      	mov	r4, r1
 800eef8:	4690      	mov	r8, r2
 800eefa:	d82d      	bhi.n	800ef58 <__ssputs_r+0x70>
 800eefc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ef04:	d026      	beq.n	800ef54 <__ssputs_r+0x6c>
 800ef06:	6965      	ldr	r5, [r4, #20]
 800ef08:	6909      	ldr	r1, [r1, #16]
 800ef0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef0e:	eba3 0901 	sub.w	r9, r3, r1
 800ef12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef16:	1c7b      	adds	r3, r7, #1
 800ef18:	444b      	add	r3, r9
 800ef1a:	106d      	asrs	r5, r5, #1
 800ef1c:	429d      	cmp	r5, r3
 800ef1e:	bf38      	it	cc
 800ef20:	461d      	movcc	r5, r3
 800ef22:	0553      	lsls	r3, r2, #21
 800ef24:	d527      	bpl.n	800ef76 <__ssputs_r+0x8e>
 800ef26:	4629      	mov	r1, r5
 800ef28:	f7ff ff52 	bl	800edd0 <_malloc_r>
 800ef2c:	4606      	mov	r6, r0
 800ef2e:	b360      	cbz	r0, 800ef8a <__ssputs_r+0xa2>
 800ef30:	6921      	ldr	r1, [r4, #16]
 800ef32:	464a      	mov	r2, r9
 800ef34:	f7ff fed2 	bl	800ecdc <memcpy>
 800ef38:	89a3      	ldrh	r3, [r4, #12]
 800ef3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ef3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef42:	81a3      	strh	r3, [r4, #12]
 800ef44:	6126      	str	r6, [r4, #16]
 800ef46:	6165      	str	r5, [r4, #20]
 800ef48:	444e      	add	r6, r9
 800ef4a:	eba5 0509 	sub.w	r5, r5, r9
 800ef4e:	6026      	str	r6, [r4, #0]
 800ef50:	60a5      	str	r5, [r4, #8]
 800ef52:	463e      	mov	r6, r7
 800ef54:	42be      	cmp	r6, r7
 800ef56:	d900      	bls.n	800ef5a <__ssputs_r+0x72>
 800ef58:	463e      	mov	r6, r7
 800ef5a:	6820      	ldr	r0, [r4, #0]
 800ef5c:	4632      	mov	r2, r6
 800ef5e:	4641      	mov	r1, r8
 800ef60:	f000 faa8 	bl	800f4b4 <memmove>
 800ef64:	68a3      	ldr	r3, [r4, #8]
 800ef66:	1b9b      	subs	r3, r3, r6
 800ef68:	60a3      	str	r3, [r4, #8]
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	4433      	add	r3, r6
 800ef6e:	6023      	str	r3, [r4, #0]
 800ef70:	2000      	movs	r0, #0
 800ef72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef76:	462a      	mov	r2, r5
 800ef78:	f000 fac6 	bl	800f508 <_realloc_r>
 800ef7c:	4606      	mov	r6, r0
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	d1e0      	bne.n	800ef44 <__ssputs_r+0x5c>
 800ef82:	6921      	ldr	r1, [r4, #16]
 800ef84:	4650      	mov	r0, sl
 800ef86:	f7ff feb7 	bl	800ecf8 <_free_r>
 800ef8a:	230c      	movs	r3, #12
 800ef8c:	f8ca 3000 	str.w	r3, [sl]
 800ef90:	89a3      	ldrh	r3, [r4, #12]
 800ef92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef96:	81a3      	strh	r3, [r4, #12]
 800ef98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef9c:	e7e9      	b.n	800ef72 <__ssputs_r+0x8a>
	...

0800efa0 <_svfiprintf_r>:
 800efa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efa4:	4698      	mov	r8, r3
 800efa6:	898b      	ldrh	r3, [r1, #12]
 800efa8:	061b      	lsls	r3, r3, #24
 800efaa:	b09d      	sub	sp, #116	@ 0x74
 800efac:	4607      	mov	r7, r0
 800efae:	460d      	mov	r5, r1
 800efb0:	4614      	mov	r4, r2
 800efb2:	d510      	bpl.n	800efd6 <_svfiprintf_r+0x36>
 800efb4:	690b      	ldr	r3, [r1, #16]
 800efb6:	b973      	cbnz	r3, 800efd6 <_svfiprintf_r+0x36>
 800efb8:	2140      	movs	r1, #64	@ 0x40
 800efba:	f7ff ff09 	bl	800edd0 <_malloc_r>
 800efbe:	6028      	str	r0, [r5, #0]
 800efc0:	6128      	str	r0, [r5, #16]
 800efc2:	b930      	cbnz	r0, 800efd2 <_svfiprintf_r+0x32>
 800efc4:	230c      	movs	r3, #12
 800efc6:	603b      	str	r3, [r7, #0]
 800efc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800efcc:	b01d      	add	sp, #116	@ 0x74
 800efce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efd2:	2340      	movs	r3, #64	@ 0x40
 800efd4:	616b      	str	r3, [r5, #20]
 800efd6:	2300      	movs	r3, #0
 800efd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800efda:	2320      	movs	r3, #32
 800efdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800efe0:	f8cd 800c 	str.w	r8, [sp, #12]
 800efe4:	2330      	movs	r3, #48	@ 0x30
 800efe6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f184 <_svfiprintf_r+0x1e4>
 800efea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800efee:	f04f 0901 	mov.w	r9, #1
 800eff2:	4623      	mov	r3, r4
 800eff4:	469a      	mov	sl, r3
 800eff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800effa:	b10a      	cbz	r2, 800f000 <_svfiprintf_r+0x60>
 800effc:	2a25      	cmp	r2, #37	@ 0x25
 800effe:	d1f9      	bne.n	800eff4 <_svfiprintf_r+0x54>
 800f000:	ebba 0b04 	subs.w	fp, sl, r4
 800f004:	d00b      	beq.n	800f01e <_svfiprintf_r+0x7e>
 800f006:	465b      	mov	r3, fp
 800f008:	4622      	mov	r2, r4
 800f00a:	4629      	mov	r1, r5
 800f00c:	4638      	mov	r0, r7
 800f00e:	f7ff ff6b 	bl	800eee8 <__ssputs_r>
 800f012:	3001      	adds	r0, #1
 800f014:	f000 80a7 	beq.w	800f166 <_svfiprintf_r+0x1c6>
 800f018:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f01a:	445a      	add	r2, fp
 800f01c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f01e:	f89a 3000 	ldrb.w	r3, [sl]
 800f022:	2b00      	cmp	r3, #0
 800f024:	f000 809f 	beq.w	800f166 <_svfiprintf_r+0x1c6>
 800f028:	2300      	movs	r3, #0
 800f02a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f02e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f032:	f10a 0a01 	add.w	sl, sl, #1
 800f036:	9304      	str	r3, [sp, #16]
 800f038:	9307      	str	r3, [sp, #28]
 800f03a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f03e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f040:	4654      	mov	r4, sl
 800f042:	2205      	movs	r2, #5
 800f044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f048:	484e      	ldr	r0, [pc, #312]	@ (800f184 <_svfiprintf_r+0x1e4>)
 800f04a:	f7f1 f8e9 	bl	8000220 <memchr>
 800f04e:	9a04      	ldr	r2, [sp, #16]
 800f050:	b9d8      	cbnz	r0, 800f08a <_svfiprintf_r+0xea>
 800f052:	06d0      	lsls	r0, r2, #27
 800f054:	bf44      	itt	mi
 800f056:	2320      	movmi	r3, #32
 800f058:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f05c:	0711      	lsls	r1, r2, #28
 800f05e:	bf44      	itt	mi
 800f060:	232b      	movmi	r3, #43	@ 0x2b
 800f062:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f066:	f89a 3000 	ldrb.w	r3, [sl]
 800f06a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f06c:	d015      	beq.n	800f09a <_svfiprintf_r+0xfa>
 800f06e:	9a07      	ldr	r2, [sp, #28]
 800f070:	4654      	mov	r4, sl
 800f072:	2000      	movs	r0, #0
 800f074:	f04f 0c0a 	mov.w	ip, #10
 800f078:	4621      	mov	r1, r4
 800f07a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f07e:	3b30      	subs	r3, #48	@ 0x30
 800f080:	2b09      	cmp	r3, #9
 800f082:	d94b      	bls.n	800f11c <_svfiprintf_r+0x17c>
 800f084:	b1b0      	cbz	r0, 800f0b4 <_svfiprintf_r+0x114>
 800f086:	9207      	str	r2, [sp, #28]
 800f088:	e014      	b.n	800f0b4 <_svfiprintf_r+0x114>
 800f08a:	eba0 0308 	sub.w	r3, r0, r8
 800f08e:	fa09 f303 	lsl.w	r3, r9, r3
 800f092:	4313      	orrs	r3, r2
 800f094:	9304      	str	r3, [sp, #16]
 800f096:	46a2      	mov	sl, r4
 800f098:	e7d2      	b.n	800f040 <_svfiprintf_r+0xa0>
 800f09a:	9b03      	ldr	r3, [sp, #12]
 800f09c:	1d19      	adds	r1, r3, #4
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	9103      	str	r1, [sp, #12]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	bfbb      	ittet	lt
 800f0a6:	425b      	neglt	r3, r3
 800f0a8:	f042 0202 	orrlt.w	r2, r2, #2
 800f0ac:	9307      	strge	r3, [sp, #28]
 800f0ae:	9307      	strlt	r3, [sp, #28]
 800f0b0:	bfb8      	it	lt
 800f0b2:	9204      	strlt	r2, [sp, #16]
 800f0b4:	7823      	ldrb	r3, [r4, #0]
 800f0b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0b8:	d10a      	bne.n	800f0d0 <_svfiprintf_r+0x130>
 800f0ba:	7863      	ldrb	r3, [r4, #1]
 800f0bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0be:	d132      	bne.n	800f126 <_svfiprintf_r+0x186>
 800f0c0:	9b03      	ldr	r3, [sp, #12]
 800f0c2:	1d1a      	adds	r2, r3, #4
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	9203      	str	r2, [sp, #12]
 800f0c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f0cc:	3402      	adds	r4, #2
 800f0ce:	9305      	str	r3, [sp, #20]
 800f0d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f194 <_svfiprintf_r+0x1f4>
 800f0d4:	7821      	ldrb	r1, [r4, #0]
 800f0d6:	2203      	movs	r2, #3
 800f0d8:	4650      	mov	r0, sl
 800f0da:	f7f1 f8a1 	bl	8000220 <memchr>
 800f0de:	b138      	cbz	r0, 800f0f0 <_svfiprintf_r+0x150>
 800f0e0:	9b04      	ldr	r3, [sp, #16]
 800f0e2:	eba0 000a 	sub.w	r0, r0, sl
 800f0e6:	2240      	movs	r2, #64	@ 0x40
 800f0e8:	4082      	lsls	r2, r0
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	3401      	adds	r4, #1
 800f0ee:	9304      	str	r3, [sp, #16]
 800f0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0f4:	4824      	ldr	r0, [pc, #144]	@ (800f188 <_svfiprintf_r+0x1e8>)
 800f0f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f0fa:	2206      	movs	r2, #6
 800f0fc:	f7f1 f890 	bl	8000220 <memchr>
 800f100:	2800      	cmp	r0, #0
 800f102:	d036      	beq.n	800f172 <_svfiprintf_r+0x1d2>
 800f104:	4b21      	ldr	r3, [pc, #132]	@ (800f18c <_svfiprintf_r+0x1ec>)
 800f106:	bb1b      	cbnz	r3, 800f150 <_svfiprintf_r+0x1b0>
 800f108:	9b03      	ldr	r3, [sp, #12]
 800f10a:	3307      	adds	r3, #7
 800f10c:	f023 0307 	bic.w	r3, r3, #7
 800f110:	3308      	adds	r3, #8
 800f112:	9303      	str	r3, [sp, #12]
 800f114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f116:	4433      	add	r3, r6
 800f118:	9309      	str	r3, [sp, #36]	@ 0x24
 800f11a:	e76a      	b.n	800eff2 <_svfiprintf_r+0x52>
 800f11c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f120:	460c      	mov	r4, r1
 800f122:	2001      	movs	r0, #1
 800f124:	e7a8      	b.n	800f078 <_svfiprintf_r+0xd8>
 800f126:	2300      	movs	r3, #0
 800f128:	3401      	adds	r4, #1
 800f12a:	9305      	str	r3, [sp, #20]
 800f12c:	4619      	mov	r1, r3
 800f12e:	f04f 0c0a 	mov.w	ip, #10
 800f132:	4620      	mov	r0, r4
 800f134:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f138:	3a30      	subs	r2, #48	@ 0x30
 800f13a:	2a09      	cmp	r2, #9
 800f13c:	d903      	bls.n	800f146 <_svfiprintf_r+0x1a6>
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d0c6      	beq.n	800f0d0 <_svfiprintf_r+0x130>
 800f142:	9105      	str	r1, [sp, #20]
 800f144:	e7c4      	b.n	800f0d0 <_svfiprintf_r+0x130>
 800f146:	fb0c 2101 	mla	r1, ip, r1, r2
 800f14a:	4604      	mov	r4, r0
 800f14c:	2301      	movs	r3, #1
 800f14e:	e7f0      	b.n	800f132 <_svfiprintf_r+0x192>
 800f150:	ab03      	add	r3, sp, #12
 800f152:	9300      	str	r3, [sp, #0]
 800f154:	462a      	mov	r2, r5
 800f156:	4b0e      	ldr	r3, [pc, #56]	@ (800f190 <_svfiprintf_r+0x1f0>)
 800f158:	a904      	add	r1, sp, #16
 800f15a:	4638      	mov	r0, r7
 800f15c:	f3af 8000 	nop.w
 800f160:	1c42      	adds	r2, r0, #1
 800f162:	4606      	mov	r6, r0
 800f164:	d1d6      	bne.n	800f114 <_svfiprintf_r+0x174>
 800f166:	89ab      	ldrh	r3, [r5, #12]
 800f168:	065b      	lsls	r3, r3, #25
 800f16a:	f53f af2d 	bmi.w	800efc8 <_svfiprintf_r+0x28>
 800f16e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f170:	e72c      	b.n	800efcc <_svfiprintf_r+0x2c>
 800f172:	ab03      	add	r3, sp, #12
 800f174:	9300      	str	r3, [sp, #0]
 800f176:	462a      	mov	r2, r5
 800f178:	4b05      	ldr	r3, [pc, #20]	@ (800f190 <_svfiprintf_r+0x1f0>)
 800f17a:	a904      	add	r1, sp, #16
 800f17c:	4638      	mov	r0, r7
 800f17e:	f000 f879 	bl	800f274 <_printf_i>
 800f182:	e7ed      	b.n	800f160 <_svfiprintf_r+0x1c0>
 800f184:	0800fdf0 	.word	0x0800fdf0
 800f188:	0800fdfa 	.word	0x0800fdfa
 800f18c:	00000000 	.word	0x00000000
 800f190:	0800eee9 	.word	0x0800eee9
 800f194:	0800fdf6 	.word	0x0800fdf6

0800f198 <_printf_common>:
 800f198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f19c:	4616      	mov	r6, r2
 800f19e:	4698      	mov	r8, r3
 800f1a0:	688a      	ldr	r2, [r1, #8]
 800f1a2:	690b      	ldr	r3, [r1, #16]
 800f1a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	bfb8      	it	lt
 800f1ac:	4613      	movlt	r3, r2
 800f1ae:	6033      	str	r3, [r6, #0]
 800f1b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f1b4:	4607      	mov	r7, r0
 800f1b6:	460c      	mov	r4, r1
 800f1b8:	b10a      	cbz	r2, 800f1be <_printf_common+0x26>
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	6033      	str	r3, [r6, #0]
 800f1be:	6823      	ldr	r3, [r4, #0]
 800f1c0:	0699      	lsls	r1, r3, #26
 800f1c2:	bf42      	ittt	mi
 800f1c4:	6833      	ldrmi	r3, [r6, #0]
 800f1c6:	3302      	addmi	r3, #2
 800f1c8:	6033      	strmi	r3, [r6, #0]
 800f1ca:	6825      	ldr	r5, [r4, #0]
 800f1cc:	f015 0506 	ands.w	r5, r5, #6
 800f1d0:	d106      	bne.n	800f1e0 <_printf_common+0x48>
 800f1d2:	f104 0a19 	add.w	sl, r4, #25
 800f1d6:	68e3      	ldr	r3, [r4, #12]
 800f1d8:	6832      	ldr	r2, [r6, #0]
 800f1da:	1a9b      	subs	r3, r3, r2
 800f1dc:	42ab      	cmp	r3, r5
 800f1de:	dc26      	bgt.n	800f22e <_printf_common+0x96>
 800f1e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f1e4:	6822      	ldr	r2, [r4, #0]
 800f1e6:	3b00      	subs	r3, #0
 800f1e8:	bf18      	it	ne
 800f1ea:	2301      	movne	r3, #1
 800f1ec:	0692      	lsls	r2, r2, #26
 800f1ee:	d42b      	bmi.n	800f248 <_printf_common+0xb0>
 800f1f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f1f4:	4641      	mov	r1, r8
 800f1f6:	4638      	mov	r0, r7
 800f1f8:	47c8      	blx	r9
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	d01e      	beq.n	800f23c <_printf_common+0xa4>
 800f1fe:	6823      	ldr	r3, [r4, #0]
 800f200:	6922      	ldr	r2, [r4, #16]
 800f202:	f003 0306 	and.w	r3, r3, #6
 800f206:	2b04      	cmp	r3, #4
 800f208:	bf02      	ittt	eq
 800f20a:	68e5      	ldreq	r5, [r4, #12]
 800f20c:	6833      	ldreq	r3, [r6, #0]
 800f20e:	1aed      	subeq	r5, r5, r3
 800f210:	68a3      	ldr	r3, [r4, #8]
 800f212:	bf0c      	ite	eq
 800f214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f218:	2500      	movne	r5, #0
 800f21a:	4293      	cmp	r3, r2
 800f21c:	bfc4      	itt	gt
 800f21e:	1a9b      	subgt	r3, r3, r2
 800f220:	18ed      	addgt	r5, r5, r3
 800f222:	2600      	movs	r6, #0
 800f224:	341a      	adds	r4, #26
 800f226:	42b5      	cmp	r5, r6
 800f228:	d11a      	bne.n	800f260 <_printf_common+0xc8>
 800f22a:	2000      	movs	r0, #0
 800f22c:	e008      	b.n	800f240 <_printf_common+0xa8>
 800f22e:	2301      	movs	r3, #1
 800f230:	4652      	mov	r2, sl
 800f232:	4641      	mov	r1, r8
 800f234:	4638      	mov	r0, r7
 800f236:	47c8      	blx	r9
 800f238:	3001      	adds	r0, #1
 800f23a:	d103      	bne.n	800f244 <_printf_common+0xac>
 800f23c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f244:	3501      	adds	r5, #1
 800f246:	e7c6      	b.n	800f1d6 <_printf_common+0x3e>
 800f248:	18e1      	adds	r1, r4, r3
 800f24a:	1c5a      	adds	r2, r3, #1
 800f24c:	2030      	movs	r0, #48	@ 0x30
 800f24e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f252:	4422      	add	r2, r4
 800f254:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f258:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f25c:	3302      	adds	r3, #2
 800f25e:	e7c7      	b.n	800f1f0 <_printf_common+0x58>
 800f260:	2301      	movs	r3, #1
 800f262:	4622      	mov	r2, r4
 800f264:	4641      	mov	r1, r8
 800f266:	4638      	mov	r0, r7
 800f268:	47c8      	blx	r9
 800f26a:	3001      	adds	r0, #1
 800f26c:	d0e6      	beq.n	800f23c <_printf_common+0xa4>
 800f26e:	3601      	adds	r6, #1
 800f270:	e7d9      	b.n	800f226 <_printf_common+0x8e>
	...

0800f274 <_printf_i>:
 800f274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f278:	7e0f      	ldrb	r7, [r1, #24]
 800f27a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f27c:	2f78      	cmp	r7, #120	@ 0x78
 800f27e:	4691      	mov	r9, r2
 800f280:	4680      	mov	r8, r0
 800f282:	460c      	mov	r4, r1
 800f284:	469a      	mov	sl, r3
 800f286:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f28a:	d807      	bhi.n	800f29c <_printf_i+0x28>
 800f28c:	2f62      	cmp	r7, #98	@ 0x62
 800f28e:	d80a      	bhi.n	800f2a6 <_printf_i+0x32>
 800f290:	2f00      	cmp	r7, #0
 800f292:	f000 80d2 	beq.w	800f43a <_printf_i+0x1c6>
 800f296:	2f58      	cmp	r7, #88	@ 0x58
 800f298:	f000 80b9 	beq.w	800f40e <_printf_i+0x19a>
 800f29c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f2a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f2a4:	e03a      	b.n	800f31c <_printf_i+0xa8>
 800f2a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f2aa:	2b15      	cmp	r3, #21
 800f2ac:	d8f6      	bhi.n	800f29c <_printf_i+0x28>
 800f2ae:	a101      	add	r1, pc, #4	@ (adr r1, 800f2b4 <_printf_i+0x40>)
 800f2b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2b4:	0800f30d 	.word	0x0800f30d
 800f2b8:	0800f321 	.word	0x0800f321
 800f2bc:	0800f29d 	.word	0x0800f29d
 800f2c0:	0800f29d 	.word	0x0800f29d
 800f2c4:	0800f29d 	.word	0x0800f29d
 800f2c8:	0800f29d 	.word	0x0800f29d
 800f2cc:	0800f321 	.word	0x0800f321
 800f2d0:	0800f29d 	.word	0x0800f29d
 800f2d4:	0800f29d 	.word	0x0800f29d
 800f2d8:	0800f29d 	.word	0x0800f29d
 800f2dc:	0800f29d 	.word	0x0800f29d
 800f2e0:	0800f421 	.word	0x0800f421
 800f2e4:	0800f34b 	.word	0x0800f34b
 800f2e8:	0800f3db 	.word	0x0800f3db
 800f2ec:	0800f29d 	.word	0x0800f29d
 800f2f0:	0800f29d 	.word	0x0800f29d
 800f2f4:	0800f443 	.word	0x0800f443
 800f2f8:	0800f29d 	.word	0x0800f29d
 800f2fc:	0800f34b 	.word	0x0800f34b
 800f300:	0800f29d 	.word	0x0800f29d
 800f304:	0800f29d 	.word	0x0800f29d
 800f308:	0800f3e3 	.word	0x0800f3e3
 800f30c:	6833      	ldr	r3, [r6, #0]
 800f30e:	1d1a      	adds	r2, r3, #4
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	6032      	str	r2, [r6, #0]
 800f314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f318:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f31c:	2301      	movs	r3, #1
 800f31e:	e09d      	b.n	800f45c <_printf_i+0x1e8>
 800f320:	6833      	ldr	r3, [r6, #0]
 800f322:	6820      	ldr	r0, [r4, #0]
 800f324:	1d19      	adds	r1, r3, #4
 800f326:	6031      	str	r1, [r6, #0]
 800f328:	0606      	lsls	r6, r0, #24
 800f32a:	d501      	bpl.n	800f330 <_printf_i+0xbc>
 800f32c:	681d      	ldr	r5, [r3, #0]
 800f32e:	e003      	b.n	800f338 <_printf_i+0xc4>
 800f330:	0645      	lsls	r5, r0, #25
 800f332:	d5fb      	bpl.n	800f32c <_printf_i+0xb8>
 800f334:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f338:	2d00      	cmp	r5, #0
 800f33a:	da03      	bge.n	800f344 <_printf_i+0xd0>
 800f33c:	232d      	movs	r3, #45	@ 0x2d
 800f33e:	426d      	negs	r5, r5
 800f340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f344:	4859      	ldr	r0, [pc, #356]	@ (800f4ac <_printf_i+0x238>)
 800f346:	230a      	movs	r3, #10
 800f348:	e011      	b.n	800f36e <_printf_i+0xfa>
 800f34a:	6821      	ldr	r1, [r4, #0]
 800f34c:	6833      	ldr	r3, [r6, #0]
 800f34e:	0608      	lsls	r0, r1, #24
 800f350:	f853 5b04 	ldr.w	r5, [r3], #4
 800f354:	d402      	bmi.n	800f35c <_printf_i+0xe8>
 800f356:	0649      	lsls	r1, r1, #25
 800f358:	bf48      	it	mi
 800f35a:	b2ad      	uxthmi	r5, r5
 800f35c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f35e:	4853      	ldr	r0, [pc, #332]	@ (800f4ac <_printf_i+0x238>)
 800f360:	6033      	str	r3, [r6, #0]
 800f362:	bf14      	ite	ne
 800f364:	230a      	movne	r3, #10
 800f366:	2308      	moveq	r3, #8
 800f368:	2100      	movs	r1, #0
 800f36a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f36e:	6866      	ldr	r6, [r4, #4]
 800f370:	60a6      	str	r6, [r4, #8]
 800f372:	2e00      	cmp	r6, #0
 800f374:	bfa2      	ittt	ge
 800f376:	6821      	ldrge	r1, [r4, #0]
 800f378:	f021 0104 	bicge.w	r1, r1, #4
 800f37c:	6021      	strge	r1, [r4, #0]
 800f37e:	b90d      	cbnz	r5, 800f384 <_printf_i+0x110>
 800f380:	2e00      	cmp	r6, #0
 800f382:	d04b      	beq.n	800f41c <_printf_i+0x1a8>
 800f384:	4616      	mov	r6, r2
 800f386:	fbb5 f1f3 	udiv	r1, r5, r3
 800f38a:	fb03 5711 	mls	r7, r3, r1, r5
 800f38e:	5dc7      	ldrb	r7, [r0, r7]
 800f390:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f394:	462f      	mov	r7, r5
 800f396:	42bb      	cmp	r3, r7
 800f398:	460d      	mov	r5, r1
 800f39a:	d9f4      	bls.n	800f386 <_printf_i+0x112>
 800f39c:	2b08      	cmp	r3, #8
 800f39e:	d10b      	bne.n	800f3b8 <_printf_i+0x144>
 800f3a0:	6823      	ldr	r3, [r4, #0]
 800f3a2:	07df      	lsls	r7, r3, #31
 800f3a4:	d508      	bpl.n	800f3b8 <_printf_i+0x144>
 800f3a6:	6923      	ldr	r3, [r4, #16]
 800f3a8:	6861      	ldr	r1, [r4, #4]
 800f3aa:	4299      	cmp	r1, r3
 800f3ac:	bfde      	ittt	le
 800f3ae:	2330      	movle	r3, #48	@ 0x30
 800f3b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f3b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f3b8:	1b92      	subs	r2, r2, r6
 800f3ba:	6122      	str	r2, [r4, #16]
 800f3bc:	f8cd a000 	str.w	sl, [sp]
 800f3c0:	464b      	mov	r3, r9
 800f3c2:	aa03      	add	r2, sp, #12
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	4640      	mov	r0, r8
 800f3c8:	f7ff fee6 	bl	800f198 <_printf_common>
 800f3cc:	3001      	adds	r0, #1
 800f3ce:	d14a      	bne.n	800f466 <_printf_i+0x1f2>
 800f3d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3d4:	b004      	add	sp, #16
 800f3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3da:	6823      	ldr	r3, [r4, #0]
 800f3dc:	f043 0320 	orr.w	r3, r3, #32
 800f3e0:	6023      	str	r3, [r4, #0]
 800f3e2:	4833      	ldr	r0, [pc, #204]	@ (800f4b0 <_printf_i+0x23c>)
 800f3e4:	2778      	movs	r7, #120	@ 0x78
 800f3e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f3ea:	6823      	ldr	r3, [r4, #0]
 800f3ec:	6831      	ldr	r1, [r6, #0]
 800f3ee:	061f      	lsls	r7, r3, #24
 800f3f0:	f851 5b04 	ldr.w	r5, [r1], #4
 800f3f4:	d402      	bmi.n	800f3fc <_printf_i+0x188>
 800f3f6:	065f      	lsls	r7, r3, #25
 800f3f8:	bf48      	it	mi
 800f3fa:	b2ad      	uxthmi	r5, r5
 800f3fc:	6031      	str	r1, [r6, #0]
 800f3fe:	07d9      	lsls	r1, r3, #31
 800f400:	bf44      	itt	mi
 800f402:	f043 0320 	orrmi.w	r3, r3, #32
 800f406:	6023      	strmi	r3, [r4, #0]
 800f408:	b11d      	cbz	r5, 800f412 <_printf_i+0x19e>
 800f40a:	2310      	movs	r3, #16
 800f40c:	e7ac      	b.n	800f368 <_printf_i+0xf4>
 800f40e:	4827      	ldr	r0, [pc, #156]	@ (800f4ac <_printf_i+0x238>)
 800f410:	e7e9      	b.n	800f3e6 <_printf_i+0x172>
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	f023 0320 	bic.w	r3, r3, #32
 800f418:	6023      	str	r3, [r4, #0]
 800f41a:	e7f6      	b.n	800f40a <_printf_i+0x196>
 800f41c:	4616      	mov	r6, r2
 800f41e:	e7bd      	b.n	800f39c <_printf_i+0x128>
 800f420:	6833      	ldr	r3, [r6, #0]
 800f422:	6825      	ldr	r5, [r4, #0]
 800f424:	6961      	ldr	r1, [r4, #20]
 800f426:	1d18      	adds	r0, r3, #4
 800f428:	6030      	str	r0, [r6, #0]
 800f42a:	062e      	lsls	r6, r5, #24
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	d501      	bpl.n	800f434 <_printf_i+0x1c0>
 800f430:	6019      	str	r1, [r3, #0]
 800f432:	e002      	b.n	800f43a <_printf_i+0x1c6>
 800f434:	0668      	lsls	r0, r5, #25
 800f436:	d5fb      	bpl.n	800f430 <_printf_i+0x1bc>
 800f438:	8019      	strh	r1, [r3, #0]
 800f43a:	2300      	movs	r3, #0
 800f43c:	6123      	str	r3, [r4, #16]
 800f43e:	4616      	mov	r6, r2
 800f440:	e7bc      	b.n	800f3bc <_printf_i+0x148>
 800f442:	6833      	ldr	r3, [r6, #0]
 800f444:	1d1a      	adds	r2, r3, #4
 800f446:	6032      	str	r2, [r6, #0]
 800f448:	681e      	ldr	r6, [r3, #0]
 800f44a:	6862      	ldr	r2, [r4, #4]
 800f44c:	2100      	movs	r1, #0
 800f44e:	4630      	mov	r0, r6
 800f450:	f7f0 fee6 	bl	8000220 <memchr>
 800f454:	b108      	cbz	r0, 800f45a <_printf_i+0x1e6>
 800f456:	1b80      	subs	r0, r0, r6
 800f458:	6060      	str	r0, [r4, #4]
 800f45a:	6863      	ldr	r3, [r4, #4]
 800f45c:	6123      	str	r3, [r4, #16]
 800f45e:	2300      	movs	r3, #0
 800f460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f464:	e7aa      	b.n	800f3bc <_printf_i+0x148>
 800f466:	6923      	ldr	r3, [r4, #16]
 800f468:	4632      	mov	r2, r6
 800f46a:	4649      	mov	r1, r9
 800f46c:	4640      	mov	r0, r8
 800f46e:	47d0      	blx	sl
 800f470:	3001      	adds	r0, #1
 800f472:	d0ad      	beq.n	800f3d0 <_printf_i+0x15c>
 800f474:	6823      	ldr	r3, [r4, #0]
 800f476:	079b      	lsls	r3, r3, #30
 800f478:	d413      	bmi.n	800f4a2 <_printf_i+0x22e>
 800f47a:	68e0      	ldr	r0, [r4, #12]
 800f47c:	9b03      	ldr	r3, [sp, #12]
 800f47e:	4298      	cmp	r0, r3
 800f480:	bfb8      	it	lt
 800f482:	4618      	movlt	r0, r3
 800f484:	e7a6      	b.n	800f3d4 <_printf_i+0x160>
 800f486:	2301      	movs	r3, #1
 800f488:	4632      	mov	r2, r6
 800f48a:	4649      	mov	r1, r9
 800f48c:	4640      	mov	r0, r8
 800f48e:	47d0      	blx	sl
 800f490:	3001      	adds	r0, #1
 800f492:	d09d      	beq.n	800f3d0 <_printf_i+0x15c>
 800f494:	3501      	adds	r5, #1
 800f496:	68e3      	ldr	r3, [r4, #12]
 800f498:	9903      	ldr	r1, [sp, #12]
 800f49a:	1a5b      	subs	r3, r3, r1
 800f49c:	42ab      	cmp	r3, r5
 800f49e:	dcf2      	bgt.n	800f486 <_printf_i+0x212>
 800f4a0:	e7eb      	b.n	800f47a <_printf_i+0x206>
 800f4a2:	2500      	movs	r5, #0
 800f4a4:	f104 0619 	add.w	r6, r4, #25
 800f4a8:	e7f5      	b.n	800f496 <_printf_i+0x222>
 800f4aa:	bf00      	nop
 800f4ac:	0800fe01 	.word	0x0800fe01
 800f4b0:	0800fe12 	.word	0x0800fe12

0800f4b4 <memmove>:
 800f4b4:	4288      	cmp	r0, r1
 800f4b6:	b510      	push	{r4, lr}
 800f4b8:	eb01 0402 	add.w	r4, r1, r2
 800f4bc:	d902      	bls.n	800f4c4 <memmove+0x10>
 800f4be:	4284      	cmp	r4, r0
 800f4c0:	4623      	mov	r3, r4
 800f4c2:	d807      	bhi.n	800f4d4 <memmove+0x20>
 800f4c4:	1e43      	subs	r3, r0, #1
 800f4c6:	42a1      	cmp	r1, r4
 800f4c8:	d008      	beq.n	800f4dc <memmove+0x28>
 800f4ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4d2:	e7f8      	b.n	800f4c6 <memmove+0x12>
 800f4d4:	4402      	add	r2, r0
 800f4d6:	4601      	mov	r1, r0
 800f4d8:	428a      	cmp	r2, r1
 800f4da:	d100      	bne.n	800f4de <memmove+0x2a>
 800f4dc:	bd10      	pop	{r4, pc}
 800f4de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4e6:	e7f7      	b.n	800f4d8 <memmove+0x24>

0800f4e8 <_sbrk_r>:
 800f4e8:	b538      	push	{r3, r4, r5, lr}
 800f4ea:	4d06      	ldr	r5, [pc, #24]	@ (800f504 <_sbrk_r+0x1c>)
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	4608      	mov	r0, r1
 800f4f2:	602b      	str	r3, [r5, #0]
 800f4f4:	f7f2 faee 	bl	8001ad4 <_sbrk>
 800f4f8:	1c43      	adds	r3, r0, #1
 800f4fa:	d102      	bne.n	800f502 <_sbrk_r+0x1a>
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	b103      	cbz	r3, 800f502 <_sbrk_r+0x1a>
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	bd38      	pop	{r3, r4, r5, pc}
 800f504:	200052a0 	.word	0x200052a0

0800f508 <_realloc_r>:
 800f508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f50c:	4680      	mov	r8, r0
 800f50e:	4615      	mov	r5, r2
 800f510:	460c      	mov	r4, r1
 800f512:	b921      	cbnz	r1, 800f51e <_realloc_r+0x16>
 800f514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f518:	4611      	mov	r1, r2
 800f51a:	f7ff bc59 	b.w	800edd0 <_malloc_r>
 800f51e:	b92a      	cbnz	r2, 800f52c <_realloc_r+0x24>
 800f520:	f7ff fbea 	bl	800ecf8 <_free_r>
 800f524:	2400      	movs	r4, #0
 800f526:	4620      	mov	r0, r4
 800f528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f52c:	f000 f81a 	bl	800f564 <_malloc_usable_size_r>
 800f530:	4285      	cmp	r5, r0
 800f532:	4606      	mov	r6, r0
 800f534:	d802      	bhi.n	800f53c <_realloc_r+0x34>
 800f536:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f53a:	d8f4      	bhi.n	800f526 <_realloc_r+0x1e>
 800f53c:	4629      	mov	r1, r5
 800f53e:	4640      	mov	r0, r8
 800f540:	f7ff fc46 	bl	800edd0 <_malloc_r>
 800f544:	4607      	mov	r7, r0
 800f546:	2800      	cmp	r0, #0
 800f548:	d0ec      	beq.n	800f524 <_realloc_r+0x1c>
 800f54a:	42b5      	cmp	r5, r6
 800f54c:	462a      	mov	r2, r5
 800f54e:	4621      	mov	r1, r4
 800f550:	bf28      	it	cs
 800f552:	4632      	movcs	r2, r6
 800f554:	f7ff fbc2 	bl	800ecdc <memcpy>
 800f558:	4621      	mov	r1, r4
 800f55a:	4640      	mov	r0, r8
 800f55c:	f7ff fbcc 	bl	800ecf8 <_free_r>
 800f560:	463c      	mov	r4, r7
 800f562:	e7e0      	b.n	800f526 <_realloc_r+0x1e>

0800f564 <_malloc_usable_size_r>:
 800f564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f568:	1f18      	subs	r0, r3, #4
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	bfbc      	itt	lt
 800f56e:	580b      	ldrlt	r3, [r1, r0]
 800f570:	18c0      	addlt	r0, r0, r3
 800f572:	4770      	bx	lr

0800f574 <_init>:
 800f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f576:	bf00      	nop
 800f578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f57a:	bc08      	pop	{r3}
 800f57c:	469e      	mov	lr, r3
 800f57e:	4770      	bx	lr

0800f580 <_fini>:
 800f580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f582:	bf00      	nop
 800f584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f586:	bc08      	pop	{r3}
 800f588:	469e      	mov	lr, r3
 800f58a:	4770      	bx	lr
